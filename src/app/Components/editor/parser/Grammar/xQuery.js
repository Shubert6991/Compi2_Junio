/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQuery = (function () {
  var o = function (k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o;
    },
    $V0 = [1, 21],
    $V1 = [1, 19],
    $V2 = [1, 20],
    $V3 = [1, 22],
    $V4 = [1, 23],
    $V5 = [1, 24],
    $V6 = [1, 18],
    $V7 = [1, 13],
    $V8 = [1, 15],
    $V9 = [1, 16],
    $Va = [1, 17],
    $Vb = [1, 14],
    $Vc = [1, 25],
    $Vd = [5, 34, 40, 41, 42, 43, 44, 56, 60, 65, 67, 68, 72, 100],
    $Ve = [5, 34, 40, 41, 42, 43, 44, 56, 60, 65, 67, 68, 72, 78, 98, 100],
    $Vf = [1, 37],
    $Vg = [1, 41],
    $Vh = [1, 53],
    $Vi = [1, 44],
    $Vj = [1, 45],
    $Vk = [1, 35],
    $Vl = [1, 46],
    $Vm = [1, 47],
    $Vn = [1, 48],
    $Vo = [1, 49],
    $Vp = [1, 50],
    $Vq = [1, 51],
    $Vr = [1, 52],
    $Vs = [1, 54],
    $Vt = [1, 55],
    $Vu = [1, 56],
    $Vv = [1, 57],
    $Vw = [1, 58],
    $Vx = [1, 59],
    $Vy = [1, 60],
    $Vz = [1, 61],
    $VA = [1, 62],
    $VB = [
      5, 16, 18, 25, 29, 34, 39, 40, 41, 42, 43, 44, 54, 55, 56, 59, 60, 65, 67,
      68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88,
      89, 90, 91, 100,
    ],
    $VC = [1, 71],
    $VD = [1, 72],
    $VE = [1, 73],
    $VF = [1, 74],
    $VG = [1, 75],
    $VH = [1, 76],
    $VI = [1, 77],
    $VJ = [1, 78],
    $VK = [1, 79],
    $VL = [1, 80],
    $VM = [1, 81],
    $VN = [1, 82],
    $VO = [
      5, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 60, 65, 67, 68, 71, 72, 73, 74,
      75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 100,
    ],
    $VP = [2, 82],
    $VQ = [1, 85],
    $VR = [1, 83],
    $VS = [1, 84],
    $VT = [1, 86],
    $VU = [1, 87],
    $VV = [1, 88],
    $VW = [1, 89],
    $VX = [
      5, 25, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 60, 65, 67, 68, 71, 72, 73,
      74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 100,
    ],
    $VY = [
      5, 25, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 59, 60, 65, 67, 68, 71, 72,
      73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91,
      100,
    ],
    $VZ = [1, 93],
    $V_ = [1, 92],
    $V$ = [
      5, 16, 18, 25, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 59, 60, 65, 67, 68,
      71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89,
      90, 91, 100,
    ],
    $V01 = [2, 50],
    $V11 = [1, 99],
    $V21 = [
      5, 16, 18, 24, 25, 29, 34, 39, 40, 41, 42, 43, 44, 54, 55, 56, 59, 60, 65,
      67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87,
      88, 89, 90, 91, 100,
    ],
    $V31 = [1, 119],
    $V41 = [1, 118],
    $V51 = [1, 120],
    $V61 = [1, 124],
    $V71 = [1, 145],
    $V81 = [5, 34, 39, 40, 41, 42, 43, 44, 56, 60, 65, 67, 68, 72, 100],
    $V91 = [1, 170],
    $Va1 = [
      5, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 60, 65, 67, 68, 71, 72, 73, 74,
      75, 76, 77, 78, 100,
    ],
    $Vb1 = [
      5, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 60, 65, 67, 68, 71, 72, 75, 76,
      100,
    ],
    $Vc1 = [
      5, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 60, 65, 67, 68, 71, 72, 73, 74,
      75, 76, 77, 78, 79, 80, 100,
    ],
    $Vd1 = [
      5, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 60, 65, 67, 68, 71, 72, 73, 74,
      75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 90, 91, 100,
    ],
    $Ve1 = [40, 77, 97, 98];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      error: 2,
      Init: 3,
      LExpresiones: 4,
      EOF: 5,
      Instrucciones: 6,
      HTML: 7,
      For: 8,
      Return: 9,
      Let: 10,
      Where: 11,
      OrderBy: 12,
      If: 13,
      Valor: 14,
      Exp: 15,
      DIVSIGN: 16,
      Lexp: 17,
      ORSIGN: 18,
      Syntfin: 19,
      Fin: 20,
      "@": 21,
      Opc: 22,
      Preservada: 23,
      "::": 24,
      "*": 25,
      DIR: 26,
      TEXT: 27,
      "(": 28,
      ")": 29,
      NODE: 30,
      POSITION: 31,
      LAST: 32,
      DOC: 33,
      STRING: 34,
      DATA: 35,
      ExprLogica: 36,
      UPPERCASE: 37,
      SUBSTRING: 38,
      ",": 39,
      ID: 40,
      NUMBER: 41,
      STRING2: 42,
      DECIMAL: 43,
      VARIABLE: 44,
      CHILD: 45,
      DESCENDANT: 46,
      ANCESTOR: 47,
      PRECEDING: 48,
      FOLLOWING: 49,
      NAMESPACE: 50,
      SELF: 51,
      PARENT: 52,
      ATTR: 53,
      "[": 54,
      "]": 55,
      IF: 56,
      THEN: 57,
      Else: 58,
      ELSE: 59,
      FOR: 60,
      LFor: 61,
      IN: 62,
      ClauseExpr: 63,
      AT: 64,
      LET: 65,
      ":=": 66,
      WHERE: 67,
      ORDER: 68,
      BY: 69,
      LExp: 70,
      TO: 71,
      RETURN: 72,
      "<=": 73,
      ">=": 74,
      "=": 75,
      "!=": 76,
      ">": 77,
      "<": 78,
      EQ: 79,
      NE: 80,
      LT: 81,
      LE: 82,
      GT: 83,
      GE: 84,
      Expr: 85,
      "+": 86,
      "-": 87,
      DIV: 88,
      MOD: 89,
      OR: 90,
      AND: 91,
      HTMLSTRING: 92,
      ATRIBUTOS: 93,
      SUFIX: 94,
      XQUERY: 95,
      "[\\": 96,
      "/>": 97,
      "</": 98,
      tk_llavea: 99,
      tk_llavec: 100,
      $accept: 0,
      $end: 1,
    },
    terminals_: {
      2: "error",
      5: "EOF",
      16: "DIVSIGN",
      18: "ORSIGN",
      21: "@",
      24: "::",
      25: "*",
      26: "DIR",
      27: "TEXT",
      28: "(",
      29: ")",
      30: "NODE",
      31: "POSITION",
      32: "LAST",
      33: "DOC",
      34: "STRING",
      35: "DATA",
      37: "UPPERCASE",
      38: "SUBSTRING",
      39: ",",
      40: "ID",
      41: "NUMBER",
      42: "STRING2",
      43: "DECIMAL",
      44: "VARIABLE",
      45: "CHILD",
      46: "DESCENDANT",
      47: "ANCESTOR",
      48: "PRECEDING",
      49: "FOLLOWING",
      50: "NAMESPACE",
      51: "SELF",
      52: "PARENT",
      53: "ATTR",
      54: "[",
      55: "]",
      56: "IF",
      57: "THEN",
      59: "ELSE",
      60: "FOR",
      62: "IN",
      64: "AT",
      65: "LET",
      66: ":=",
      67: "WHERE",
      68: "ORDER",
      69: "BY",
      71: "TO",
      72: "RETURN",
      73: "<=",
      74: ">=",
      75: "=",
      76: "!=",
      77: ">",
      78: "<",
      79: "EQ",
      80: "NE",
      81: "LT",
      82: "LE",
      83: "GT",
      84: "GE",
      86: "+",
      87: "-",
      88: "DIV",
      89: "MOD",
      90: "OR",
      91: "AND",
      96: "[\\",
      97: "/>",
      98: "</",
      99: "tk_llavea",
      100: "tk_llavec",
    },
    productions_: [
      0,
      [3, 2],
      [4, 2],
      [4, 1],
      [4, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [15, 2],
      [15, 1],
      [17, 4],
      [17, 3],
      [17, 1],
      [19, 1],
      [19, 3],
      [19, 3],
      [19, 3],
      [19, 2],
      [20, 2],
      [20, 2],
      [20, 3],
      [20, 3],
      [20, 3],
      [20, 3],
      [20, 4],
      [20, 4],
      [20, 4],
      [20, 8],
      [20, 2],
      [20, 2],
      [14, 1],
      [14, 1],
      [14, 1],
      [14, 1],
      [14, 1],
      [14, 1],
      [23, 1],
      [23, 1],
      [23, 1],
      [23, 1],
      [23, 1],
      [23, 1],
      [23, 1],
      [23, 1],
      [23, 1],
      [22, 3],
      [22, 0],
      [13, 7],
      [58, 2],
      [58, 0],
      [8, 2],
      [61, 5],
      [61, 7],
      [61, 3],
      [61, 5],
      [10, 4],
      [11, 2],
      [12, 3],
      [70, 3],
      [70, 1],
      [63, 1],
      [63, 5],
      [63, 5],
      [9, 2],
      [9, 2],
      [9, 2],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 3],
      [36, 1],
      [85, 3],
      [85, 3],
      [85, 3],
      [85, 3],
      [85, 3],
      [85, 3],
      [85, 3],
      [85, 3],
      [85, 1],
      [7, 2],
      [7, 1],
      [92, 4],
      [92, 3],
      [93, 4],
      [93, 4],
      [93, 6],
      [93, 3],
      [93, 3],
      [93, 5],
      [94, 1],
      [94, 5],
      [94, 5],
      [94, 2],
      [94, 3],
      [95, 3],
    ],
    performAction: function anonymous(
      yytext,
      yyleng,
      yylineno,
      yy,
      yystate /* action[1] */,
      $$ /* vstack */,
      _$ /* lstack */
    ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
        case 1:
          return $$[$0 - 1];

          break;
        case 2:
        case 12:
          $$[$0 - 1].push($$[$0]);
          this.$ = $$[$0 - 1];

          break;
        case 3:
          this.$ = [$$[$0]];

          break;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 17:
        case 52:
        case 60:
        case 61:
        case 91:
          this.$ = $$[$0];
          break;
        case 13:
        case 16:
          this.$ = [$$[$0]];
          break;
        case 22:
        case 23:
        case 90:
          this.$ = $$[$0 - 1];
          break;
        case 35:
          this.$ = new Literal(
            $$[$0],
            _$[$0].first_line,
            _$[$0].first_column,
            Type.NUMBER
          );

          break;
        case 36:
          this.$ = new Literal(
            $$[$0],
            _$[$0].first_line,
            _$[$0].first_column,
            Type.STRING
          );

          break;
        case 37:
          this.$ = new Literal(
            $$[$0],
            _$[$0].first_line,
            _$[$0].first_column,
            Type.STRING
          );

          break;
        case 38:
          this.$ = new Literal(
            $$[$0],
            _$[$0].first_line,
            _$[$0].first_column,
            Type.FLOAT
          );

          break;
        case 49:
          this.$ = $$[$0 - 2];
          break;
        case 51:
          this.$ = new If(
            $$[$0 - 4],
            $$[$0 - 1],
            $$[$0],
            _$[$0 - 6].first_line,
            _$[$0 - 6].first_column
          );

          break;
        case 54:
        case 64:
        case 82:
          this.$ = $$[$0];
          break;
        case 57:
          this.$ = new ForIn(
            $$[$0 - 2],
            $$[$0],
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 62:
          $$[$0 - 2].push($$[$0]);
          this.$ = $$[$0 - 2];

          break;
        case 63:
          this.$ = [$$[$0]];
          break;
        case 70:
        case 79:
          this.$ = new Relational(
            $$[$0 - 2],
            $$[$0],
            RelationalOption.LESSOREQUAL,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 71:
        case 81:
          this.$ = new Relational(
            $$[$0 - 2],
            $$[$0],
            RelationalOption.GREATEROREQUAL,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 72:
        case 76:
          this.$ = new Relational(
            $$[$0 - 2],
            $$[$0],
            RelationalOption.EQUAL,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 73:
        case 77:
          this.$ = new Relational(
            $$[$0 - 2],
            $$[$0],
            RelationalOption.NOTEQUAL,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 74:
        case 80:
          this.$ = new Relational(
            $$[$0 - 2],
            $$[$0],
            RelationalOption.GREATER,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 75:
        case 78:
          this.$ = new Relational(
            $$[$0 - 2],
            $$[$0],
            RelationalOption.LESS,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 83:
          this.$ = new Arithmetic(
            $$[$0 - 2],
            $$[$0],
            ArithmeticOption.PLUS,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 84:
          this.$ = new Arithmetic(
            $$[$0 - 2],
            $$[$0],
            ArithmeticOption.MINUS,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 85:
          this.$ = new Arithmetic(
            $$[$0 - 2],
            $$[$0],
            ArithmeticOption.TIMES,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 86:
          this.$ = new Arithmetic(
            $$[$0 - 2],
            $$[$0],
            ArithmeticOption.DIV,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 87:
          this.$ = new Arithmetic(
            $$[$0 - 2],
            $$[$0],
            ArithmeticOption.MOD,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 88:
          this.$ = new Logic(
            $$[$0 - 2],
            $$[$0],
            LogicOption.OR,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
        case 89:
          this.$ = new Logic(
            $$[$0 - 2],
            $$[$0],
            LogicOption.AND,
            _$[$0 - 2].first_line,
            _$[$0 - 2].first_column
          );

          break;
      }
    },
    table: [
      {
        3: 1,
        4: 2,
        6: 3,
        7: 4,
        8: 5,
        9: 6,
        10: 7,
        11: 8,
        12: 9,
        13: 10,
        14: 11,
        34: $V0,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        56: $V6,
        60: $V7,
        65: $V8,
        67: $V9,
        68: $Va,
        72: $Vb,
        78: $Vc,
        92: 12,
      },
      { 1: [3] },
      {
        5: [1, 26],
        6: 27,
        8: 5,
        9: 6,
        10: 7,
        11: 8,
        12: 9,
        13: 10,
        14: 11,
        34: $V0,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        56: $V6,
        60: $V7,
        65: $V8,
        67: $V9,
        68: $Va,
        72: $Vb,
      },
      o($Vd, [2, 3]),
      o($Vd, [2, 4], { 92: 28, 78: $Vc }),
      o($Vd, [2, 5]),
      o($Vd, [2, 6]),
      o($Vd, [2, 7]),
      o($Vd, [2, 8]),
      o($Vd, [2, 9]),
      o($Vd, [2, 10]),
      o($Vd, [2, 11]),
      o($Ve, [2, 93]),
      { 44: [1, 30], 61: 29 },
      {
        7: 33,
        13: 32,
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 31,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        56: $V6,
        78: $Vc,
        85: 34,
        92: 12,
      },
      { 44: [1, 63] },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 64,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      { 69: [1, 65] },
      { 28: [1, 66] },
      o($VB, [2, 34]),
      o($VB, [2, 35]),
      o($VB, [2, 36]),
      o($VB, [2, 37]),
      o($VB, [2, 38]),
      o($VB, [2, 39]),
      { 40: [1, 67] },
      { 1: [2, 1] },
      o($Vd, [2, 2]),
      o($Ve, [2, 92]),
      o($Vd, [2, 54], { 39: [1, 68] }),
      { 62: [1, 69], 64: [1, 70] },
      o($Vd, [2, 67], {
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      o($Vd, [2, 68]),
      o($Vd, [2, 69], { 92: 28, 78: $Vc }),
      o($VO, $VP, {
        25: $VQ,
        86: $VR,
        87: $VS,
        88: $VT,
        89: $VU,
        90: $VV,
        91: $VW,
      }),
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 90,
      },
      o($VX, [2, 91]),
      {
        14: 43,
        17: 91,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
      },
      o($VY, [2, 13], { 16: $VZ, 18: $V_ }),
      o($V$, [2, 16]),
      o($V$, [2, 17]),
      {
        14: 94,
        23: 95,
        25: [1, 96],
        34: $V0,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
      },
      o($V$, $V01, { 22: 98, 24: [1, 97], 54: $V11 }),
      o($V$, $V01, { 22: 100, 54: $V11 }),
      o($V$, $V01, { 22: 101, 54: $V11 }),
      { 28: [1, 102] },
      { 28: [1, 103] },
      { 28: [1, 104] },
      { 28: [1, 105] },
      { 28: [1, 106] },
      { 28: [1, 107] },
      { 28: [1, 108] },
      { 28: [1, 109] },
      o($V$, $V01, { 22: 110, 54: $V11 }),
      o($V21, [2, 40]),
      o($V21, [2, 41]),
      o($V21, [2, 42]),
      o($V21, [2, 43]),
      o($V21, [2, 44]),
      o($V21, [2, 45]),
      o($V21, [2, 46]),
      o($V21, [2, 47]),
      o($V21, [2, 48]),
      { 66: [1, 111] },
      o($Vd, [2, 60], {
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      {
        14: 43,
        15: 113,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        70: 112,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 114,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      { 40: [1, 117], 77: $V31, 93: 115, 94: 116, 97: $V41, 98: $V51 },
      { 44: [1, 121] },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $V61,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 123,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        63: 122,
        85: 34,
      },
      { 44: [1, 125] },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 126,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 127,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 128,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 129,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 130,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 131,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 132,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 133,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 134,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 135,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 136,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 137,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 138,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 139,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 140,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 141,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 142,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 143,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 144,
      },
      {
        25: $VQ,
        29: $V71,
        86: $VR,
        87: $VS,
        88: $VT,
        89: $VU,
        90: $VV,
        91: $VW,
      },
      o($VY, [2, 12], { 16: $VZ, 18: $V_ }),
      { 16: [1, 146] },
      {
        14: 43,
        19: 147,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
      },
      o($V$, $V01, { 22: 148, 54: $V11 }),
      o($V$, $V01, { 22: 149, 54: $V11 }),
      o($V$, [2, 21]),
      {
        14: 43,
        20: 150,
        23: 151,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
      },
      o($V$, [2, 32]),
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 152,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      o($V$, [2, 22]),
      o($V$, [2, 23]),
      { 29: [1, 153] },
      { 29: [1, 154] },
      { 29: [1, 155] },
      { 29: [1, 156] },
      { 34: [1, 157] },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 158,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 159,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 160,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      o($V$, [2, 33]),
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $V61,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 123,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        63: 161,
        85: 34,
      },
      o($Vd, [2, 61], { 39: [1, 162] }),
      o($V81, [2, 63]),
      {
        29: [1, 163],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      { 40: [1, 165], 77: $V31, 94: 164, 97: $V41, 98: $V51 },
      o($Ve, [2, 95]),
      { 75: [1, 166] },
      o($Ve, [2, 102]),
      { 7: 168, 40: [1, 169], 78: $Vc, 92: 12, 95: 167, 99: $V91 },
      { 40: [1, 171] },
      { 62: [1, 172], 64: [1, 173] },
      o($V81, [2, 57]),
      o($V81, [2, 64], {
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 174,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 175,
      },
      { 62: [1, 176] },
      o($Va1, [2, 70], {
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      o($Va1, [2, 71], {
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      o($Vb1, [2, 72], {
        73: $VC,
        74: $VD,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      o($Vb1, [2, 73], {
        73: $VC,
        74: $VD,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      o($Va1, [2, 74], {
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      o($Va1, [2, 75], {
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      }),
      o($Vc1, [2, 76], { 81: $VK, 82: $VL, 83: $VM, 84: $VN }),
      o($Vc1, [2, 77], { 81: $VK, 82: $VL, 83: $VM, 84: $VN }),
      o($VO, [2, 78]),
      o($VO, [2, 79]),
      o($VO, [2, 80]),
      o($VO, [2, 81]),
      o($Vd1, [2, 83], { 25: $VQ, 88: $VT, 89: $VU }),
      o($Vd1, [2, 84], { 25: $VQ, 88: $VT, 89: $VU }),
      o($VX, [2, 85]),
      o($VX, [2, 86]),
      o($VX, [2, 87]),
      o(
        [
          5, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 60, 65, 67, 68, 71, 72, 73,
          74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 100,
        ],
        [2, 88],
        { 25: $VQ, 86: $VR, 87: $VS, 88: $VT, 89: $VU, 91: $VW }
      ),
      o(
        [
          5, 29, 34, 39, 40, 41, 42, 43, 44, 55, 56, 60, 65, 67, 68, 71, 72, 73,
          74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 100,
        ],
        [2, 89],
        { 25: $VQ, 86: $VR, 87: $VS, 88: $VT, 89: $VU }
      ),
      o($VX, [2, 90]),
      {
        14: 43,
        19: 177,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
      },
      o($V$, [2, 15]),
      o($V$, [2, 18]),
      o($V$, [2, 20]),
      o($V$, [2, 19]),
      o($V$, $V01, { 22: 98, 54: $V11 }),
      {
        55: [1, 178],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      o($V$, [2, 24]),
      o($V$, [2, 25]),
      o($V$, [2, 26]),
      o($V$, [2, 27]),
      { 29: [1, 179] },
      {
        29: [1, 180],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      {
        29: [1, 181],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      {
        39: [1, 182],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      o($Vd, [2, 59]),
      {
        14: 43,
        15: 183,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
      },
      { 57: [1, 184] },
      o($Ve, [2, 94]),
      { 75: [1, 185] },
      { 34: [1, 186], 42: [1, 187], 55: [1, 188] },
      { 98: [1, 189] },
      { 78: $Vc, 92: 28, 98: [1, 190] },
      o($Ve, [2, 105]),
      {
        4: 191,
        6: 3,
        7: 4,
        8: 5,
        9: 6,
        10: 7,
        11: 8,
        12: 9,
        13: 10,
        14: 11,
        34: $V0,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        56: $V6,
        60: $V7,
        65: $V8,
        67: $V9,
        68: $Va,
        72: $Vb,
        78: $Vc,
        92: 12,
      },
      { 77: [1, 192] },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $V61,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 123,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        63: 193,
        85: 34,
      },
      { 44: [1, 194] },
      {
        39: [1, 196],
        71: [1, 195],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      o([39, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], $VP, {
        25: $VQ,
        29: $V71,
        86: $VR,
        87: $VS,
        88: $VT,
        89: $VU,
        90: $VV,
        91: $VW,
      }),
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $V61,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 123,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        63: 197,
        85: 34,
      },
      o($V$, [2, 14]),
      o($V$, [2, 49]),
      o($V$, [2, 28]),
      o($V$, [2, 29]),
      o($V$, [2, 30]),
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 198,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      o($V81, [2, 62]),
      {
        14: 43,
        15: 199,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
      },
      { 34: [1, 200], 42: [1, 201], 55: [1, 202] },
      o($Ve1, [2, 99]),
      o($Ve1, [2, 100]),
      { 95: 203, 99: $V91 },
      { 40: [1, 204] },
      { 40: [1, 205] },
      {
        6: 27,
        8: 5,
        9: 6,
        10: 7,
        11: 8,
        12: 9,
        13: 10,
        14: 11,
        34: $V0,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        56: $V6,
        60: $V7,
        65: $V8,
        67: $V9,
        68: $Va,
        72: $Vb,
        100: [1, 206],
      },
      o($Ve, [2, 106]),
      o($V81, [2, 55]),
      { 62: [1, 207] },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 208,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 209,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      o($V81, [2, 58]),
      {
        39: [1, 210],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      o($Vd, [2, 53], { 58: 211, 59: [1, 212] }),
      o($Ve1, [2, 96]),
      o($Ve1, [2, 97]),
      { 95: 213, 99: $V91 },
      { 96: [1, 214] },
      { 77: [1, 215] },
      { 77: [1, 216] },
      o([96, 98], [2, 107]),
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $V61,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 123,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        63: 217,
        85: 34,
      },
      {
        29: [1, 218],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      {
        29: [1, 219],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      {
        14: 43,
        15: 36,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        28: $Vk,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        36: 220,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
        85: 34,
      },
      o($Vd, [2, 51]),
      {
        14: 43,
        15: 221,
        16: $Vf,
        17: 38,
        19: 39,
        20: 40,
        21: $Vg,
        23: 42,
        25: $Vh,
        26: $Vi,
        27: $Vj,
        30: $Vl,
        31: $Vm,
        32: $Vn,
        33: $Vo,
        34: $V0,
        35: $Vp,
        37: $Vq,
        38: $Vr,
        40: $V1,
        41: $V2,
        42: $V3,
        43: $V4,
        44: $V5,
        45: $Vs,
        46: $Vt,
        47: $Vu,
        48: $Vv,
        49: $Vw,
        50: $Vx,
        51: $Vy,
        52: $Vz,
        53: $VA,
      },
      { 96: [1, 222] },
      o($Ve1, [2, 101]),
      o($Ve, [2, 103]),
      o($Ve, [2, 104]),
      o($V81, [2, 56]),
      o($V81, [2, 65]),
      o($V81, [2, 66]),
      {
        29: [1, 223],
        73: $VC,
        74: $VD,
        75: $VE,
        76: $VF,
        77: $VG,
        78: $VH,
        79: $VI,
        80: $VJ,
        81: $VK,
        82: $VL,
        83: $VM,
        84: $VN,
      },
      o($Vd, [2, 52]),
      o($Ve1, [2, 98]),
      o($V$, [2, 31]),
    ],
    defaultActions: { 26: [2, 1] },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [],
        vstack = [null],
        lstack = [],
        table = this.table,
        yytext = "",
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }
      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == "undefined") {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;
      if (typeof sharedState.yy.parseError === "function") {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }
      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }
      _token_stack: var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        if (typeof token !== "number") {
          token = self.symbols_[token] || token;
        }
        return token;
      };
      var symbol,
        preErrorSymbol,
        state,
        action,
        a,
        r,
        yyval = {},
        p,
        len,
        newState,
        expected;
      while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == "undefined") {
            symbol = lex();
          }
          action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
          var errStr = "";
          expected = [];
          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push("'" + this.terminals_[p] + "'");
            }
          }
          if (lexer.showPosition) {
            errStr =
              "Parse error on line " +
              (yylineno + 1) +
              ":\n" +
              lexer.showPosition() +
              "\nExpecting " +
              expected.join(", ") +
              ", got '" +
              (this.terminals_[symbol] || symbol) +
              "'";
          } else {
            errStr =
              "Parse error on line " +
              (yylineno + 1) +
              ": Unexpected " +
              (symbol == EOF
                ? "end of input"
                : "'" + (this.terminals_[symbol] || symbol) + "'");
          }
          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: yyloc,
            expected: expected,
          });
        }
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error(
            "Parse Error: multiple actions possible at state: " +
              state +
              ", token: " +
              symbol
          );
        }
        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                recovering--;
              }
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }
            break;
          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column,
            };
            if (ranges) {
              yyval._$.range = [
                lstack[lstack.length - (len || 1)].range[0],
                lstack[lstack.length - 1].range[1],
              ];
            }
            r = this.performAction.apply(
              yyval,
              [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack,
              ].concat(args)
            );
            if (typeof r !== "undefined") {
              return r;
            }
            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
          case 3:
            return true;
        }
      }
      return true;
    },
  };

  let valDeclaration = "";
  let valTag = "";
  let valInside = "";
  const { Error_ } = require("../Error");
  const { errores } = require("../Errores");
  const { NodoXML } = require("../Nodes/NodoXml");

  // Expresiones
  const { Relational, RelationalOption } = require("../Expression/Relational");
  const { Arithmetic, ArithmeticOption } = require("../Expression/Arithmetic");
  const { Logic, LogicOption } = require("../Expression/Logic");
  const { Literal } = require("../Expression/Literal");
  // Instrucciones
  const { If } = require("../Instruction/If");
  const { ForIn } = require("../Instruction/ForIn");

  // Extra
  const { Type } = require("../Abstract/Retorno");

  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = {
      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = "";
        this.conditionStack = ["INITIAL"];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0,
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines
            ? (lines.length === oldLines.length
                ? this.yylloc.first_column
                : 0) +
              oldLines[oldLines.length - lines.length].length -
              lines[0].length
            : this.yylloc.first_column - len,
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError(
            "Lexical error on line " +
              (this.yylineno + 1) +
              ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" +
              this.showPosition(),
            {
              text: "",
              token: null,
              line: this.yylineno,
            }
          );
        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(
          0,
          this.matched.length - this.match.length
        );
        return (
          (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "")
        );
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(
          /\n/g,
          ""
        );
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column,
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done,
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines
            ? lines[lines.length - 1].length -
              lines[lines.length - 1].match(/\r?\n?/)[0].length
            : this.yylloc.last_column + match[0].length,
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, (this.offset += this.yyleng)];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(
          this,
          this.yy,
          this,
          indexed_rule,
          this.conditionStack[this.conditionStack.length - 1]
        );
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;
        if (!this._more) {
          this.yytext = "";
          this.match = "";
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError(
            "Lexical error on line " +
              (this.yylineno + 1) +
              ". Unrecognized text.\n" +
              this.showPosition(),
            {
              text: "",
              token: null,
              line: this.yylineno,
            }
          );
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (
          this.conditionStack.length &&
          this.conditionStack[this.conditionStack.length - 1]
        ) {
          return this.conditions[
            this.conditionStack[this.conditionStack.length - 1]
          ].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: { "case-sensitive": true },
      performAction: function anonymous(
        yy,
        yy_,
        $avoiding_name_collisions,
        YY_START
      ) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
          case 0:
            this.begin("comment1");
            break;
          case 1:
            this.popState();
            break;
          case 2:
            break;
          case 3:
            break;
          case 4:
            this.begin("comment2");
            break;
          case 5:
            this.popState();
            break;
          case 6:
            break;
          case 7:
            break;
          case 8 /*se ignoran*/:
            break;
          case 9:
            return 43;
            break;
          case 10:
            return 41;
            break;
          case 11:
            return 34;
            break;
          case 12:
            return 42;
            break;
          case 13:
            return 16;
            break;
          case 14:
            return 26;
            break;
          case 15:
            return 47;
            break;
          case 16:
            return 49;
            break;
          case 17:
            return 48;
            break;
          case 18:
            return 18;
            break;
          case 19:
            return 21;
            break;
          case 20:
            return 25;
            break;
          case 21:
            return 24;
            break;
          case 22:
            return 66;
            break;
          case 23:
            return 87;
            break;
          case 24:
            return 86;
            break;
          case 25:
            return 39;
            break;
          case 26:
            return 98;
            break;
          case 27:
            return 73;
            break;
          case 28:
            return 74;
            break;
          case 29:
            return 78;
            break;
          case 30:
            return 77;
            break;
          case 31:
            return 76;
            break;
          case 32:
            return 75;
            break;
          case 33:
            return 90;
            break;
          case 34:
            return 91;
            break;
          case 35:
            return 89;
            break;
          case 36:
            return 88;
            break;
          case 37:
            return 28;
            break;
          case 38:
            return 29;
            break;
          case 39:
            return 54;
            break;
          case 40:
            return 55;
            break;
          case 41:
            return 99;
            break;
          case 42:
            return 100;
            break;
          case 43:
            return 45;
            break;
          case 44:
            return 53;
            break;
          case 45:
            return 46;
            break;
          case 46:
            return 50;
            break;
          case 47:
            return 52;
            break;
          case 48:
            return 51;
            break;
          case 49:
            return 27;
            break;
          case 50:
            return 32;
            break;
          case 51:
            return 31;
            break;
          case 52:
            return 30;
            break;
          case 53:
            return 79;
            break;
          case 54:
            return 80;
            break;
          case 55:
            return 81;
            break;
          case 56:
            return 82;
            break;
          case 57:
            return 83;
            break;
          case 58:
            return 84;
            break;
          case 59:
            return 33;
            break;
          case 60:
            return 60;
            break;
          case 61:
            return 62;
            break;
          case 62:
            return 72;
            break;
          case 63:
            return 64;
            break;
          case 64:
            return 62;
            break;
          case 65:
            return 71;
            break;
          case 66:
            return 65;
            break;
          case 67:
            return 67;
            break;
          case 68:
            return 68;
            break;
          case 69:
            return 69;
            break;
          case 70:
            return 56;
            break;
          case 71:
            return 57;
            break;
          case 72:
            return 59;
            break;
          case 73:
            return 35;
            break;
          case 74:
            return 37;
            break;
          case 75:
            return "SUBSTRING";
            break;
          case 76:
            return 40;
            break;
          case 77:
            return 44;
            break;
          case 78:
            return 5;
            break;
        }
      },
      rules: [
        /^(?:<!--)/,
        /^(?:-->)/,
        /^(?:.)/,
        /^(?:[ \t\r\n\f])/,
        /^(?:\(:)/,
        /^(?::\))/,
        /^(?:.)/,
        /^(?:[ \t\r\n\f])/,
        /^(?:[ \t\n\r\f])/,
        /^(?:([0-9]+(\.[0-9]+)?))/,
        /^(?:([0-9]+))/,
        /^(?:(([\"][^"]*[\"])))/,
        /^(?:(([\'][^\']*[\'])))/,
        /^(?:((\/)(\/)?))/,
        /^(?:((\.)(\.)?))/,
        /^(?:((ancestor)(-or-self)?))/,
        /^(?:((following)(-sibling)?))/,
        /^(?:((preceding)(-sibling)?))/,
        /^(?:((\|)(\|)?))/,
        /^(?:@)/,
        /^(?:\*)/,
        /^(?:::)/,
        /^(?::=)/,
        /^(?:-)/,
        /^(?:\+)/,
        /^(?:,)/,
        /^(?:<\/)/,
        /^(?:<=)/,
        /^(?:>=)/,
        /^(?:<)/,
        /^(?:>)/,
        /^(?:!=)/,
        /^(?:=)/,
        /^(?:or\b)/,
        /^(?:and\b)/,
        /^(?:mod\b)/,
        /^(?:div\b)/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:child\b)/,
        /^(?:attribute\b)/,
        /^(?:descendant\b)/,
        /^(?:namespace\b)/,
        /^(?:parent\b)/,
        /^(?:self\b)/,
        /^(?:text\b)/,
        /^(?:last\b)/,
        /^(?:position\b)/,
        /^(?:node\b)/,
        /^(?:eq\b)/,
        /^(?:ne\b)/,
        /^(?:lt\b)/,
        /^(?:le\b)/,
        /^(?:gt\b)/,
        /^(?:ge\b)/,
        /^(?:doc\b)/,
        /^(?:for\b)/,
        /^(?:in\b)/,
        /^(?:return\b)/,
        /^(?:at\b)/,
        /^(?:in\b)/,
        /^(?:to\b)/,
        /^(?:let\b)/,
        /^(?:where\b)/,
        /^(?:order\b)/,
        /^(?:by\b)/,
        /^(?:if\b)/,
        /^(?:then\b)/,
        /^(?:else\b)/,
        /^(?:data\b)/,
        /^(?:upper-case\b)/,
        /^(?:substring\b)/,
        /^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,
        /^(?:(\$)([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,
        /^(?:$)/,
      ],
      conditions: {
        comment2: { rules: [5, 6, 7], inclusive: false },
        comment1: { rules: [1, 2, 3], inclusive: false },
        INITIAL: {
          rules: [
            0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
            24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
            58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
            75, 76, 77, 78,
          ],
          inclusive: true,
        },
      },
    };
    return lexer;
  })();
  parser.lexer = lexer;
  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
})();

if (typeof require !== "undefined" && typeof exports !== "undefined") {
  exports.parser = xQuery;
  exports.Parser = xQuery.Parser;
  exports.parse = function () {
    return xQuery.parse.apply(xQuery, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log("Usage: " + args[0] + " FILE");
      process.exit(1);
    }
    // var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    // return exports.parser.parse(source);
  };
  if (typeof module !== "undefined" && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}
