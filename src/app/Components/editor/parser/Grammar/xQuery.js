/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,26],$V2=[1,17],$V3=[1,19],$V4=[1,18],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,16],$V9=[1,13],$Va=[1,15],$Vb=[1,14],$Vc=[1,24],$Vd=[1,25],$Ve=[5,15,17,20,40,44,45,46,47,59,63,76,84,85,95],$Vf=[5,15,17,20,40,44,45,46,47,59,62,63,74,76,78,84,85,95],$Vg=[5,15,17,20,40,44,45,46,47,59,62,63,74,76,78,84,85,95,107,127],$Vh=[1,36],$Vi=[1,38],$Vj=[1,42],$Vk=[1,54],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[5,15,17,20,21,24,26,33,40,44,45,46,47,57,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120],$VE=[74,78,84],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[1,82],$VL=[1,83],$VM=[1,84],$VN=[1,85],$VO=[1,86],$VP=[1,87],$VQ=[1,88],$VR=[5,15,17,20,21,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109,110,111,112,113],$VS=[1,91],$VT=[1,89],$VU=[1,90],$VV=[1,92],$VW=[1,93],$VX=[1,95],$VY=[5,15,17,20,21,33,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120],$VZ=[1,99],$V_=[1,98],$V$=[5,15,17,20,21,24,26,33,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120],$V01=[2,55],$V11=[1,105],$V21=[5,15,17,20,21,24,26,32,33,40,44,45,46,47,57,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120],$V31=[1,125],$V41=[1,124],$V51=[1,126],$V61=[1,132],$V71=[63,74,76,78,84],$V81=[1,139],$V91=[1,160],$Va1=[1,185],$Vb1=[21,63,74,76,78,84],$Vc1=[5,15,17,20,21,40,44,45,46,47,59,62,63,74,76,78,84,85,95],$Vd1=[5,15,17,20,21,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107],$Ve1=[5,15,17,20,21,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,104,105],$Vf1=[5,15,17,20,21,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109],$Vg1=[5,15,17,20,21,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,119,120],$Vh1=[1,221],$Vi1=[17,106,126,127],$Vj1=[20,21],$Vk1=[1,266],$Vl1=[1,267],$Vm1=[1,268],$Vn1=[1,269],$Vo1=[1,270],$Vp1=[20,21,94];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"LExpresiones":4,"EOF":5,"Instrucciones":6,"HTML":7,"For":8,"Return":9,"Let":10,"If":11,"Valor":12,"Function":13,"LlamadaFuncion":14,"LOCAL":15,":":16,"ID":17,"(":18,"LParams":19,")":20,",":21,"ExprLogica":22,"Exp":23,"DIVSIGN":24,"Lexp":25,"ORSIGN":26,"Syntfin":27,"Fin":28,"@":29,"Opc":30,"Preservada":31,"::":32,"*":33,"DIR":34,"TEXT":35,"NODE":36,"POSITION":37,"LAST":38,"DOC":39,"STRING":40,"DATA":41,"UPPERCASE":42,"SUBSTRING":43,"NUMBER":44,"STRING2":45,"DECIMAL":46,"VARIABLE":47,"CHILD":48,"DESCENDANT":49,"ANCESTOR":50,"PRECEDING":51,"FOLLOWING":52,"NAMESPACE":53,"SELF":54,"PARENT":55,"ATTR":56,"[":57,"]":58,"IF":59,"THEN":60,"stmnt":61,"ELSE":62,"FOR":63,"LFor":64,"forstmnt":65,"LForWhere":66,"IN":67,"ClauseExpr":68,"AT":69,"LForExpresiones":70,"For_Let_Opt":71,"Where":72,"LForOrderby":73,"Orderby":74,"LForReturn":75,"LET":76,":=":77,"WHERE":78,"OrderBy":79,"ORDER":80,"BY":81,"LExp":82,"TO":83,"RETURN":84,"DECLARE":85,"FUNCTION":86,"Prefix":87,"Parameter":88,"AS":89,"XS":90,"TipoVar":91,"prod_statement":92,";":93,"tk_llavea":94,"tk_llavec":95,"LVariables":96,"INTEGER_":97,"DECIMAL_":98,"STRING_":99,"BOOLEAN_":100,"DOUBLE_":101,"<=":102,">=":103,"=":104,"!=":105,">":106,"<":107,"EQ":108,"NE":109,"LT":110,"LE":111,"GT":112,"GE":113,"Expr":114,"+":115,"-":116,"DIV":117,"MOD":118,"OR":119,"AND":120,"HTMLSTRING":121,"ATRIBUTOS":122,"SUFIX":123,"XQUERY":124,"[\\":125,"/>":126,"</":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"LOCAL",16:":",17:"ID",18:"(",20:")",21:",",24:"DIVSIGN",26:"ORSIGN",29:"@",32:"::",33:"*",34:"DIR",35:"TEXT",36:"NODE",37:"POSITION",38:"LAST",39:"DOC",40:"STRING",41:"DATA",42:"UPPERCASE",43:"SUBSTRING",44:"NUMBER",45:"STRING2",46:"DECIMAL",47:"VARIABLE",48:"CHILD",49:"DESCENDANT",50:"ANCESTOR",51:"PRECEDING",52:"FOLLOWING",53:"NAMESPACE",54:"SELF",55:"PARENT",56:"ATTR",57:"[",58:"]",59:"IF",60:"THEN",62:"ELSE",63:"FOR",67:"IN",69:"AT",74:"Orderby",76:"LET",77:":=",78:"WHERE",80:"ORDER",81:"BY",83:"TO",84:"RETURN",85:"DECLARE",86:"FUNCTION",89:"AS",90:"XS",93:";",94:"tk_llavea",95:"tk_llavec",97:"INTEGER_",98:"DECIMAL_",99:"STRING_",100:"BOOLEAN_",101:"DOUBLE_",102:"<=",103:">=",104:"=",105:"!=",106:">",107:"<",108:"EQ",109:"NE",110:"LT",111:"LE",112:"GT",113:"GE",115:"+",116:"-",117:"DIV",118:"MOD",119:"OR",120:"AND",125:"[\\",126:"/>",127:"</"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[14,6],[14,5],[19,3],[19,1],[23,2],[23,1],[25,4],[25,3],[25,1],[27,1],[27,3],[27,3],[27,3],[27,2],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,4],[28,4],[28,4],[28,8],[28,2],[28,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[30,3],[30,0],[11,8],[61,2],[61,3],[61,1],[8,4],[64,5],[64,7],[64,3],[64,5],[65,1],[65,0],[70,2],[70,1],[71,1],[71,1],[66,2],[66,1],[73,2],[73,1],[75,1],[10,4],[72,2],[79,3],[82,3],[82,1],[68,1],[68,5],[68,5],[9,2],[9,2],[9,2],[13,12],[92,3],[92,2],[88,3],[88,2],[96,7],[96,5],[91,1],[91,1],[91,1],[91,1],[91,1],[87,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,1],[7,2],[7,1],[121,4],[121,3],[122,4],[122,4],[122,6],[122,3],[122,3],[122,5],[123,1],[123,5],[123,5],[123,2],[123,3],[124,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			return $$[$0-1];
    
break;
case 2:

			$$[$0-1].push($$[$0]);
			this.$ = $$[$0-1];
    
break;
case 3:
 
				this.$ = [$$[$0]] 
			
break;
case 5:
        
			errores.push(new Error_(_$[$0].first_line, _$[$0].first_column, 'Sintactico','Valor inesperado ' + yytext));
			return "error";
		
break;
case 6: case 7: case 8: case 9: case 10: case 11:
 
						this.$ = $$[$0]; 
			
break;
case 12:
					
			this.$ = new Call($$[$0-3],$$[$0-1],_$[$0-5].first_line+1,_$[$0-5].first_column+1);
		
break;
case 13:
					
					this.$ = new Call($$[$0-2],null,_$[$0-4].first_line+1,_$[$0-4].first_column+1);
		
break;
case 14:
	
			$$[$0-2].push($$[$0]);
			this.$ = $$[$0-2];
		
break;
case 15:
		
			this.$ = [$$[$0]];
		
break;
case 16:
					
			this.$ = $$[$0];
		
break;
case 17:
			
			this.$ = $$[$0];
		
break;
case 18:

			var lexp = new NodoXML("Lexp","Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val2 = new NodoXML($$[$0-1],"Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			lexp.addHijo($$[$0-3]);
			lexp.addHijo(val1);
			lexp.addHijo(val2);
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 19:
						
			var lexp = new NodoXML("Lexp","Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);			
			lexp.addHijo($$[$0-2]);
			lexp.addHijo(val1);			
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 20:

			this.$ = $$[$0];
		
break;
case 21:

					this.$ = $$[$0];
				
break;
case 22: case 24:

					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
					var val1 = new NodoXML($$[$0-2],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0-1]);			
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 23:

					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
					var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);													
					syntfin.addHijo($$[$0-2]);			
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 25:

	   
					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
					var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
					var val2 = new NodoXML($$[$0],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
					syntfin.addHijo(val1);
					syntfin.addHijo(val2);					
					this.$ = syntfin;
				
break;
case 26:
 
			this.$ = $$[$0-1];
		
break;
case 27:
 
	var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
			fin.addHijo(val1);		
			fin.addHijo($$[$0]);					
			this.$ = fin;
		
break;
case 28:

				var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 29:
		
			var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 30: case 31:

			var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 32:

			var fin = new NodoXML("Fin","Fin",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val1 = new NodoXML($$[$0-3],"Funcion",_$[$0-3].first_line+1,_$[$0-3].first_column+1);								
			var val2 = new NodoXML($$[$0-1],"Funcion",_$[$0-3].first_line+1,_$[$0-3].first_column+1);								
			fin.addHijo(val1);	
			fin.addHijo(val2);				
			this.$ = fin;
		
break;
case 33: case 34:

			var fin = new NodoXML("Fin","Fin",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val1 = new NodoXML($$[$0-3],"Funcion",_$[$0-3].first_line+1,_$[$0-3].first_column+1);																
			fin.addHijo(val1);	
			fin.addHijo($$[$0-1]);				
			this.$ = fin;
		
break;
case 35:

			var fin = new NodoXML("Fin","Fin",_$[$0-7].first_line+1,_$[$0-7].first_column+1);
			var val1 = new NodoXML($$[$0-7],"Funcion",_$[$0-7].first_line+1,_$[$0-7].first_column+1);																
			fin.addHijo(val1);	
			fin.addHijo($$[$0-5]);	
			fin.addHijo($$[$0-3]);	
			fin.addHijo($$[$0-1]);	
			this.$ = fin;
		
break;
case 36:

			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);			
			fin.addHijo($$[$0-1]);
			fin.addHijo($$[$0]);												
			this.$ = fin;
		
break;
case 37:

			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
			fin.addHijo(val1);	
			fin.addHijo($$[$0]);				
			this.$ = fin;
		
break;
case 39:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.NUMBER);
      
break;
case 40:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.STRING);
      
break;
case 41:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,  Type.STRING);
      
break;
case 42:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,  Type.FLOAT);
      
break;
case 43:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,  Type.VARIABLE);
      
break;
case 44:

          this.$ = $$[$0];
      
break;
case 45:

						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53:

		  				var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 54:
 
				var predicado = new NodoXML("Opc","Opc",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
				predicado.addHijo($$[$0-1]);	
				this.$ = predicado;
		
break;
case 55:

				var opc = new NodoXML("Opc","Opc",_$[$0].first_line+1,_$[$0].first_column+1);									
				this.$ = opc;
		
break;
case 56:

				this.$ = new If($$[$0-5], $$[$0-2], $$[$0] ,_$[$0-7].first_line+1, _$[$0-7].first_column+1);		

break;
case 57:

			this.$ = null;
		
break;
case 58:

			this.$ = $$[$0-2];
		
break;
case 59:

				this.$ = $$[$0];
		
break;
case 60:

				var for_ = new NodoXML("For","For",_$[$0-3].first_line+1,_$[$0-3].first_column+1);								
				for_.addHijo($$[$0-2]);					
				for_.addHijo($$[$0-1]);
				for_.addHijo($$[$0]);
				this.$ = for_;
		
break;
case 61:

				var for_ = new NodoXML("ForExpr","ForExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);								
				var val1 = new NodoXML($$[$0-2],"Variable",_$[$0-4].first_line+1,_$[$0-4].first_column+1);			
				var val2 = new NodoXML($$[$0-1],"IN",_$[$0-4].first_line+1,_$[$0-4].first_column+1);			
				for_.addHijo($$[$0-4]);					
				for_.addHijo(val1);
				for_.addHijo($$[$0]);
				this.$ = for_;
		
break;
case 62:

				var for_ = new NodoXML("ForExpr","ForExpr",_$[$0-6].first_line+1,_$[$0-6].first_column+1);								
				var val1 = new NodoXML($$[$0-4],"Variable",_$[$0-6].first_line+1,_$[$0-6].first_column+1);	
				var val2 = new NodoXML($$[$0-3],"AT",_$[$0-6].first_line+1,_$[$0-6].first_column+1);			
				var val3 = new NodoXML($$[$0-2],"Variable",_$[$0-6].first_line+1,_$[$0-6].first_column+1);					
				var val4 = new NodoXML($$[$0-1],"IN",_$[$0-6].first_line+1,_$[$0-6].first_column+1);	
				for_.addHijo($$[$0-6]);					
				for_.addHijo(val1);
				for_.addHijo(val2);
				for_.addHijo(val3);
				for_.addHijo(val4);
				for_.addHijo($$[$0]);
				this.$ = for_;
		
break;
case 63:

			var for_ = new NodoXML("ForExpr","ForExpr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
				var val1 = new NodoXML($$[$0-2],"Variable",_$[$0-2].first_line+1,_$[$0-2].first_column+1);			
				var val2 = new NodoXML($$[$0-1],"IN",_$[$0-2].first_line+1,_$[$0-2].first_column+1);			
				for_.addHijo($$[$0-2]);					
				for_.addHijo(val1);
				for_.addHijo($$[$0]);
				this.$ = for_;

break;
case 64:

			var for_ = new NodoXML("ForExpr","ForExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);								
				var val1 = new NodoXML($$[$0-4],"Variable",_$[$0-4].first_line+1,_$[$0-4].first_column+1);	
				var val2 = new NodoXML($$[$0-3],"AT",_$[$0-4].first_line+1,_$[$0-4].first_column+1);			
				var val3 = new NodoXML($$[$0-2],"Variable",_$[$0-4].first_line+1,_$[$0-4].first_column+1);					
				var val4 = new NodoXML($$[$0-1],"IN",_$[$0-4].first_line+1,_$[$0-4].first_column+1);									
				for_.addHijo(val1);
				for_.addHijo(val2);
				for_.addHijo(val3);
				for_.addHijo(val4);
				for_.addHijo($$[$0]);
				this.$ = for_;
	   
break;
case 65:

			var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);
				this.$ = for_;
	   
break;
case 66:
var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);												
				this.$ = for_;
break;
case 67:

		var for_ = new NodoXML("Stmnt","Stmnt",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
				for_.addHijo($$[$0-1]);
				for_.addHijo($$[$0]);
				this.$ = for_;

break;
case 68:

							
								var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;
							
break;
case 69:

			var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;

break;
case 70:

							var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;

break;
case 71: case 73:
 
				var for_ = new NodoXML("Stmnt","Stmnt",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
				for_.addHijo($$[$0-1]);
				for_.addHijo($$[$0]);
				this.$ = for_;

break;
case 72:

							var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
							for_.addHijo($$[$0]);				
							this.$ = for_;

break;
case 74:

									var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;
								
							   
break;
case 75:
	var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;

break;
case 76:
 
				var let_ = new NodoXML("Let","Let",_$[$0-3].first_line+1,_$[$0-3].first_column+1);			
				var val1 = new NodoXML($$[$0-2],"Variable",_$[$0-3].first_line+1,_$[$0-3].first_column+1);	
				let_.addHijo(val1);
				let_.addHijo($$[$0]);
				this.$ = let_;

break;
case 77:
 
				var where_ = new NodoXML("Where","Where",_$[$0-1].first_line+1,_$[$0-1].first_column+1);							
				where_.addHijo($$[$0]);
				this.$ = where_;

break;
case 78:
 
				var OrderBy_ = new NodoXML("OrderBy","OrderBy",_$[$0-2].first_line+1,_$[$0-2].first_column+1);							
				OrderBy_.addHijo($$[$0]);
				this.$ = OrderBy_;

break;
case 79:

				var lexp = new NodoXML("LExp","LExp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);							
				lexp.addHijo($$[$0-2]);
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 80:

				var lexp = new NodoXML("LExp","LExp",_$[$0].first_line+1,_$[$0].first_column+1);							
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 81:

				var lexp = new NodoXML("ClauseExpr","ClauseExpr",_$[$0].first_line+1,_$[$0].first_column+1);							
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 82:

				var lexp = new NodoXML("ClauseExpr","ClauseExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);	
				var val1 = new NodoXML($$[$0-2],"TO",_$[$0-4].first_line+1,_$[$0-4].first_column+1);				
				lexp.addHijo($$[$0-3]);
				lexp.addHijo(val1);
				lexp.addHijo($$[$0-1]);
				this.$ = lexp;

break;
case 83:

				var lexp = new NodoXML("ClauseExpr","ClauseExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);				
				lexp.addHijo($$[$0-3]);
				lexp.addHijo($$[$0-1]);
				this.$ = lexp;

break;
case 84: case 85: case 86:

				var lexp = new NodoXML("Return","Return",_$[$0-1].first_line+1,_$[$0-1].first_column+1);				
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 87:

	this.$ = new Function($$[$0-7],$$[$0-6],$$[$0-2],$$[$0-1],_$[$0-11].first_line+1,_$[$0-11].first_column+1);

break;
case 88:

	this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);

break;
case 89:

	this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column);

break;
case 90:
this.$ = $$[$0-1]
break;
case 91:
this.$ = null
break;
case 92:

				$$[$0-6].push(new Variable($$[$0-4], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column));
				this.$ = $$[$0-6];
			
break;
case 93:

					  this.$ = [new Variable($$[$0-4], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column)]
					
break;
case 100: case 109:

             this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 101: case 111:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 102: case 106:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 103: case 107:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 104: case 110:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 105: case 108:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 112:
this.$ = $$[$0]
break;
case 113:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 114:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 115:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 116:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 117:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 118:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 119:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 120:
 this.$ = $$[$0-1] 
break;
case 121:
 this.$ = $$[$0] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,63:$V9,76:$Va,84:$Vb,85:$Vc,107:$Vd,121:12},{1:[3]},{5:[1,27],6:28,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,63:$V9,76:$Va,84:$Vb,85:$Vc},o($Ve,[2,3]),o($Ve,[2,4],{121:29,107:$Vd}),o($Ve,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vg,[2,123]),{47:[1,31],64:30},{7:34,11:33,12:44,14:23,15:$V1,17:$V2,18:$Vh,22:32,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,59:$V8,107:$Vd,114:35,121:12},{47:[1,64]},{18:[1,65]},o($VD,[2,38]),o($VD,[2,39]),o($VD,[2,40]),o($VD,[2,41]),o($VD,[2,42]),o($VD,[2,43]),o($VD,[2,44]),{86:[1,66]},{17:[1,67]},{16:[1,68]},{1:[2,1]},o($Ve,[2,2]),o($Vg,[2,122]),o($VE,[2,66],{65:69,70:71,71:72,10:73,8:74,21:[1,70],63:$V9,76:$Va}),{67:[1,75],69:[1,76]},o($Vf,[2,84],{102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vf,[2,85]),o($Vf,[2,86],{121:29,107:$Vd}),o($VR,[2,112],{33:$VS,115:$VT,116:$VU,117:$VV,118:$VW,119:[1,94],120:$VX}),{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:96,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},o($VY,[2,121]),{12:44,14:23,15:$V1,17:$V2,25:97,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},o($VY,[2,17],{24:$VZ,26:$V_}),o($V$,[2,20]),o($V$,[2,21]),{12:100,14:23,15:$V1,17:$V2,31:101,33:[1,102],40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},o($V$,$V01,{30:104,32:[1,103],57:$V11}),o($V$,$V01,{30:106,57:$V11}),o($V$,$V01,{30:107,57:$V11}),{18:[1,108]},{18:[1,109]},{18:[1,110]},{18:[1,111]},{18:[1,112]},{18:[1,113]},{18:[1,114]},{18:[1,115]},o($V$,$V01,{30:116,57:$V11}),o($V21,[2,45]),o($V21,[2,46]),o($V21,[2,47]),o($V21,[2,48]),o($V21,[2,49]),o($V21,[2,50]),o($V21,[2,51]),o($V21,[2,52]),o($V21,[2,53]),{77:[1,117]},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:118,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{15:[1,120],87:119},{17:[1,123],106:$V31,122:121,123:122,126:$V41,127:$V51},{17:[1,127]},{9:134,66:128,72:129,73:130,74:$V61,75:133,78:[1,131],84:$Vb},{47:[1,135]},o($VE,[2,65],{10:73,8:74,71:136,63:$V9,76:$Va}),o($V71,[2,68]),o($V71,[2,69]),o($V71,[2,70]),{12:44,14:23,15:$V1,17:$V2,18:$V81,22:138,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,68:137,114:35},{47:[1,140]},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:141,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:142,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:143,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:144,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:145,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:146,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:147,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:148,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:149,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:150,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:151,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:152,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:153},{12:44,14:23,15:$V1,17:$V2,18:$Vh,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:154},{12:44,14:23,15:$V1,17:$V2,18:$Vh,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:155},{12:44,14:23,15:$V1,17:$V2,18:$Vh,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:156},{12:44,14:23,15:$V1,17:$V2,18:$Vh,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:157},{12:44,14:23,15:$V1,17:$V2,18:$Vh,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:158},{12:44,14:23,15:$V1,17:$V2,18:$Vh,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:159},{20:$V91,102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},o($VY,[2,16],{24:$VZ,26:$V_}),{24:[1,161]},{12:44,14:23,15:$V1,17:$V2,27:162,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},o($V$,$V01,{30:163,57:$V11}),o($V$,$V01,{30:164,57:$V11}),o($V$,[2,25]),{12:44,14:23,15:$V1,17:$V2,28:165,31:166,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},o($V$,[2,36]),{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:167,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},o($V$,[2,26]),o($V$,[2,27]),{20:[1,168]},{20:[1,169]},{20:[1,170]},{20:[1,171]},{40:[1,172]},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:173,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:174,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:175,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},o($V$,[2,37]),{12:44,14:23,15:$V1,17:$V2,18:$V81,22:138,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,68:176,114:35},{20:[1,177],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},{16:[1,178]},{16:[2,99]},{17:[1,180],106:$V31,123:179,126:$V41,127:$V51},o($Vg,[2,125]),{104:[1,181]},o($Vg,[2,132]),{7:183,17:[1,184],94:$Va1,107:$Vd,121:12,124:182},{17:[1,186]},{18:[1,187]},o($Vf,[2,60]),{9:134,73:188,74:$V61,75:133,84:$Vb},o($Vf,[2,72]),{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:189,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{9:134,75:190,84:$Vb},o($Vf,[2,74]),o($Vf,[2,75]),{67:[1,191],69:[1,192]},o($V71,[2,67]),o($Vb1,[2,63]),o($Vc1,[2,81],{102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:193,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{67:[1,194]},o($Vd1,[2,100],{108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vd1,[2,101],{108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Ve1,[2,102],{102:$VF,103:$VG,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Ve1,[2,103],{102:$VF,103:$VG,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vd1,[2,104],{108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vd1,[2,105],{108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vf1,[2,106],{110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vf1,[2,107],{110:$VN,111:$VO,112:$VP,113:$VQ}),o($VR,[2,108]),o($VR,[2,109]),o($VR,[2,110]),o($VR,[2,111]),o($Vg1,[2,113],{33:$VS,117:$VV,118:$VW}),o($Vg1,[2,114],{33:$VS,117:$VV,118:$VW}),o($VY,[2,115]),o($VY,[2,116]),o($VY,[2,117]),o([5,15,17,20,21,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109,110,111,112,113,119],[2,118],{33:$VS,115:$VT,116:$VU,117:$VV,118:$VW,120:$VX}),o([5,15,17,20,21,40,44,45,46,47,58,59,62,63,74,76,78,83,84,85,95,102,103,104,105,106,107,108,109,110,111,112,113,119,120],[2,119],{33:$VS,115:$VT,116:$VU,117:$VV,118:$VW}),o($VY,[2,120]),{12:44,14:23,15:$V1,17:$V2,27:195,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC},o($V$,[2,19]),o($V$,[2,22]),o($V$,[2,24]),o($V$,[2,23]),o($V$,$V01,{30:104,57:$V11}),{58:[1,196],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},o($V$,[2,28]),o($V$,[2,29]),o($V$,[2,30]),o($V$,[2,31]),{20:[1,197]},{20:[1,198],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},{20:[1,199],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},{21:[1,200],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},o($Vf,[2,76]),{60:[1,201]},{17:[1,202]},o($Vg,[2,124]),{104:[1,203]},{40:[1,204],45:[1,205],58:[1,206]},{127:[1,207]},{107:$Vd,121:29,127:[1,208]},o($Vg,[2,135]),{2:$V0,4:209,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,63:$V9,76:$Va,84:$Vb,85:$Vc,107:$Vd,121:12},{106:[1,210]},{12:44,14:23,15:$V1,17:$V2,18:$Vh,19:211,20:[1,212],22:213,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},o($Vf,[2,71]),o([74,84],[2,77],{102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vf,[2,73]),{12:44,14:23,15:$V1,17:$V2,18:$V81,22:138,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,68:214,114:35},{47:[1,215]},{20:$V91,21:[1,217],83:[1,216],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},{12:44,14:23,15:$V1,17:$V2,18:$V81,22:138,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,68:218,114:35},o($V$,[2,18]),o($V$,[2,54]),o($V$,[2,32]),o($V$,[2,33]),o($V$,[2,34]),{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:219,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{6:222,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,18:$Vh1,40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,61:220,63:$V9,76:$Va,84:$Vb,85:$Vc},{18:[1,224],88:223},{40:[1,225],45:[1,226],58:[1,227]},o($Vi1,[2,129]),o($Vi1,[2,130]),{94:$Va1,124:228},{17:[1,229]},{17:[1,230]},{6:28,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,63:$V9,76:$Va,84:$Vb,85:$Vc,95:[1,231]},o($Vg,[2,136]),{20:[1,232],21:[1,233]},o($VD,[2,13]),o($Vj1,[2,15],{102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vb1,[2,61]),{67:[1,234]},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:235,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:236,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},o($Vb1,[2,64]),{21:[1,237],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},{62:[1,238]},{2:$V0,4:240,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,20:[1,239],40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,63:$V9,76:$Va,84:$Vb,85:$Vc,107:$Vd,121:12},o($Vf,[2,59]),{89:[1,241]},{20:[1,243],47:[1,244],96:242},o($Vi1,[2,126]),o($Vi1,[2,127]),{94:$Va1,124:245},{125:[1,246]},{106:[1,247]},{106:[1,248]},o([125,127],[2,137]),o($VD,[2,12]),{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:249,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{12:44,14:23,15:$V1,17:$V2,18:$V81,22:138,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,68:250,114:35},{20:[1,251],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},{20:[1,252],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},{12:44,14:23,15:$V1,17:$V2,18:$Vh,22:253,23:37,24:$Vi,25:39,27:40,28:41,29:$Vj,31:43,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$V3,41:$Vr,42:$Vs,43:$Vt,44:$V4,45:$V5,46:$V6,47:$V7,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,114:35},{6:222,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,18:$Vh1,40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,61:254,63:$V9,76:$Va,84:$Vb,85:$Vc},o($Vf,[2,57]),{6:28,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,20:[1,255],40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,63:$V9,76:$Va,84:$Vb,85:$Vc},{90:[1,256]},{20:[1,257],21:[1,258]},{89:[2,91]},{89:[1,259]},{125:[1,260]},o($Vi1,[2,131]),o($Vg,[2,133]),o($Vg,[2,134]),o($Vj1,[2,14],{102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($Vb1,[2,62]),o($Vc1,[2,82]),o($Vc1,[2,83]),{20:[1,261],102:$VF,103:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ},o($Vf,[2,56]),o($Vf,[2,58]),{16:[1,262]},{89:[2,90]},{47:[1,263]},{90:[1,264]},o($Vi1,[2,128]),o($V$,[2,35]),{91:265,97:$Vk1,98:$Vl1,99:$Vm1,100:$Vn1,101:$Vo1},{89:[1,271]},{16:[1,272]},{92:273,94:[1,274]},o($Vp1,[2,94]),o($Vp1,[2,95]),o($Vp1,[2,96]),o($Vp1,[2,97]),o($Vp1,[2,98]),{90:[1,275]},{91:276,97:$Vk1,98:$Vl1,99:$Vm1,100:$Vn1,101:$Vo1},{93:[1,277]},{2:$V0,4:278,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,63:$V9,76:$Va,84:$Vb,85:$Vc,95:[1,279],107:$Vd,121:12},{16:[1,280]},o($Vj1,[2,93]),o($Vf,[2,87]),{6:28,8:6,9:7,10:8,11:9,12:10,13:11,14:23,15:$V1,17:$V2,40:$V3,44:$V4,45:$V5,46:$V6,47:$V7,59:$V8,63:$V9,76:$Va,84:$Vb,85:$Vc,95:[1,281]},{93:[2,89]},{91:282,97:$Vk1,98:$Vl1,99:$Vm1,100:$Vn1,101:$Vo1},{93:[2,88]},o($Vj1,[2,92])],
defaultActions: {27:[2,1],120:[2,99],243:[2,91],257:[2,90],279:[2,89],281:[2,88]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let valDeclaration = '';
    let valTag = '';
    let valInside = '';
    const {Error_} = require('../Error');
    const {errores} = require('../Errores');
    const {NodoXML} = require('../Nodes/NodoXml')

    // Expresiones
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Logic, LogicOption} = require('../Expression/Logic');
    const {Literal} = require('../Expression/Literal');
    const {Variable} = require('../Expression/Variable');
    // Instrucciones
    const {If} = require('../Instruction/If');
    const {ForIn} = require('../Instruction/ForIn');
    const {Function} = require('../Instruction/Function');
    const {Call} = require('../Instruction/Call');
    const {Statement} = require('../Instruction/Statement');

    // Extra
    const {Type} = require('../Abstract/Retorno');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comment1"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: 
break;
case 4: this.begin("comment2"); 
break;
case 5: this.popState(); 
break;
case 6: 
break;
case 7: 
break;
case 8: /*se ignoran*/ 
break;
case 9:return 46
break;
case 10:return 44
break;
case 11:return 40
break;
case 12:return 45
break;
case 13:return 24
break;
case 14:return 34
break;
case 15:return 50
break;
case 16:return 52
break;
case 17:return 51
break;
case 18:return 26
break;
case 19:return 29
break;
case 20:return 33
break;
case 21:return 32
break;
case 22:return 77
break;
case 23:return 116
break;
case 24:return 115
break;
case 25:return 21
break;
case 26:return 16
break;
case 27:return 93
break;
case 28:return 127
break;
case 29:return 102
break;
case 30:return 103
break;
case 31:return 107
break;
case 32:return 106
break;
case 33:return 105
break;
case 34:return 104
break;
case 35:return 119
break;
case 36:return 120
break;
case 37:return 118
break;
case 38:return 117
break;
case 39:return 18
break;
case 40:return 20 
break;
case 41:return 57
break;
case 42:return 58
break;
case 43:return 94
break;
case 44:return 95
break;
case 45:return 48
break;
case 46:return 56
break;
case 47:return 49
break;
case 48:return 53
break;
case 49:return 55
break;
case 50:return 54
break;
case 51:return 35
break;
case 52:return 38
break;
case 53:return 37
break;
case 54:return 36
break;
case 55:return 108
break;
case 56:return 109
break;
case 57:return 110
break;
case 58:return 111
break;
case 59:return 112
break;
case 60:return 113
break;
case 61:return 39
break;
case 62:return 63
break;
case 63:return 67
break;
case 64:return 84
break;
case 65:return 69
break;
case 66:return 67
break;
case 67:return 83
break;
case 68:return 76
break;
case 69:return 78
break;
case 70:return 80
break;
case 71:return 81
break;
case 72:return 59
break;
case 73:return 60
break;
case 74:return 62
break;
case 75:return 41
break;
case 76:return 42
break;
case 77:return "SUBSTRING"
break;
case 78:return 85
break;
case 79:return 86
break;
case 80:return 15
break;
case 81:return 89
break;
case 82:return 90
break;
case 83:return 98
break;
case 84:return 97
break;
case 85:return 99
break;
case 86:return 'DATE_'
break;
case 87:return 'TIME_'
break;
case 88:return 'DATETIME_'
break;
case 89:return 100
break;
case 90:return 101
break;
case 91:return 'FLOAT_'
break;
case 92:return 17;
break;
case 93:return 47;
break;
case 94:return 5
break;
}
},
rules: [/^(?:<!--)/,/^(?:-->)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:\(:)/,/^(?::\))/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:[ \t\n\r\f])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:((\/)(\/)?))/,/^(?:((\.)(\.)?))/,/^(?:((ancestor)(-or-self)?))/,/^(?:((following)(-sibling)?))/,/^(?:((preceding)(-sibling)?))/,/^(?:((\|)(\|)?))/,/^(?:@)/,/^(?:\*)/,/^(?:::)/,/^(?::=)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:<\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:descendant\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:return\b)/,/^(?:at\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:data\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:decimal\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:date\b)/,/^(?:time\b)/,/^(?:dateTime\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:(\$)([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:$)/],
conditions: {"comment2":{"rules":[5,6,7],"inclusive":false},"comment1":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xQuery;
exports.Parser = xQuery.Parser;
exports.parse = function () { return xQuery.parse.apply(xQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}