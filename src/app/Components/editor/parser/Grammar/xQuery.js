/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,10],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,11],$V6=[5,55,59,64,66,67,71],$V7=[1,25],$V8=[1,29],$V9=[1,41],$Va=[1,32],$Vb=[1,33],$Vc=[1,23],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,53],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,51],$Vm=[1,52],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,42],$Vr=[1,43],$Vs=[1,44],$Vt=[1,45],$Vu=[1,46],$Vv=[1,47],$Vw=[1,48],$Vx=[1,49],$Vy=[1,50],$Vz=[1,64],$VA=[1,65],$VB=[1,66],$VC=[1,67],$VD=[1,68],$VE=[1,69],$VF=[1,70],$VG=[1,71],$VH=[1,72],$VI=[1,73],$VJ=[1,74],$VK=[1,75],$VL=[5,28,38,54,55,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83],$VM=[2,79],$VN=[1,78],$VO=[1,76],$VP=[1,77],$VQ=[1,79],$VR=[1,80],$VS=[1,81],$VT=[1,82],$VU=[5,24,28,38,54,55,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90],$VV=[5,24,28,38,54,55,58,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90],$VW=[1,86],$VX=[1,85],$VY=[5,14,16,24,28,38,54,55,58,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90],$VZ=[2,48],$V_=[1,92],$V$=[5,14,16,23,24,28,38,53,54,55,58,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90],$V01=[5,14,16,24,28,38,53,54,55,58,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90],$V11=[1,111],$V21=[1,132],$V31=[5,38,55,59,64,66,67,71],$V41=[5,28,38,54,55,59,64,66,67,70,71,72,73,74,75,76,77],$V51=[5,28,38,54,55,59,64,66,67,70,71,74,75],$V61=[5,28,38,54,55,59,64,66,67,70,71,72,73,74,75,76,77,78,79],$V71=[5,28,38,54,55,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,89,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"LExpresiones":4,"EOF":5,"Expresiones":6,"For":7,"Return":8,"Let":9,"Where":10,"OrderBy":11,"If":12,"Exp":13,"DIVSIGN":14,"Lexp":15,"ORSIGN":16,"Syntfin":17,"Fin":18,"@":19,"Valor":20,"Opc":21,"Preservada":22,"::":23,"*":24,"DIR":25,"TEXT":26,"(":27,")":28,"NODE":29,"POSITION":30,"LAST":31,"DOC":32,"STRING":33,"DATA":34,"ExprLogica":35,"UPPERCASE":36,"SUBSTRING":37,",":38,"ID":39,"NUMBER":40,"STRING2":41,"DECIMAL":42,"VARIABLE":43,"CHILD":44,"DESCENDANT":45,"ANCESTOR":46,"PRECEDING":47,"FOLLOWING":48,"NAMESPACE":49,"SELF":50,"PARENT":51,"ATTR":52,"[":53,"]":54,"IF":55,"THEN":56,"Else":57,"ELSE":58,"FOR":59,"LFor":60,"IN":61,"ClauseExpr":62,"AT":63,"LET":64,":=":65,"WHERE":66,"ORDER":67,"BY":68,"LExp":69,"TO":70,"RETURN":71,"<=":72,">=":73,"=":74,"!=":75,">":76,"<":77,"EQ":78,"NE":79,"LT":80,"LE":81,"GT":82,"GE":83,"Expr":84,"+":85,"-":86,"DIV":87,"MOD":88,"OR":89,"AND":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"DIVSIGN",16:"ORSIGN",19:"@",23:"::",24:"*",25:"DIR",26:"TEXT",27:"(",28:")",29:"NODE",30:"POSITION",31:"LAST",32:"DOC",33:"STRING",34:"DATA",36:"UPPERCASE",37:"SUBSTRING",38:",",39:"ID",40:"NUMBER",41:"STRING2",42:"DECIMAL",43:"VARIABLE",44:"CHILD",45:"DESCENDANT",46:"ANCESTOR",47:"PRECEDING",48:"FOLLOWING",49:"NAMESPACE",50:"SELF",51:"PARENT",52:"ATTR",53:"[",54:"]",55:"IF",56:"THEN",58:"ELSE",59:"FOR",61:"IN",63:"AT",64:"LET",65:":=",66:"WHERE",67:"ORDER",68:"BY",70:"TO",71:"RETURN",72:"<=",73:">=",74:"=",75:"!=",76:">",77:"<",78:"EQ",79:"NE",80:"LT",81:"LE",82:"GT",83:"GE",85:"+",86:"-",87:"DIV",88:"MOD",89:"OR",90:"AND"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[13,2],[13,1],[15,4],[15,3],[15,1],[17,1],[17,3],[17,3],[17,3],[17,2],[18,2],[18,2],[18,3],[18,3],[18,3],[18,3],[18,4],[18,4],[18,4],[18,8],[18,2],[18,2],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[21,3],[21,0],[12,7],[57,2],[57,0],[7,2],[60,5],[60,7],[60,3],[60,5],[9,4],[10,2],[11,3],[69,3],[69,1],[62,1],[62,5],[62,5],[8,2],[8,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 67:

             this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 68:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 69:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 70:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 71:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 72:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,55:$V0,59:$V1,64:$V2,66:$V3,67:$V4,71:$V5},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:7,11:8,12:9,55:$V0,59:$V1,64:$V2,66:$V3,67:$V4,71:$V5},o($V6,[2,3]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),o($V6,[2,7]),o($V6,[2,8]),o($V6,[2,9]),{43:[1,19],60:18},{12:21,13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:20,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,55:$V0,84:22},{43:[1,57]},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:58,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{68:[1,59]},{27:[1,60]},{1:[2,1]},o($V6,[2,2]),o($V6,[2,52],{38:[1,61]}),{61:[1,62],63:[1,63]},o($V6,[2,65],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V6,[2,66]),o($VL,$VM,{24:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT}),{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:83},o($VU,[2,88]),{15:84,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy},o($VV,[2,11],{14:$VW,16:$VX}),o($VY,[2,14]),o($VY,[2,15]),{20:87,22:88,24:[1,89],33:$Vh,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy},o($VY,$VZ,{21:91,23:[1,90],53:$V_}),o($VY,$VZ,{21:93,53:$V_}),o($VY,$VZ,{21:94,53:$V_}),{27:[1,95]},{27:[1,96]},{27:[1,97]},{27:[1,98]},{27:[1,99]},{27:[1,100]},{27:[1,101]},{27:[1,102]},o($VY,$VZ,{21:103,53:$V_}),o($V$,[2,38]),o($V$,[2,39]),o($V$,[2,40]),o($V$,[2,41]),o($V$,[2,42]),o($V$,[2,43]),o($V$,[2,44]),o($V$,[2,45]),o($V$,[2,46]),o($V01,[2,32]),o($V01,[2,33]),o($V01,[2,34]),o($V01,[2,35]),o($V01,[2,36]),o($V01,[2,37]),{65:[1,104]},o($V6,[2,58],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{13:106,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,69:105},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:107,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{43:[1,108]},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$V11,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:110,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,62:109,84:22},{43:[1,112]},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:113,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:114,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:115,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:116,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:117,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:118,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:119,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:120,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:121,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:122,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:123,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:124,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:125},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:126},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:127},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:128},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:129},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:130},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:131},{24:$VN,28:$V21,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT},o($VV,[2,10],{14:$VW,16:$VX}),{14:[1,133]},{17:134,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy},o($VY,$VZ,{21:135,53:$V_}),o($VY,$VZ,{21:136,53:$V_}),o($VY,[2,19]),{18:137,20:31,22:138,24:$V9,25:$Va,26:$Vb,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy},o($VY,[2,30]),{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:139,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},o($VY,[2,20]),o($VY,[2,21]),{28:[1,140]},{28:[1,141]},{28:[1,142]},{28:[1,143]},{33:[1,144]},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:145,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:146,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:147,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},o($VY,[2,31]),{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$V11,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:110,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,62:148,84:22},o($V6,[2,59],{38:[1,149]}),o($V31,[2,61]),{28:[1,150],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{61:[1,151],63:[1,152]},o($V31,[2,55]),o($V31,[2,62],{72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:153,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:154},{61:[1,155]},o($V41,[2,67],{78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V41,[2,68],{78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V51,[2,69],{72:$Vz,73:$VA,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V51,[2,70],{72:$Vz,73:$VA,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V41,[2,71],{78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V41,[2,72],{78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V61,[2,73],{80:$VH,81:$VI,82:$VJ,83:$VK}),o($V61,[2,74],{80:$VH,81:$VI,82:$VJ,83:$VK}),o($VL,[2,75]),o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),o($V71,[2,80],{24:$VN,87:$VQ,88:$VR}),o($V71,[2,81],{24:$VN,87:$VQ,88:$VR}),o($VU,[2,82]),o($VU,[2,83]),o($VU,[2,84]),o([5,28,38,54,55,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89],[2,85],{24:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,90:$VT}),o([5,28,38,54,55,59,64,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90],[2,86],{24:$VN,85:$VO,86:$VP,87:$VQ,88:$VR}),o($VU,[2,87]),{17:156,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy},o($VY,[2,13]),o($VY,[2,16]),o($VY,[2,18]),o($VY,[2,17]),o($VY,$VZ,{21:91,53:$V_}),{54:[1,157],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($VY,[2,22]),o($VY,[2,23]),o($VY,[2,24]),o($VY,[2,25]),{28:[1,158]},{28:[1,159],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{28:[1,160],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{38:[1,161],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($V6,[2,57]),{13:162,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy},{56:[1,163]},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$V11,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:110,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,62:164,84:22},{43:[1,165]},{38:[1,167],70:[1,166],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o([38,70,72,73,74,75,76,77,78,79,80,81,82,83],$VM,{24:$VN,28:$V21,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT}),{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$V11,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:110,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,62:168,84:22},o($VY,[2,12]),o($VY,[2,47]),o($VY,[2,26]),o($VY,[2,27]),o($VY,[2,28]),{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:169,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},o($V31,[2,60]),{13:170,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy},o($V31,[2,53]),{61:[1,171]},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:172,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:173,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},o($V31,[2,56]),{38:[1,174],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($V6,[2,51],{57:175,58:[1,176]}),{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$V11,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:110,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,62:177,84:22},{28:[1,178],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{28:[1,179],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{13:24,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,27:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:180,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,84:22},o($V6,[2,49]),{13:181,14:$V7,15:26,17:27,18:28,19:$V8,20:31,22:30,24:$V9,25:$Va,26:$Vb,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,36:$Vj,37:$Vk,39:$Vl,40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy},o($V31,[2,54]),o($V31,[2,63]),o($V31,[2,64]),{28:[1,182],72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($V6,[2,50]),o($VY,[2,29])],
defaultActions: {16:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let valDeclaration = '';
    let valTag = '';
    let valInside = '';
    const {Error_} = require('../Error');
    const {errores} = require('../Errores');
    const {NodoXML} = require('../Nodes/NodoXml')
    // Expresiones

     const {Relational, RelationalOption} = require('../Expression/Relational');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 42
break;
case 2:return 40
break;
case 3:return 33
break;
case 4:return 41
break;
case 5:return 14
break;
case 6:return 25
break;
case 7:return 46
break;
case 8:return 48
break;
case 9:return 47
break;
case 10:return 16
break;
case 11:return 19
break;
case 12:return 24
break;
case 13:return 23
break;
case 14:return 65
break;
case 15:return 86
break;
case 16:return 85
break;
case 17:return 38
break;
case 18:return 72
break;
case 19:return 73
break;
case 20:return 77
break;
case 21:return 76
break;
case 22:return 75
break;
case 23:return 74
break;
case 24:return 89
break;
case 25:return 90
break;
case 26:return 88
break;
case 27:return 87
break;
case 28:return 27
break;
case 29:return 28 
break;
case 30:return 53
break;
case 31:return 54
break;
case 32:return 44
break;
case 33:return 52
break;
case 34:return 45
break;
case 35:return 49
break;
case 36:return 51
break;
case 37:return 50
break;
case 38:return 26
break;
case 39:return 31
break;
case 40:return 30
break;
case 41:return 29
break;
case 42:return 78
break;
case 43:return 79
break;
case 44:return 80
break;
case 45:return 81
break;
case 46:return 82
break;
case 47:return 83
break;
case 48:return 32
break;
case 49:return 59
break;
case 50:return 61
break;
case 51:return 71
break;
case 52:return 63
break;
case 53:return 61
break;
case 54:return 70
break;
case 55:return 64
break;
case 56:return 66
break;
case 57:return 67
break;
case 58:return 68
break;
case 59:return 55
break;
case 60:return 56
break;
case 61:return 58
break;
case 62:return 34
break;
case 63:return 36
break;
case 64:return "SUBSTRING"
break;
case 65:return 39;
break;
case 66:return 43;
break;
case 67:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:((\/)(\/)?))/,/^(?:((\.)(\.)?))/,/^(?:((ancestor)(-or-self)?))/,/^(?:((following)(-sibling)?))/,/^(?:((preceding)(-sibling)?))/,/^(?:((\|)(\|)?))/,/^(?:@)/,/^(?:\*)/,/^(?:::)/,/^(?::=)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:descendant\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:return\b)/,/^(?:at\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:data\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:(\$)([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xQuery;
exports.Parser = xQuery.Parser;
exports.parse = function () { return xQuery.parse.apply(xQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}