/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,23],$V2=[1,15],$V3=[1,17],$V4=[1,16],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,14],$V9=[1,11],$Va=[1,13],$Vb=[1,12],$Vc=[1,22],$Vd=[5,14,16,19,39,43,44,45,46,58,62,75,83,85,95],$Ve=[5,14,16,19,39,43,44,45,46,58,61,62,75,83,85,95],$Vf=[1,33],$Vg=[1,36],$Vh=[1,40],$Vi=[1,52],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,35],$VC=[5,14,16,19,20,23,25,32,39,43,44,45,46,56,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[5,14,16,19,20,39,43,44,45,46,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109,110,111,112,113],$VQ=[1,89],$VR=[1,87],$VS=[1,88],$VT=[1,90],$VU=[1,91],$VV=[1,93],$VW=[5,14,16,19,39,43,44,45,46,58,61,62,75,83,85,95,107,127],$VX=[5,14,16,19,20,32,39,43,44,45,46,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120],$VY=[1,98],$VZ=[1,97],$V_=[5,14,16,19,20,23,25,32,39,43,44,45,46,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120],$V$=[2,54],$V01=[1,104],$V11=[5,14,16,19,20,23,25,31,32,39,43,44,45,46,56,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120],$V21=[62,75,83],$V31=[1,126],$V41=[1,147],$V51=[1,152],$V61=[1,151],$V71=[1,153],$V81=[20,62,75,83],$V91=[5,14,16,19,20,39,43,44,45,46,58,61,62,75,83,85,95],$Va1=[5,14,16,19,20,39,43,44,45,46,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107],$Vb1=[5,14,16,19,20,39,43,44,45,46,57,58,61,62,75,82,83,85,95,104,105],$Vc1=[5,14,16,19,20,39,43,44,45,46,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109],$Vd1=[5,14,16,19,20,39,43,44,45,46,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109,110,111,112,113,115,116,119,120],$Ve1=[1,183],$Vf1=[1,211],$Vg1=[19,20],$Vh1=[16,106,126,127],$Vi1=[1,256],$Vj1=[1,257],$Vk1=[1,258],$Vl1=[1,259],$Vm1=[1,260],$Vn1=[19,20,94];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"LExpresiones":4,"EOF":5,"Instrucciones":6,"For":7,"Return":8,"Let":9,"If":10,"Valor":11,"Function":12,"LlamadaFuncion":13,"LOCAL":14,":":15,"ID":16,"(":17,"LParams":18,")":19,",":20,"ExprLogica":21,"Exp":22,"DIVSIGN":23,"Lexp":24,"ORSIGN":25,"Syntfin":26,"Fin":27,"@":28,"Opc":29,"Preservada":30,"::":31,"*":32,"DIR":33,"TEXT":34,"NODE":35,"POSITION":36,"LAST":37,"DOC":38,"STRING":39,"DATA":40,"UPPERCASE":41,"SUBSTRING":42,"NUMBER":43,"STRING2":44,"DECIMAL":45,"VARIABLE":46,"CHILD":47,"DESCENDANT":48,"ANCESTOR":49,"PRECEDING":50,"FOLLOWING":51,"NAMESPACE":52,"SELF":53,"PARENT":54,"ATTR":55,"[":56,"]":57,"IF":58,"THEN":59,"stmnt":60,"ELSE":61,"FOR":62,"LFor":63,"forstmnt":64,"IN":65,"ClauseExpr":66,"AT":67,"LForExpresiones":68,"For_Let_Opt":69,"LForWhere":70,"Where":71,"LForOrderby":72,"Orderby":73,"LForReturn":74,"LET":75,":=":76,"WHERE":77,"OrderBy":78,"ORDER":79,"BY":80,"LExp":81,"TO":82,"RETURN":83,"HTML":84,"DECLARE":85,"FUNCTION":86,"Prefix":87,"Parameter":88,"AS":89,"XS":90,"TipoVar":91,"prod_statement":92,";":93,"tk_llavea":94,"tk_llavec":95,"LVariables":96,"INTEGER_":97,"DECIMAL_":98,"STRING_":99,"BOOLEAN_":100,"DOUBLE_":101,"<=":102,">=":103,"=":104,"!=":105,">":106,"<":107,"EQ":108,"NE":109,"LT":110,"LE":111,"GT":112,"GE":113,"Expr":114,"+":115,"-":116,"DIV":117,"MOD":118,"OR":119,"AND":120,"HTMLSTRING":121,"ATRIBUTOS":122,"SUFIX":123,"XQUERY":124,"[\\":125,"/>":126,"</":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"LOCAL",15:":",16:"ID",17:"(",19:")",20:",",23:"DIVSIGN",25:"ORSIGN",28:"@",31:"::",32:"*",33:"DIR",34:"TEXT",35:"NODE",36:"POSITION",37:"LAST",38:"DOC",39:"STRING",40:"DATA",41:"UPPERCASE",42:"SUBSTRING",43:"NUMBER",44:"STRING2",45:"DECIMAL",46:"VARIABLE",47:"CHILD",48:"DESCENDANT",49:"ANCESTOR",50:"PRECEDING",51:"FOLLOWING",52:"NAMESPACE",53:"SELF",54:"PARENT",55:"ATTR",56:"[",57:"]",58:"IF",59:"THEN",61:"ELSE",62:"FOR",65:"IN",67:"AT",73:"Orderby",75:"LET",76:":=",77:"WHERE",79:"ORDER",80:"BY",82:"TO",83:"RETURN",85:"DECLARE",86:"FUNCTION",89:"AS",90:"XS",93:";",94:"tk_llavea",95:"tk_llavec",97:"INTEGER_",98:"DECIMAL_",99:"STRING_",100:"BOOLEAN_",101:"DOUBLE_",102:"<=",103:">=",104:"=",105:"!=",106:">",107:"<",108:"EQ",109:"NE",110:"LT",111:"LE",112:"GT",113:"GE",115:"+",116:"-",117:"DIV",118:"MOD",119:"OR",120:"AND",125:"[\\",126:"/>",127:"</"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[13,6],[13,5],[18,3],[18,1],[22,2],[22,1],[24,4],[24,3],[24,1],[26,1],[26,3],[26,3],[26,3],[26,2],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,4],[27,4],[27,4],[27,8],[27,2],[27,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[29,3],[29,0],[10,8],[60,2],[60,3],[60,1],[7,4],[63,5],[63,7],[63,3],[63,5],[64,1],[64,0],[68,2],[68,1],[69,1],[69,1],[70,2],[70,1],[72,2],[72,1],[74,1],[9,4],[71,2],[78,3],[81,3],[81,1],[66,1],[66,5],[66,5],[8,2],[8,2],[8,2],[12,12],[92,3],[92,2],[88,3],[88,2],[96,7],[96,5],[91,1],[91,1],[91,1],[91,1],[91,1],[87,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,1],[84,2],[84,1],[121,4],[121,3],[122,4],[122,4],[122,6],[122,3],[122,3],[122,5],[123,1],[123,5],[123,5],[123,2],[123,3],[124,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

							$$[$0-1].push($$[$0]);
							this.$ = $$[$0-1];
						
break;
case 3: case 14:
 this.$ = [$$[$0]]; 
break;
case 4:
        
							errores.push(new Error_(_$[$0].first_line, _$[$0].first_column, 'Sintactico','Valor inesperado ' + yytext));
							return "error";
						
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 15: case 16: case 20: case 43: case 58: case 80:
 this.$ = $$[$0]; 
break;
case 11:
					
								this.$ = new Call($$[$0-3],$$[$0-1],_$[$0-5].first_line+1,_$[$0-5].first_column+1);
							
break;
case 12:
					
								this.$ = new Call($$[$0-2],null,_$[$0-4].first_line+1,_$[$0-4].first_column+1);
							
break;
case 13:
	
					$$[$0-2].push($$[$0]);
					this.$ = $$[$0-2];
				
break;
case 17:

			this.$ = [$$[$0-3]]
			this.$.push($$[$0])
		
break;
case 18:
						
			$$[$0-2].push($$[$0]);
			this.$ = $$[$0-2];
		
break;
case 19:
 this.$ = [$$[$0]] 
break;
case 21:

												var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
												var val1 = new NodoXML($$[$0-2],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
												syntfin.addHijo(val1);
												syntfin.addHijo($$[$0-1]);			
												syntfin.addHijo($$[$0]);										
												this.$ = syntfin;
												//ejecutar(signo,izq,der)
											
break;
case 22:

															var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
															var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);													
															syntfin.addHijo($$[$0-2]);			
															syntfin.addHijo(val1);
															syntfin.addHijo($$[$0]);										
															this.$ = syntfin;
																//ejecutar(signo,izq,der)
														
break;
case 23:

															var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
															var val1 = new NodoXML($$[$0-2],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
															syntfin.addHijo(val1);
															syntfin.addHijo($$[$0-1]);			
															syntfin.addHijo($$[$0]);										
															this.$ = syntfin;
																//ejecutar(signo,izq,der)
														
break;
case 24:

									var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
									var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
									var val2 = new NodoXML($$[$0],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
									syntfin.addHijo(val1);
									syntfin.addHijo(val2);					
									this.$ = syntfin;
										//ejecutar(signo,izq,der)
								
break;
case 25:
 
			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			fin.addHijo($$[$0-1]);
			fin.addHijo($$[$0]);
			this.$ = new Fin(fin,_$[$0-1].first_line+1,_$[$0-1].first_column+1);
 		
break;
case 26:
 
								var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
								var val1 = new NodoXML($$[$0-1],"DIR",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
								fin.addHijo(val1);		
								fin.addHijo($$[$0]);					
								this.$ = new Fin(fin,_$[$0-1].first_line+1,_$[$0-1].first_column+1);
							
break;
case 27:

											var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
											var val1 = new NodoXML($$[$0-2],"TEXT",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
											fin.addHijo(val1);									
											this.$ = new Fin(fin,_$[$0-2].first_line+1,_$[$0-2].first_column+1);
										
break;
case 28:
		
											var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
											var val1 = new NodoXML($$[$0-2],"NODE",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
											fin.addHijo(val1);									
											this.$ = new Fin(fin,_$[$0-2].first_line+1,_$[$0-2].first_column+1);
										
break;
case 29:

													var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
													var val1 = new NodoXML($$[$0-2],"POSITION",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
													fin.addHijo(val1);									
													this.$ = new Fin(fin,_$[$0-2].first_line+1,_$[$0-2].first_column+1);
												
break;
case 30:

											var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
											var val1 = new NodoXML($$[$0-2],"LAST",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
											fin.addHijo(val1);									
											this.$ = new Fin(fin,_$[$0-2].first_line+1,_$[$0-2].first_column+1);
										
break;
case 31:
	
														var fin = new NodoXML("Fin","Fin",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
														var val1 = new NodoXML($$[$0-3],"DOC",_$[$0-3].first_line+1,_$[$0-3].first_column+1);								
														var val2 = new NodoXML($$[$0-1],"STRING",_$[$0-3].first_line+1,_$[$0-3].first_column+1);								
														fin.addHijo(val1);	
														fin.addHijo(val2);				
														this.$ = new Fin(fin,_$[$0-3].first_line+1,_$[$0-3].first_column+1);
													
break;
case 32:

																var fin = new NodoXML("Fin","Fin",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
																var val1 = new NodoXML($$[$0-3],"DATA",_$[$0-3].first_line+1,_$[$0-3].first_column+1);																
																fin.addHijo(val1);	
																fin.addHijo($$[$0-1]);				
																this.$ = new Fin(fin,_$[$0-3].first_line+1,_$[$0-3].first_column+1);
															
break;
case 33:

																		var fin = new NodoXML("Fin","Fin",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
																		var val1 = new NodoXML($$[$0-3],"UPPERCASE",_$[$0-3].first_line+1,_$[$0-3].first_column+1);																
																		fin.addHijo(val1);	
																		fin.addHijo($$[$0-1]);				
																		this.$ = new Fin(fin,_$[$0-3].first_line+1,_$[$0-3].first_column+1);
																	
break;
case 34:

																																		var fin = new NodoXML("Fin","Fin",_$[$0-7].first_line+1,_$[$0-7].first_column+1);
																																		var val1 = new NodoXML($$[$0-7],"SUBSTRING",_$[$0-7].first_line+1,_$[$0-7].first_column+1);																
																																		fin.addHijo(val1);	
																																		fin.addHijo($$[$0-5]);	
																																		fin.addHijo($$[$0-3]);	
																																		fin.addHijo($$[$0-1]);	
																																		this.$ = new Fin(fin,_$[$0-7].first_line+1,_$[$0-7].first_column+1);
																																	
break;
case 35:

												var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);			
												fin.addHijo($$[$0-1]);
												fin.addHijo($$[$0]);												
												this.$ = new Fin(fin,_$[$0-1].first_line+1,_$[$0-1].first_column+1);
											
break;
case 36:

								var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
								var val1 = new NodoXML($$[$0-1],"*",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
								fin.addHijo(val1);	
								fin.addHijo($$[$0]);				
								this.$ = new Fin(fin,_$[$0-1].first_line+1,_$[$0-1].first_column+1);
							
break;
case 37:
 
			var val = new NodoXML($$[$0],"Valor",_$[$0].first_line+1,_$[$0].first_column+1);				
			this.$ = val;
		
break;
case 38:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.NUMBER); 
break;
case 39: case 40:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.STRING); 
break;
case 41:
 this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.FLOAT); 
break;
case 42:
 
		  var val = new NodoXML($$[$0],"Access",_$[$0].first_line+1,_$[$0].first_column+1);				
		  this.$ = val;
	   
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 52:
 this.$ = new NodoXML($$[$0],"Preservada",_$[$0].first_line+1,_$[$0].first_column+1); 
break;
case 51:
 this.$ = new NodoXML($$[$0],"Preservada",_$[$0].first_line+1,_$[$0].first_column+1);	
break;
case 53:
 
			var opc = new NodoXML("Opc","Opc",_$[$0-2].first_line+1,_$[$0-2].first_column+1);				
			opc.addHijo($$[$0-2]);				
			this.$ = opc;
		
break;
case 54:
 
			var opc = new NodoXML("Opc","Opc",_$[$0].first_line+1,_$[$0].first_column+1);									
			this.$ = opc;
		
break;
case 55:
 
			this.$ = new If($$[$0-5], $$[$0-2], $$[$0] ,_$[$0-7].first_line+1, _$[$0-7].first_column+1); 
		
break;
case 56:
 this.$ = null; 
break;
case 57:
 this.$ = $$[$0-2]; 
break;
case 59:

	this.$ = new ForIn($$[$0-2], $$[$0-1], $$[$0], _$[$0-3].first_line+1,_$[$0-3].first_column+1);

break;
case 60:

		$$[$0-4].push( new ForAssign($$[$0-2], null, $$[$0], _$[$0-4].first_line+1, _$[$0-4].first_column+1) )
		this.$ = $$[$0-4];
	
break;
case 61:

		$$[$0-6].push( new ForAssign($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line+1, _$[$0-6].first_column+1) )
		this.$ = $$[$0-6];
	
break;
case 62:

		this.$ = [new ForAssign($$[$0-2], null, $$[$0], _$[$0-2].first_line+1, _$[$0-2].first_column+1)]
	
break;
case 63:

		this.$ = [new ForAssign($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line+1, _$[$0-4].first_column+1)]
	
break;
case 64: case 68: case 69:

		this.$ = $$[$0]
	
break;
case 65:

		this.$ = null
	
break;
case 66:

		$$[$0-1].push($$[$0]);
		this.$ = $$[$0-1]
	
break;
case 67:

		this.$ = [$$[$0]]
	
break;
case 70:
 
		this.$ = $$[$0-1];
	
break;
case 71:

		this.$ = $$[$0];

break;
case 72:
 

	
break;
case 73:

		var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
		for_.addHijo($$[$0]);				
		this.$ = for_;
								
	
break;
case 74:
	
	this.$ = $$[$0]

break;
case 75:
 
				this.$ = new Let($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
			
break;
case 76:
 
				var where_ = new NodoXML("Where","Where",_$[$0-1].first_line+1,_$[$0-1].first_column+1);							
				where_.addHijo($$[$0]);
				this.$ = where_;

break;
case 77:
 
				var OrderBy_ = new NodoXML("OrderBy","OrderBy",_$[$0-2].first_line+1,_$[$0-2].first_column+1);							
				OrderBy_.addHijo($$[$0]);
				this.$ = OrderBy_;

break;
case 78:

				var lexp = new NodoXML("LExp","LExp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);							
				lexp.addHijo($$[$0-2]);
				lexp.addHijo($$[$0]);
				this.$ = lexp;
			
break;
case 79:

				var lexp = new NodoXML("LExp","LExp",_$[$0].first_line+1,_$[$0].first_column+1);							
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 81:

						var lexp = new NodoXML("ClauseExpr","ClauseExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);	
						var val1 = new NodoXML($$[$0-2],"TO",_$[$0-4].first_line+1,_$[$0-4].first_column+1);				
						lexp.addHijo($$[$0-3]);
						lexp.addHijo(val1);
						lexp.addHijo($$[$0-1]);
						this.$ = lexp;
					
break;
case 82:
 
						var lexp = new NodoXML("ClauseExpr","ClauseExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);	
						var val1 = new NodoXML($$[$0-2],",",_$[$0-4].first_line+1,_$[$0-4].first_column+1);				
						lexp.addHijo($$[$0-3]);
						lexp.addHijo(val1);
						lexp.addHijo($$[$0-1]);
						this.$ = lexp; 
					
break;
case 83: case 84: case 85:

			this.$ = new Return($$[$0],_$[$0-1].first_line+1,_$[$0-1].first_column+1)
		
break;
case 86:

	this.$ = new Function($$[$0-7],$$[$0-6],$$[$0-2],$$[$0-1],_$[$0-11].first_line+1,_$[$0-11].first_column+1);

break;
case 87:

	this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);

break;
case 88:

	this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column);

break;
case 89:
this.$ = $$[$0-1]
break;
case 90:
this.$ = null
break;
case 91:

				$$[$0-6].push(new Variable($$[$0-4], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column));
				this.$ = $$[$0-6];
			
break;
case 92:

					  this.$ = [new Variable($$[$0-4], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column)]
					
break;
case 99: case 108:

             this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 100: case 110:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 101: case 105:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 102: case 106:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 103: case 109:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 104: case 107:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 111: case 120:
 this.$ = $$[$0] 
break;
case 112:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    	
break;
case 113:

				this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    	
break;
case 114:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    	
break;
case 115:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    	
break;
case 116:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    	
break;
case 117:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    	
break;
case 118:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    	
break;
case 119:
 this.$ = $$[$0-1] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,62:$V9,75:$Va,83:$Vb,85:$Vc},{1:[3]},{5:[1,24],6:25,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,62:$V9,75:$Va,83:$Vb,85:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),{46:[1,27],63:26},{10:29,11:42,13:21,14:$V1,16:$V2,17:$Vf,21:28,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,58:$V8,84:30,107:$VB,114:31,121:32},{46:[1,62]},{17:[1,63]},o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),o($VC,[2,40]),o($VC,[2,41]),o($VC,[2,42]),o($VC,[2,43]),{86:[1,64]},{15:[1,65]},{1:[2,1]},o($Vd,[2,2]),{7:71,9:70,20:[1,67],62:$V9,64:66,68:68,69:69,75:$Va,83:[2,65]},{65:[1,72],67:[1,73]},o($Ve,[2,83],{102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($Ve,[2,84]),o($Ve,[2,85],{121:86,107:$VB}),o($VP,[2,111],{32:$VQ,115:$VR,116:$VS,117:$VT,118:$VU,119:[1,92],120:$VV}),o($VW,[2,122]),{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:94,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},o($VX,[2,120]),{16:[1,95]},{11:42,13:21,14:$V1,16:$V2,24:96,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($VX,[2,16],{23:$VY,25:$VZ}),o($V_,[2,19]),o($V_,[2,20]),{11:99,13:21,14:$V1,16:$V2,30:100,32:[1,101],39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($V_,$V$,{29:103,31:[1,102],56:$V01}),o($V_,$V$,{29:105,56:$V01}),o($V_,$V$,{29:106,56:$V01}),{17:[1,107]},{17:[1,108]},{17:[1,109]},{17:[1,110]},{17:[1,111]},{17:[1,112]},{17:[1,113]},{17:[1,114]},o($V_,$V$,{29:115,56:$V01}),o($V11,[2,44]),o($V11,[2,45]),o($V11,[2,46]),o($V11,[2,47]),o($V11,[2,48]),o($V11,[2,49]),o($V11,[2,50]),o($V11,[2,51]),o($V11,[2,52]),{76:[1,116]},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:117,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{14:[1,119],87:118},{16:[1,120]},{8:121,83:$Vb},{46:[1,122]},{7:71,9:70,62:$V9,69:123,75:$Va,83:[2,64]},o($V21,[2,67]),o($V21,[2,68]),o($V21,[2,69]),{11:42,13:21,14:$V1,16:$V2,17:$V31,21:125,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,66:124,114:31},{46:[1,127]},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:128,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:129,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:130,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:131,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:132,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:133,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:134,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:135,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:136,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:137,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:138,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:139,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},o($VW,[2,121]),{11:42,13:21,14:$V1,16:$V2,17:$Vf,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:140},{11:42,13:21,14:$V1,16:$V2,17:$Vf,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:141},{11:42,13:21,14:$V1,16:$V2,17:$Vf,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:142},{11:42,13:21,14:$V1,16:$V2,17:$Vf,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:143},{11:42,13:21,14:$V1,16:$V2,17:$Vf,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:144},{11:42,13:21,14:$V1,16:$V2,17:$Vf,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:145},{11:42,13:21,14:$V1,16:$V2,17:$Vf,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:146},{19:$V41,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},{16:[1,150],106:$V51,122:148,123:149,126:$V61,127:$V71},o($VX,[2,15],{23:$VY,25:$VZ}),{23:[1,154]},{11:42,13:21,14:$V1,16:$V2,26:155,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($V_,$V$,{29:156,56:$V01}),o($V_,$V$,{29:157,56:$V01}),o($V_,[2,24]),{11:42,13:21,14:$V1,16:$V2,27:158,30:159,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($V_,[2,35]),{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:160,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},o($V_,[2,25]),o($V_,[2,26]),{19:[1,161]},{19:[1,162]},{19:[1,163]},{19:[1,164]},{39:[1,165]},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:166,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:167,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:168,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},o($V_,[2,36]),{11:42,13:21,14:$V1,16:$V2,17:$V31,21:125,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,66:169,114:31},{19:[1,170],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},{15:[1,171]},{15:[2,98]},{17:[1,172]},o($Ve,[2,59]),{65:[1,173],67:[1,174]},o($V21,[2,66]),o($V81,[2,62]),o($V91,[2,80],{102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:175,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{65:[1,176]},o($Va1,[2,99],{108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($Va1,[2,100],{108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($Vb1,[2,101],{102:$VD,103:$VE,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($Vb1,[2,102],{102:$VD,103:$VE,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($Va1,[2,103],{108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($Va1,[2,104],{108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($Vc1,[2,105],{110:$VL,111:$VM,112:$VN,113:$VO}),o($Vc1,[2,106],{110:$VL,111:$VM,112:$VN,113:$VO}),o($VP,[2,107]),o($VP,[2,108]),o($VP,[2,109]),o($VP,[2,110]),o($Vd1,[2,112],{32:$VQ,117:$VT,118:$VU}),o($Vd1,[2,113],{32:$VQ,117:$VT,118:$VU}),o($VX,[2,114]),o($VX,[2,115]),o($VX,[2,116]),o([5,14,16,19,20,39,43,44,45,46,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109,110,111,112,113,119],[2,117],{32:$VQ,115:$VR,116:$VS,117:$VT,118:$VU,120:$VV}),o([5,14,16,19,20,39,43,44,45,46,57,58,61,62,75,82,83,85,95,102,103,104,105,106,107,108,109,110,111,112,113,119,120],[2,118],{32:$VQ,115:$VR,116:$VS,117:$VT,118:$VU}),o($VX,[2,119]),{16:[1,178],106:$V51,123:177,126:$V61,127:$V71},o($VW,[2,124]),{104:[1,179]},o($VW,[2,131]),{16:[1,182],84:181,94:$Ve1,107:$VB,121:32,124:180},{16:[1,184]},{11:42,13:21,14:$V1,16:$V2,26:185,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($V_,[2,18]),o($V_,[2,21]),o($V_,[2,23]),o($V_,[2,22]),o($V_,$V$,{29:103,56:$V01}),{57:[1,186],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},o($V_,[2,27]),o($V_,[2,28]),o($V_,[2,29]),o($V_,[2,30]),{19:[1,187]},{19:[1,188],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},{19:[1,189],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},{20:[1,190],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},o($Ve,[2,75]),{59:[1,191]},{16:[1,192]},{11:42,13:21,14:$V1,16:$V2,17:$Vf,18:193,19:[1,194],21:195,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$V31,21:125,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,66:196,114:31},{46:[1,197]},{19:$V41,20:[1,199],82:[1,198],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},{11:42,13:21,14:$V1,16:$V2,17:$V31,21:125,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,66:200,114:31},o($VW,[2,123]),{104:[1,201]},{39:[1,202],44:[1,203],57:[1,204]},{127:[1,205]},{107:$VB,121:86,127:[1,206]},o($VW,[2,134]),{2:$V0,4:207,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,62:$V9,75:$Va,83:$Vb,85:$Vc},{106:[1,208]},o($V_,[2,17]),o($V_,[2,53]),o($V_,[2,31]),o($V_,[2,32]),o($V_,[2,33]),{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:209,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{6:212,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,17:$Vf1,39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,60:210,62:$V9,75:$Va,83:$Vb,85:$Vc},{17:[1,214],88:213},{19:[1,215],20:[1,216]},o($VC,[2,12]),o($Vg1,[2,14],{102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($V81,[2,60]),{65:[1,217]},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:218,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:219,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},o($V81,[2,63]),{39:[1,220],44:[1,221],57:[1,222]},o($Vh1,[2,128]),o($Vh1,[2,129]),{94:$Ve1,124:223},{16:[1,224]},{16:[1,225]},{6:25,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,62:$V9,75:$Va,83:$Vb,85:$Vc,95:[1,226]},o($VW,[2,135]),{20:[1,227],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},{61:[1,228]},{2:$V0,4:230,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,19:[1,229],39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,62:$V9,75:$Va,83:$Vb,85:$Vc},o($Ve,[2,58]),{89:[1,231]},{19:[1,233],46:[1,234],96:232},o($VC,[2,11]),{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:235,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{11:42,13:21,14:$V1,16:$V2,17:$V31,21:125,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,66:236,114:31},{19:[1,237],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},{19:[1,238],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},o($Vh1,[2,125]),o($Vh1,[2,126]),{94:$Ve1,124:239},{125:[1,240]},{106:[1,241]},{106:[1,242]},o([125,127],[2,136]),{11:42,13:21,14:$V1,16:$V2,17:$Vf,21:243,22:34,23:$Vg,24:37,26:38,27:39,28:$Vh,30:41,32:$Vi,33:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$V3,40:$Vp,41:$Vq,42:$Vr,43:$V4,44:$V5,45:$V6,46:$V7,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,114:31},{6:212,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,17:$Vf1,39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,60:244,62:$V9,75:$Va,83:$Vb,85:$Vc},o($Ve,[2,56]),{6:25,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,19:[1,245],39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,62:$V9,75:$Va,83:$Vb,85:$Vc},{90:[1,246]},{19:[1,247],20:[1,248]},{89:[2,90]},{89:[1,249]},o($Vg1,[2,13],{102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO}),o($V81,[2,61]),o($V91,[2,81]),o($V91,[2,82]),{125:[1,250]},o($Vh1,[2,130]),o($VW,[2,132]),o($VW,[2,133]),{19:[1,251],102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO},o($Ve,[2,55]),o($Ve,[2,57]),{15:[1,252]},{89:[2,89]},{46:[1,253]},{90:[1,254]},o($Vh1,[2,127]),o($V_,[2,34]),{91:255,97:$Vi1,98:$Vj1,99:$Vk1,100:$Vl1,101:$Vm1},{89:[1,261]},{15:[1,262]},{92:263,94:[1,264]},o($Vn1,[2,93]),o($Vn1,[2,94]),o($Vn1,[2,95]),o($Vn1,[2,96]),o($Vn1,[2,97]),{90:[1,265]},{91:266,97:$Vi1,98:$Vj1,99:$Vk1,100:$Vl1,101:$Vm1},{93:[1,267]},{2:$V0,4:268,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,62:$V9,75:$Va,83:$Vb,85:$Vc,95:[1,269]},{15:[1,270]},o($Vg1,[2,92]),o($Ve,[2,86]),{6:25,7:5,8:6,9:7,10:8,11:9,12:10,13:21,14:$V1,16:$V2,39:$V3,43:$V4,44:$V5,45:$V6,46:$V7,58:$V8,62:$V9,75:$Va,83:$Vb,85:$Vc,95:[1,271]},{93:[2,88]},{91:272,97:$Vi1,98:$Vj1,99:$Vk1,100:$Vl1,101:$Vm1},{93:[2,87]},o($Vg1,[2,91])],
defaultActions: {24:[2,1],119:[2,98],233:[2,90],247:[2,89],269:[2,88],271:[2,87]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let valDeclaration = '';
    let valTag = '';
    let valInside = '';
    const {Error_} = require('../Error');
    const {errores} = require('../Errores');
    const {NodoXML} = require('../Nodes/NodoXml')

    // Expresiones
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Logic, LogicOption} = require('../Expression/Logic');
    const {Literal} = require('../Expression/Literal');
    const {Access} = require('../Expression/Access');
    const {Variable} = require('../Expression/Variable');
    // Instrucciones
    const {If} = require('../Instruction/If');
    const {ForIn} = require('../Instruction/ForIn');
    const {ForAssign} = require('../Instruction/ForAssign');
    const {Function} = require('../Instruction/Function');
    const {Call} = require('../Instruction/Call');
    const {Statement} = require('../Instruction/Statement');
    const {Return} = require('../Instruction/Return');
		const {Let} = require('../Instruction/Let');
		const {Fin} = require('../Instruction/Fin');
		const {Lexp} = require('../Instruction/Lexp');

    // Extra
    const {Type} = require('../Abstract/Retorno');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comment1"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: 
break;
case 4: this.begin("comment2"); 
break;
case 5: this.popState(); 
break;
case 6: 
break;
case 7: 
break;
case 8: /*se ignoran*/ 
break;
case 9:return 45
break;
case 10:return 43
break;
case 11:return 39
break;
case 12:return 44
break;
case 13:return 23
break;
case 14:return 33
break;
case 15:return 49
break;
case 16:return 51
break;
case 17:return 50
break;
case 18:return 25
break;
case 19:return 28
break;
case 20:return 32
break;
case 21:return 31
break;
case 22:return 76
break;
case 23:return 116
break;
case 24:return 115
break;
case 25:return 20
break;
case 26:return 15
break;
case 27:return 93
break;
case 28:return 127
break;
case 29:return 102
break;
case 30:return 103
break;
case 31:return 107
break;
case 32:return 106
break;
case 33:return 105
break;
case 34:return 104
break;
case 35:return 119
break;
case 36:return 120
break;
case 37:return 118
break;
case 38:return 117
break;
case 39:return 17
break;
case 40:return 19 
break;
case 41:return 56
break;
case 42:return 57
break;
case 43:return 94
break;
case 44:return 95
break;
case 45:return 47
break;
case 46:return 55
break;
case 47:return 48
break;
case 48:return 52
break;
case 49:return 54
break;
case 50:return 53
break;
case 51:return 34
break;
case 52:return 37
break;
case 53:return 36
break;
case 54:return 35
break;
case 55:return 108
break;
case 56:return 109
break;
case 57:return 110
break;
case 58:return 111
break;
case 59:return 112
break;
case 60:return 113
break;
case 61:return 38
break;
case 62:return 62
break;
case 63:return 65
break;
case 64:return 83
break;
case 65:return 67
break;
case 66:return 65
break;
case 67:return 82
break;
case 68:return 75
break;
case 69:return 77
break;
case 70:return 79
break;
case 71:return 80
break;
case 72:return 58
break;
case 73:return 59
break;
case 74:return 61
break;
case 75:return 40
break;
case 76:return 41
break;
case 77:return "SUBSTRING"
break;
case 78:return 85
break;
case 79:return 86
break;
case 80:return 14
break;
case 81:return 89
break;
case 82:return 90
break;
case 83:return 98
break;
case 84:return 97
break;
case 85:return 99
break;
case 86:return 'DATE_'
break;
case 87:return 'TIME_'
break;
case 88:return 'DATETIME_'
break;
case 89:return 100
break;
case 90:return 101
break;
case 91:return 'FLOAT_'
break;
case 92:return 16;
break;
case 93:return 46;
break;
case 94:return 5
break;
}
},
rules: [/^(?:<!--)/,/^(?:-->)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:\(:)/,/^(?::\))/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:[ \t\n\r\f])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:((\/)(\/)?))/,/^(?:((\.)(\.)?))/,/^(?:((ancestor)(-or-self)?))/,/^(?:((following)(-sibling)?))/,/^(?:((preceding)(-sibling)?))/,/^(?:((\|)(\|)?))/,/^(?:@)/,/^(?:\*)/,/^(?:::)/,/^(?::=)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:<\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:descendant\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:return\b)/,/^(?:at\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:data\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:decimal\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:date\b)/,/^(?:time\b)/,/^(?:dateTime\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:(\$)([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:$)/],
conditions: {"comment2":{"rules":[5,6,7],"inclusive":false},"comment1":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xQuery;
exports.Parser = xQuery.Parser;
exports.parse = function () { return xQuery.parse.apply(xQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}