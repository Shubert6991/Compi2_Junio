/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,19],$V2=[1,17],$V3=[1,18],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,16],$V8=[1,13],$V9=[1,15],$Va=[1,14],$Vb=[1,23],$Vc=[1,24],$Vd=[5,28,33,39,40,41,42,43,55,59,72,80,81,90],$Ve=[5,28,33,39,40,41,42,43,55,58,59,70,72,74,80,81,90],$Vf=[5,28,33,39,40,41,42,43,55,58,59,70,72,74,80,81,90,104,124],$Vg=[1,36],$Vh=[1,40],$Vi=[1,52],$Vj=[1,43],$Vk=[1,44],$Vl=[1,34],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,51],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,61],$VC=[5,15,17,24,28,33,38,39,40,41,42,43,53,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[1,79],$VK=[1,80],$VL=[1,81],$VM=[1,82],$VN=[1,83],$VO=[1,84],$VP=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110],$VQ=[1,87],$VR=[1,85],$VS=[1,86],$VT=[1,88],$VU=[1,89],$VV=[1,91],$VW=[5,24,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117],$VX=[1,95],$VY=[1,94],$VZ=[5,15,17,24,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117],$V_=[2,50],$V$=[1,101],$V01=[5,15,17,23,24,28,33,38,39,40,41,42,43,53,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117],$V11=[1,121],$V21=[1,120],$V31=[1,122],$V41=[1,128],$V51=[59,70,72,74,80],$V61=[1,134],$V71=[1,155],$V81=[1,180],$V91=[38,59,72],$Va1=[5,28,33,38,39,40,41,42,43,55,58,59,70,72,74,80,81,90],$Vb1=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104],$Vc1=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,101,102],$Vd1=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106],$Ve1=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110,112,113,116,117],$Vf1=[1,212],$Vg1=[39,103,123,124],$Vh1=[1,254],$Vi1=[1,255],$Vj1=[1,256],$Vk1=[1,257],$Vl1=[1,258],$Vm1=[28,38,89],$Vn1=[28,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"LExpresiones":4,"EOF":5,"Instrucciones":6,"HTML":7,"For":8,"Return":9,"Let":10,"If":11,"Valor":12,"Function":13,"Exp":14,"DIVSIGN":15,"Lexp":16,"ORSIGN":17,"Syntfin":18,"Fin":19,"@":20,"Opc":21,"Preservada":22,"::":23,"*":24,"DIR":25,"TEXT":26,"(":27,")":28,"NODE":29,"POSITION":30,"LAST":31,"DOC":32,"STRING":33,"DATA":34,"ExprLogica":35,"UPPERCASE":36,"SUBSTRING":37,",":38,"ID":39,"NUMBER":40,"STRING2":41,"DECIMAL":42,"VARIABLE":43,"CHILD":44,"DESCENDANT":45,"ANCESTOR":46,"PRECEDING":47,"FOLLOWING":48,"NAMESPACE":49,"SELF":50,"PARENT":51,"ATTR":52,"[":53,"]":54,"IF":55,"THEN":56,"stmnt":57,"ELSE":58,"FOR":59,"LFor":60,"LForExpresiones":61,"LForWhere":62,"IN":63,"ClauseExpr":64,"AT":65,"forstmnt":66,"For_Let_Opt":67,"Where":68,"LForOrderby":69,"Orderby":70,"LForReturn":71,"LET":72,":=":73,"WHERE":74,"OrderBy":75,"ORDER":76,"BY":77,"LExp":78,"TO":79,"RETURN":80,"DECLARE":81,"FUNCTION":82,"Prefix":83,":":84,"Parameter":85,"AS":86,"XS":87,"TipoVar":88,"tk_llavea":89,"tk_llavec":90,";":91,"LVariables":92,"INTEGER_":93,"DECIMAL_":94,"STRING_":95,"BOOLEAN_":96,"DOUBLE_":97,"LOCAL":98,"<=":99,">=":100,"=":101,"!=":102,">":103,"<":104,"EQ":105,"NE":106,"LT":107,"LE":108,"GT":109,"GE":110,"Expr":111,"+":112,"-":113,"DIV":114,"MOD":115,"OR":116,"AND":117,"HTMLSTRING":118,"ATRIBUTOS":119,"SUFIX":120,"XQUERY":121,"[\\":122,"/>":123,"</":124,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"DIVSIGN",17:"ORSIGN",20:"@",23:"::",24:"*",25:"DIR",26:"TEXT",27:"(",28:")",29:"NODE",30:"POSITION",31:"LAST",32:"DOC",33:"STRING",34:"DATA",36:"UPPERCASE",37:"SUBSTRING",38:",",39:"ID",40:"NUMBER",41:"STRING2",42:"DECIMAL",43:"VARIABLE",44:"CHILD",45:"DESCENDANT",46:"ANCESTOR",47:"PRECEDING",48:"FOLLOWING",49:"NAMESPACE",50:"SELF",51:"PARENT",52:"ATTR",53:"[",54:"]",55:"IF",56:"THEN",58:"ELSE",59:"FOR",63:"IN",65:"AT",70:"Orderby",72:"LET",73:":=",74:"WHERE",76:"ORDER",77:"BY",79:"TO",80:"RETURN",81:"DECLARE",82:"FUNCTION",84:":",86:"AS",87:"XS",89:"tk_llavea",90:"tk_llavec",91:";",93:"INTEGER_",94:"DECIMAL_",95:"STRING_",96:"BOOLEAN_",97:"DOUBLE_",98:"LOCAL",99:"<=",100:">=",101:"=",102:"!=",103:">",104:"<",105:"EQ",106:"NE",107:"LT",108:"LE",109:"GT",110:"GE",112:"+",113:"-",114:"DIV",115:"MOD",116:"OR",117:"AND",122:"[\\",123:"/>",124:"</"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[14,2],[14,1],[16,4],[16,3],[16,1],[18,1],[18,3],[18,3],[18,3],[18,2],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,4],[19,4],[19,4],[19,8],[19,2],[19,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[21,3],[21,0],[11,8],[57,2],[57,3],[57,1],[8,4],[60,5],[60,7],[60,3],[60,5],[66,1],[66,0],[61,2],[61,1],[67,1],[67,1],[62,2],[62,1],[69,2],[69,1],[71,1],[10,4],[68,2],[75,3],[78,3],[78,1],[64,1],[64,5],[64,5],[9,2],[9,2],[9,2],[13,14],[85,3],[85,2],[92,7],[92,5],[88,1],[88,1],[88,1],[88,1],[88,1],[83,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[111,3],[111,3],[111,3],[111,3],[111,3],[111,3],[111,3],[111,3],[111,1],[7,2],[7,1],[118,4],[118,3],[119,4],[119,4],[119,6],[119,3],[119,3],[119,5],[120,1],[120,5],[120,5],[120,2],[120,3],[121,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			return $$[$0-1];
    
break;
case 2:

			$$[$0-1].push($$[$0]);
			this.$ = $$[$0-1];
    
break;
case 3:
 
				this.$ = [$$[$0]] 
			
break;
case 5:
        
			errores.push(new Error_(_$[$0].first_line, _$[$0].first_column, 'Sintactico','Valor inesperado ' + yytext));
			return "error";
		
break;
case 6: case 7: case 8: case 9: case 10: case 11:
 
						this.$ = $$[$0]; 
			
break;
case 12:
					
			var exp = new NodoXML("Exp","Exp",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val = new NodoXML($$[$0-1],"Exp",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			exp.addHijo(val);
			exp.addHijo($$[$0]);
			this.$ = exp;
		
break;
case 13:
			
			var exp = new NodoXML("Exp","Exp",_$[$0].first_line+1,_$[$0].first_column+1);			
			exp.addHijo($$[$0]);
			this.$ = exp;
		
break;
case 14:

			var lexp = new NodoXML("Lexp","Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val2 = new NodoXML($$[$0-1],"Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			lexp.addHijo($$[$0-3]);
			lexp.addHijo(val1);
			lexp.addHijo(val2);
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 15:
						
			var lexp = new NodoXML("Lexp","Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);			
			lexp.addHijo($$[$0-2]);
			lexp.addHijo(val1);			
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 16:

									
			var lexp = new NodoXML("Lexp","Lexp",_$[$0].first_line+1,_$[$0].first_column+1);			
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 17:

					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0].first_line+1,_$[$0].first_column+1);		
					syntfin.addHijo($$[$0]);
					this.$ = syntfin;
				
break;
case 18: case 20:

					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
					var val1 = new NodoXML($$[$0-2],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0-1]);			
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 19:

					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
					var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);													
					syntfin.addHijo($$[$0-2]);			
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 21:

	   
					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
					var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
					var val2 = new NodoXML($$[$0],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
					syntfin.addHijo(val1);
					syntfin.addHijo(val2);					
					this.$ = syntfin;
				
break;
case 22:
 
			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);			
			fin.addHijo($$[$0-1]);			
			fin.addHijo($$[$0]);										
			this.$ = fin;
		
break;
case 23:
 
	var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
			fin.addHijo(val1);		
			fin.addHijo($$[$0]);					
			this.$ = fin;
		
break;
case 24:

				var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 25:
		
			var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 26: case 27:

			var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 28:

			var fin = new NodoXML("Fin","Fin",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val1 = new NodoXML($$[$0-3],"Funcion",_$[$0-3].first_line+1,_$[$0-3].first_column+1);								
			var val2 = new NodoXML($$[$0-1],"Funcion",_$[$0-3].first_line+1,_$[$0-3].first_column+1);								
			fin.addHijo(val1);	
			fin.addHijo(val2);				
			this.$ = fin;
		
break;
case 29: case 30:

			var fin = new NodoXML("Fin","Fin",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val1 = new NodoXML($$[$0-3],"Funcion",_$[$0-3].first_line+1,_$[$0-3].first_column+1);																
			fin.addHijo(val1);	
			fin.addHijo($$[$0-1]);				
			this.$ = fin;
		
break;
case 31:

			var fin = new NodoXML("Fin","Fin",_$[$0-7].first_line+1,_$[$0-7].first_column+1);
			var val1 = new NodoXML($$[$0-7],"Funcion",_$[$0-7].first_line+1,_$[$0-7].first_column+1);																
			fin.addHijo(val1);	
			fin.addHijo($$[$0-5]);	
			fin.addHijo($$[$0-3]);	
			fin.addHijo($$[$0-1]);	
			this.$ = fin;
		
break;
case 32:

			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);			
			fin.addHijo($$[$0-1]);
			fin.addHijo($$[$0]);												
			this.$ = fin;
		
break;
case 33:

			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
			fin.addHijo(val1);	
			fin.addHijo($$[$0]);				
			this.$ = fin;
		
break;
case 35:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.NUMBER);
      
break;
case 36:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.STRING);
      
break;
case 37:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,  Type.STRING);
      
break;
case 38:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,  Type.FLOAT);
      
break;
case 39:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,  Type.ID);
      
break;
case 40:

						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48:

		  				var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 49:
 
				var predicado = new NodoXML("Opc","Opc",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
				predicado.addHijo($$[$0-1]);	
				this.$ = predicado;
		
break;
case 50:

				var opc = new NodoXML("Opc","Opc",_$[$0].first_line+1,_$[$0].first_column+1);									
				this.$ = opc;
		
break;
case 51:

				this.$ = new If($$[$0-5], $$[$0-2], $$[$0] ,_$[$0-7].first_line+1, _$[$0-7].first_column+1);		

break;
case 52:

			this.$ = null;
		
break;
case 53:

			this.$ = $$[$0-2];
		
break;
case 54:

				this.$ = $$[$0];
		
break;
case 55:

				var for_ = new NodoXML("For","For",_$[$0-3].first_line+1,_$[$0-3].first_column+1);								
				for_.addHijo($$[$0-2]);					
				for_.addHijo($$[$0-1]);
				for_.addHijo($$[$0]);
				this.$ = for_;
		
break;
case 56:

				var for_ = new NodoXML("ForExpr","ForExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);								
				var val1 = new NodoXML($$[$0-2],"Variable",_$[$0-4].first_line+1,_$[$0-4].first_column+1);			
				var val2 = new NodoXML($$[$0-1],"IN",_$[$0-4].first_line+1,_$[$0-4].first_column+1);			
				for_.addHijo($$[$0-4]);					
				for_.addHijo(val1);
				for_.addHijo($$[$0]);
				this.$ = for_;
		
break;
case 57:

				var for_ = new NodoXML("ForExpr","ForExpr",_$[$0-6].first_line+1,_$[$0-6].first_column+1);								
				var val1 = new NodoXML($$[$0-4],"Variable",_$[$0-6].first_line+1,_$[$0-6].first_column+1);	
				var val2 = new NodoXML($$[$0-3],"AT",_$[$0-6].first_line+1,_$[$0-6].first_column+1);			
				var val3 = new NodoXML($$[$0-2],"Variable",_$[$0-6].first_line+1,_$[$0-6].first_column+1);					
				var val4 = new NodoXML($$[$0-1],"IN",_$[$0-6].first_line+1,_$[$0-6].first_column+1);	
				for_.addHijo($$[$0-6]);					
				for_.addHijo(val1);
				for_.addHijo(val2);
				for_.addHijo(val3);
				for_.addHijo(val4);
				for_.addHijo($$[$0]);
				this.$ = for_;
		
break;
case 58:

			var for_ = new NodoXML("ForExpr","ForExpr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
				var val1 = new NodoXML($$[$0-2],"Variable",_$[$0-2].first_line+1,_$[$0-2].first_column+1);			
				var val2 = new NodoXML($$[$0-1],"IN",_$[$0-2].first_line+1,_$[$0-2].first_column+1);			
				for_.addHijo($$[$0-2]);					
				for_.addHijo(val1);
				for_.addHijo($$[$0]);
				this.$ = for_;

break;
case 59:

			var for_ = new NodoXML("ForExpr","ForExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);								
				var val1 = new NodoXML($$[$0-4],"Variable",_$[$0-4].first_line+1,_$[$0-4].first_column+1);	
				var val2 = new NodoXML($$[$0-3],"AT",_$[$0-4].first_line+1,_$[$0-4].first_column+1);			
				var val3 = new NodoXML($$[$0-2],"Variable",_$[$0-4].first_line+1,_$[$0-4].first_column+1);					
				var val4 = new NodoXML($$[$0-1],"IN",_$[$0-4].first_line+1,_$[$0-4].first_column+1);									
				for_.addHijo(val1);
				for_.addHijo(val2);
				for_.addHijo(val3);
				for_.addHijo(val4);
				for_.addHijo($$[$0]);
				this.$ = for_;
	   
break;
case 60:

			var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);
				this.$ = for_;
	   
break;
case 61:
var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);												
				this.$ = for_;
break;
case 62:

		var for_ = new NodoXML("Stmnt","Stmnt",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
				for_.addHijo($$[$0-1]);
				for_.addHijo($$[$0]);
				this.$ = for_;

break;
case 63:

							
								var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;
							
break;
case 64:

			var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;

break;
case 65:

							var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;

break;
case 66: case 68:
 
				var for_ = new NodoXML("Stmnt","Stmnt",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
				for_.addHijo($$[$0-1]);
				for_.addHijo($$[$0]);
				this.$ = for_;

break;
case 67:

							var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
							for_.addHijo($$[$0]);				
							this.$ = for_;

break;
case 69:

									var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;
								
							   
break;
case 70:
	var for_ = new NodoXML("Stmnt","Stmnt",_$[$0].first_line+1,_$[$0].first_column+1);								
				for_.addHijo($$[$0]);				
				this.$ = for_;

break;
case 71:
 
				var let_ = new NodoXML("Let","Let",_$[$0-3].first_line+1,_$[$0-3].first_column+1);			
				var val1 = new NodoXML($$[$0-2],"Variable",_$[$0-3].first_line+1,_$[$0-3].first_column+1);	
				let_.addHijo(val1);
				let_.addHijo($$[$0]);
				this.$ = let_;

break;
case 72:
 
				var where_ = new NodoXML("Where","Where",_$[$0-1].first_line+1,_$[$0-1].first_column+1);							
				where_.addHijo($$[$0]);
				this.$ = where_;

break;
case 73:
 
				var OrderBy_ = new NodoXML("OrderBy","OrderBy",_$[$0-2].first_line+1,_$[$0-2].first_column+1);							
				OrderBy_.addHijo($$[$0]);
				this.$ = OrderBy_;

break;
case 74:

				var lexp = new NodoXML("LExp","LExp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);							
				lexp.addHijo($$[$0-2]);
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 75:

				var lexp = new NodoXML("LExp","LExp",_$[$0].first_line+1,_$[$0].first_column+1);							
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 76:

				var lexp = new NodoXML("ClauseExpr","ClauseExpr",_$[$0].first_line+1,_$[$0].first_column+1);							
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 77:

				var lexp = new NodoXML("ClauseExpr","ClauseExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);	
				var val1 = new NodoXML($$[$0-2],"TO",_$[$0-4].first_line+1,_$[$0-4].first_column+1);				
				lexp.addHijo($$[$0-3]);
				lexp.addHijo(val1);
				lexp.addHijo($$[$0-1]);
				this.$ = lexp;

break;
case 78:

				var lexp = new NodoXML("ClauseExpr","ClauseExpr",_$[$0-4].first_line+1,_$[$0-4].first_column+1);				
				lexp.addHijo($$[$0-3]);
				lexp.addHijo($$[$0-1]);
				this.$ = lexp;

break;
case 79: case 80: case 81:

				var lexp = new NodoXML("Return","Return",_$[$0-1].first_line+1,_$[$0-1].first_column+1);				
				lexp.addHijo($$[$0]);
				this.$ = lexp;

break;
case 93: case 102:

             this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 94: case 104:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 95: case 99:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 96: case 100:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 97: case 103:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 98: case 101:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 105:
this.$ = $$[$0]
break;
case 106:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 107:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 108:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 111:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 113:
 this.$ = $$[$0-1] 
break;
case 114:
 this.$ = $$[$0] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,59:$V8,72:$V9,80:$Va,81:$Vb,104:$Vc,118:12},{1:[3]},{5:[1,25],6:26,8:6,9:7,10:8,11:9,12:10,13:11,33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,59:$V8,72:$V9,80:$Va,81:$Vb},o($Vd,[2,3]),o($Vd,[2,4],{118:27,104:$Vc}),o($Vd,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Vf,[2,116]),{43:[1,29],60:28},{7:32,11:31,12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:30,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,55:$V7,104:$Vc,111:33,118:12},{43:[1,62]},{27:[1,63]},o($VC,[2,34]),o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),{82:[1,64]},{39:[1,65]},{1:[2,1]},o($Vd,[2,2]),o($Vf,[2,115]),{8:70,10:69,38:[1,67],59:$V8,61:66,67:68,72:$V9},{63:[1,71],65:[1,72]},o($Ve,[2,79],{99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),o($Ve,[2,80]),o($Ve,[2,81],{118:27,104:$Vc}),o($VP,[2,105],{24:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:[1,90],117:$VV}),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:92,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},o($VW,[2,114]),{12:42,16:93,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB},o($VW,[2,13],{15:$VX,17:$VY}),o($VZ,[2,16]),o($VZ,[2,17]),{12:96,22:97,24:[1,98],33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB},o($VZ,$V_,{21:100,23:[1,99],53:$V$}),o($VZ,$V_,{21:102,53:$V$}),o($VZ,$V_,{21:103,53:$V$}),{27:[1,104]},{27:[1,105]},{27:[1,106]},{27:[1,107]},{27:[1,108]},{27:[1,109]},{27:[1,110]},{27:[1,111]},o($VZ,$V_,{21:112,53:$V$}),o($V01,[2,40]),o($V01,[2,41]),o($V01,[2,42]),o($V01,[2,43]),o($V01,[2,44]),o($V01,[2,45]),o($V01,[2,46]),o($V01,[2,47]),o($V01,[2,48]),{73:[1,113]},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:114,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{83:115,98:[1,116]},{39:[1,119],103:$V11,119:117,120:118,123:$V21,124:$V31},{8:70,9:130,10:69,59:$V8,62:123,67:124,68:125,69:126,70:$V41,71:129,72:$V9,74:[1,127],80:$Va},{43:[1,131]},o($V51,[2,63]),o($V51,[2,64]),o($V51,[2,65]),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$V61,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:133,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,64:132,111:33},{43:[1,135]},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:136,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:137,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:138,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:139,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:140,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:141,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:142,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:143,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:144,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:145,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:146,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:147,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:148},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:149},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:150},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:151},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:152},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:153},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:154},{28:$V71,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},o($VW,[2,12],{15:$VX,17:$VY}),{15:[1,156]},{12:42,18:157,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB},o($VZ,$V_,{21:158,53:$V$}),o($VZ,$V_,{21:159,53:$V$}),o($VZ,[2,21]),{12:42,19:160,22:161,24:$Vi,25:$Vj,26:$Vk,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB},o($VZ,[2,32]),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:162,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},o($VZ,[2,22]),o($VZ,[2,23]),{28:[1,163]},{28:[1,164]},{28:[1,165]},{28:[1,166]},{33:[1,167]},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:168,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:169,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:170,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},o($VZ,[2,33]),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$V61,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:133,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,64:171,111:33},{28:[1,172],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},{84:[1,173]},{84:[2,92]},{39:[1,175],103:$V11,120:174,123:$V21,124:$V31},o($Vf,[2,118]),{101:[1,176]},o($Vf,[2,125]),{7:178,39:[1,179],89:$V81,104:$Vc,118:12,121:177},{39:[1,181]},o($Ve,[2,55]),o($V51,[2,62]),{9:130,69:182,70:$V41,71:129,80:$Va},o($Ve,[2,67]),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:183,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{9:130,71:184,80:$Va},o($Ve,[2,69]),o($Ve,[2,70]),{63:[1,185],65:[1,186]},o($V91,[2,58]),o($Va1,[2,76],{99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:187,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{63:[1,188]},o($Vb1,[2,93],{105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),o($Vb1,[2,94],{105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),o($Vc1,[2,95],{99:$VD,100:$VE,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),o($Vc1,[2,96],{99:$VD,100:$VE,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),o($Vb1,[2,97],{105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),o($Vb1,[2,98],{105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),o($Vd1,[2,99],{107:$VL,108:$VM,109:$VN,110:$VO}),o($Vd1,[2,100],{107:$VL,108:$VM,109:$VN,110:$VO}),o($VP,[2,101]),o($VP,[2,102]),o($VP,[2,103]),o($VP,[2,104]),o($Ve1,[2,106],{24:$VQ,114:$VT,115:$VU}),o($Ve1,[2,107],{24:$VQ,114:$VT,115:$VU}),o($VW,[2,108]),o($VW,[2,109]),o($VW,[2,110]),o([5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110,116],[2,111],{24:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,117:$VV}),o([5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,99,100,101,102,103,104,105,106,107,108,109,110,116,117],[2,112],{24:$VQ,112:$VR,113:$VS,114:$VT,115:$VU}),o($VW,[2,113]),{12:42,18:189,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB},o($VZ,[2,15]),o($VZ,[2,18]),o($VZ,[2,20]),o($VZ,[2,19]),o($VZ,$V_,{21:100,53:$V$}),{54:[1,190],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},o($VZ,[2,24]),o($VZ,[2,25]),o($VZ,[2,26]),o($VZ,[2,27]),{28:[1,191]},{28:[1,192],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},{28:[1,193],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},{38:[1,194],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},o($Ve,[2,71]),{56:[1,195]},{39:[1,196]},o($Vf,[2,117]),{101:[1,197]},{33:[1,198],41:[1,199],54:[1,200]},{124:[1,201]},{104:$Vc,118:27,124:[1,202]},o($Vf,[2,128]),{2:$V0,4:203,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,59:$V8,72:$V9,80:$Va,81:$Vb,104:$Vc,118:12},{103:[1,204]},o($Ve,[2,66]),o([70,80],[2,72],{99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO}),o($Ve,[2,68]),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$V61,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:133,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,64:205,111:33},{43:[1,206]},{28:$V71,38:[1,208],79:[1,207],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$V61,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:133,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,64:209,111:33},o($VZ,[2,14]),o($VZ,[2,49]),o($VZ,[2,28]),o($VZ,[2,29]),o($VZ,[2,30]),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:210,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{6:213,8:6,9:7,10:8,11:9,12:10,13:11,27:$Vf1,33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,57:211,59:$V8,72:$V9,80:$Va,81:$Vb},{27:[1,215],85:214},{33:[1,216],41:[1,217],54:[1,218]},o($Vg1,[2,122]),o($Vg1,[2,123]),{89:$V81,121:219},{39:[1,220]},{39:[1,221]},{6:26,8:6,9:7,10:8,11:9,12:10,13:11,33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,59:$V8,72:$V9,80:$Va,81:$Vb,90:[1,222]},o($Vf,[2,129]),o($V91,[2,56]),{63:[1,223]},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:224,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:225,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},o($V91,[2,59]),{38:[1,226],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},{58:[1,227]},{2:$V0,4:229,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,28:[1,228],33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,59:$V8,72:$V9,80:$Va,81:$Vb,104:$Vc,118:12},o($Ve,[2,54]),{86:[1,230]},{28:[1,232],43:[1,233],92:231},o($Vg1,[2,119]),o($Vg1,[2,120]),{89:$V81,121:234},{122:[1,235]},{103:[1,236]},{103:[1,237]},o([122,124],[2,130]),{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$V61,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:133,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,64:238,111:33},{28:[1,239],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},{28:[1,240],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},{12:42,14:35,15:$Vg,16:37,18:38,19:39,20:$Vh,22:41,24:$Vi,25:$Vj,26:$Vk,27:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$V1,34:$Vq,35:241,36:$Vr,37:$Vs,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,111:33},{6:213,8:6,9:7,10:8,11:9,12:10,13:11,27:$Vf1,33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,57:242,59:$V8,72:$V9,80:$Va,81:$Vb},o($Ve,[2,52]),{6:26,8:6,9:7,10:8,11:9,12:10,13:11,28:[1,243],33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,59:$V8,72:$V9,80:$Va,81:$Vb},{87:[1,244]},{28:[1,245],38:[1,246]},{86:[2,84]},{86:[1,247]},{122:[1,248]},o($Vg1,[2,124]),o($Vf,[2,126]),o($Vf,[2,127]),o($V91,[2,57]),o($Va1,[2,77]),o($Va1,[2,78]),{28:[1,249],99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO},o($Ve,[2,51]),o($Ve,[2,53]),{84:[1,250]},{86:[2,83]},{43:[1,251]},{87:[1,252]},o($Vg1,[2,121]),o($VZ,[2,31]),{88:253,93:$Vh1,94:$Vi1,95:$Vj1,96:$Vk1,97:$Vl1},{86:[1,259]},{84:[1,260]},{89:[1,261]},o($Vm1,[2,87]),o($Vm1,[2,88]),o($Vm1,[2,89]),o($Vm1,[2,90]),o($Vm1,[2,91]),{87:[1,262]},{88:263,93:$Vh1,94:$Vi1,95:$Vj1,96:$Vk1,97:$Vl1},{2:$V0,4:264,6:3,7:4,8:6,9:7,10:8,11:9,12:10,13:11,33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,59:$V8,72:$V9,80:$Va,81:$Vb,104:$Vc,118:12},{84:[1,265]},o($Vn1,[2,86]),{6:26,8:6,9:7,10:8,11:9,12:10,13:11,33:$V1,39:$V2,40:$V3,41:$V4,42:$V5,43:$V6,55:$V7,59:$V8,72:$V9,80:$Va,81:$Vb,90:[1,266]},{88:267,93:$Vh1,94:$Vi1,95:$Vj1,96:$Vk1,97:$Vl1},{91:[1,268]},o($Vn1,[2,85]),o($Ve,[2,82])],
defaultActions: {25:[2,1],116:[2,92],232:[2,84],245:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let valDeclaration = '';
    let valTag = '';
    let valInside = '';
    const {Error_} = require('../Error');
    const {errores} = require('../Errores');
    const {NodoXML} = require('../Nodes/NodoXml')

    // Expresiones
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Logic, LogicOption} = require('../Expression/Logic');
    const {Literal} = require('../Expression/Literal');
    // Instrucciones
    const {If} = require('../Instruction/If');
    const {ForIn} = require('../Instruction/ForIn');

    // Extra
    const {Type} = require('../Abstract/Retorno');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comment1"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: 
break;
case 4: this.begin("comment2"); 
break;
case 5: this.popState(); 
break;
case 6: 
break;
case 7: 
break;
case 8: /*se ignoran*/ 
break;
case 9:return 42
break;
case 10:return 40
break;
case 11:return 33
break;
case 12:return 41
break;
case 13:return 15
break;
case 14:return 25
break;
case 15:return 46
break;
case 16:return 48
break;
case 17:return 47
break;
case 18:return 17
break;
case 19:return 20
break;
case 20:return 24
break;
case 21:return 23
break;
case 22:return 73
break;
case 23:return 113
break;
case 24:return 112
break;
case 25:return 38
break;
case 26:return 84
break;
case 27:return 91
break;
case 28:return 124
break;
case 29:return 99
break;
case 30:return 100
break;
case 31:return 104
break;
case 32:return 103
break;
case 33:return 102
break;
case 34:return 101
break;
case 35:return 116
break;
case 36:return 117
break;
case 37:return 115
break;
case 38:return 114
break;
case 39:return 27
break;
case 40:return 28 
break;
case 41:return 53
break;
case 42:return 54
break;
case 43:return 89
break;
case 44:return 90
break;
case 45:return 44
break;
case 46:return 52
break;
case 47:return 45
break;
case 48:return 49
break;
case 49:return 51
break;
case 50:return 50
break;
case 51:return 26
break;
case 52:return 31
break;
case 53:return 30
break;
case 54:return 29
break;
case 55:return 105
break;
case 56:return 106
break;
case 57:return 107
break;
case 58:return 108
break;
case 59:return 109
break;
case 60:return 110
break;
case 61:return 32
break;
case 62:return 59
break;
case 63:return 63
break;
case 64:return 80
break;
case 65:return 65
break;
case 66:return 63
break;
case 67:return 79
break;
case 68:return 72
break;
case 69:return 74
break;
case 70:return 76
break;
case 71:return 77
break;
case 72:return 55
break;
case 73:return 56
break;
case 74:return 58
break;
case 75:return 34
break;
case 76:return 36
break;
case 77:return "SUBSTRING"
break;
case 78:return 81
break;
case 79:return 82
break;
case 80:return 98
break;
case 81:return 86
break;
case 82:return 87
break;
case 83:return 94
break;
case 84:return 93
break;
case 85:return 95
break;
case 86:return 'DATE_'
break;
case 87:return 'TIME_'
break;
case 88:return 'DATETIME_'
break;
case 89:return 96
break;
case 90:return 97
break;
case 91:return 'FLOAT_'
break;
case 92:return 39;
break;
case 93:return 43;
break;
case 94:return 5
break;
}
},
rules: [/^(?:<!--)/,/^(?:-->)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:\(:)/,/^(?::\))/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:[ \t\n\r\f])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:((\/)(\/)?))/,/^(?:((\.)(\.)?))/,/^(?:((ancestor)(-or-self)?))/,/^(?:((following)(-sibling)?))/,/^(?:((preceding)(-sibling)?))/,/^(?:((\|)(\|)?))/,/^(?:@)/,/^(?:\*)/,/^(?:::)/,/^(?::=)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:<\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:descendant\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:return\b)/,/^(?:at\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:data\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:decimal\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:date\b)/,/^(?:time\b)/,/^(?:dateTime\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:(\$)([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:$)/],
conditions: {"comment2":{"rules":[5,6,7],"inclusive":false},"comment1":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xQuery;
exports.Parser = xQuery.Parser;
exports.parse = function () { return xQuery.parse.apply(xQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}