/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,16],$V2=[1,17],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,15],$V7=[1,12],$V8=[1,14],$V9=[1,13],$Va=[1,22],$Vb=[1,23],$Vc=[5,28,33,39,40,41,42,43,55,59,72,80,81,90],$Vd=[5,28,33,39,40,41,42,43,55,58,59,70,72,74,80,81,90],$Ve=[5,28,33,39,40,41,42,43,55,58,59,70,72,74,80,81,90,108,128],$Vf=[1,35],$Vg=[1,39],$Vh=[1,51],$Vi=[1,42],$Vj=[1,43],$Vk=[1,33],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[5,15,17,24,28,33,38,39,40,41,42,43,53,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[1,79],$VK=[1,80],$VL=[1,81],$VM=[1,82],$VN=[1,83],$VO=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110,111,112,113,114],$VP=[1,86],$VQ=[1,84],$VR=[1,85],$VS=[1,87],$VT=[1,88],$VU=[1,90],$VV=[5,24,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121],$VW=[1,94],$VX=[1,93],$VY=[5,15,17,24,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121],$VZ=[2,49],$V_=[1,100],$V$=[5,15,17,23,24,28,33,38,39,40,41,42,43,53,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121],$V01=[1,120],$V11=[1,119],$V21=[1,121],$V31=[1,127],$V41=[59,70,72,74,80],$V51=[1,133],$V61=[1,154],$V71=[1,179],$V81=[38,59,72],$V91=[5,28,33,38,39,40,41,42,43,55,58,59,70,72,74,80,81,90],$Va1=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108],$Vb1=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,105,106],$Vc1=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110],$Vd1=[5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110,111,112,113,114,116,117,120,121],$Ve1=[1,211],$Vf1=[39,107,127,128],$Vg1=[1,253],$Vh1=[1,254],$Vi1=[1,255],$Vj1=[1,256],$Vk1=[1,257],$Vl1=[1,258],$Vm1=[1,259],$Vn1=[1,260],$Vo1=[1,261],$Vp1=[28,38,89],$Vq1=[28,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"LExpresiones":4,"EOF":5,"Instrucciones":6,"HTML":7,"For":8,"Return":9,"Let":10,"If":11,"Valor":12,"Function":13,"Exp":14,"DIVSIGN":15,"Lexp":16,"ORSIGN":17,"Syntfin":18,"Fin":19,"@":20,"Opc":21,"Preservada":22,"::":23,"*":24,"DIR":25,"TEXT":26,"(":27,")":28,"NODE":29,"POSITION":30,"LAST":31,"DOC":32,"STRING":33,"DATA":34,"ExprLogica":35,"UPPERCASE":36,"SUBSTRING":37,",":38,"ID":39,"NUMBER":40,"STRING2":41,"DECIMAL":42,"VARIABLE":43,"CHILD":44,"DESCENDANT":45,"ANCESTOR":46,"PRECEDING":47,"FOLLOWING":48,"NAMESPACE":49,"SELF":50,"PARENT":51,"ATTR":52,"[":53,"]":54,"IF":55,"THEN":56,"stmnt":57,"ELSE":58,"FOR":59,"LFor":60,"LForExpresiones":61,"LForWhere":62,"IN":63,"ClauseExpr":64,"AT":65,"forstmnt":66,"For_Let_Opt":67,"Where":68,"LForOrderby":69,"Orderby":70,"LForReturn":71,"LET":72,":=":73,"WHERE":74,"OrderBy":75,"ORDER":76,"BY":77,"LExp":78,"TO":79,"RETURN":80,"DECLARE":81,"FUNCTION":82,"Prefix":83,":":84,"Parameter":85,"AS":86,"XS":87,"TipoVar":88,"tk_llavea":89,"tk_llavec":90,";":91,"LVariables":92,"INTEGER_":93,"DECIMAL_":94,"STRING_":95,"DATE_":96,"TIME_":97,"DATETIME_":98,"BOOLEAN_":99,"DOUBLE_":100,"FLOAT_":101,"LOCAL":102,"<=":103,">=":104,"=":105,"!=":106,">":107,"<":108,"EQ":109,"NE":110,"LT":111,"LE":112,"GT":113,"GE":114,"Expr":115,"+":116,"-":117,"DIV":118,"MOD":119,"OR":120,"AND":121,"HTMLSTRING":122,"ATRIBUTOS":123,"SUFIX":124,"XQUERY":125,"[\\":126,"/>":127,"</":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"DIVSIGN",17:"ORSIGN",20:"@",23:"::",24:"*",25:"DIR",26:"TEXT",27:"(",28:")",29:"NODE",30:"POSITION",31:"LAST",32:"DOC",33:"STRING",34:"DATA",36:"UPPERCASE",37:"SUBSTRING",38:",",39:"ID",40:"NUMBER",41:"STRING2",42:"DECIMAL",43:"VARIABLE",44:"CHILD",45:"DESCENDANT",46:"ANCESTOR",47:"PRECEDING",48:"FOLLOWING",49:"NAMESPACE",50:"SELF",51:"PARENT",52:"ATTR",53:"[",54:"]",55:"IF",56:"THEN",58:"ELSE",59:"FOR",63:"IN",65:"AT",70:"Orderby",72:"LET",73:":=",74:"WHERE",76:"ORDER",77:"BY",79:"TO",80:"RETURN",81:"DECLARE",82:"FUNCTION",84:":",86:"AS",87:"XS",89:"tk_llavea",90:"tk_llavec",91:";",93:"INTEGER_",94:"DECIMAL_",95:"STRING_",96:"DATE_",97:"TIME_",98:"DATETIME_",99:"BOOLEAN_",100:"DOUBLE_",101:"FLOAT_",102:"LOCAL",103:"<=",104:">=",105:"=",106:"!=",107:">",108:"<",109:"EQ",110:"NE",111:"LT",112:"LE",113:"GT",114:"GE",116:"+",117:"-",118:"DIV",119:"MOD",120:"OR",121:"AND",126:"[\\",127:"/>",128:"</"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[14,2],[14,1],[16,4],[16,3],[16,1],[18,1],[18,3],[18,3],[18,3],[18,2],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,4],[19,4],[19,4],[19,8],[19,2],[19,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[21,3],[21,0],[11,8],[57,2],[57,3],[57,1],[8,4],[60,5],[60,7],[60,3],[60,5],[66,1],[66,0],[61,2],[61,1],[67,1],[67,1],[62,2],[62,1],[69,2],[69,1],[71,1],[10,4],[68,2],[75,3],[78,3],[78,1],[64,1],[64,5],[64,5],[9,2],[9,2],[9,2],[13,14],[85,3],[85,2],[92,7],[92,5],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[83,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[115,3],[115,3],[115,3],[115,3],[115,3],[115,3],[115,3],[115,3],[115,1],[7,2],[7,1],[122,4],[122,3],[123,4],[123,4],[123,6],[123,3],[123,3],[123,5],[124,1],[124,5],[124,5],[124,2],[124,3],[125,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 11:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$ = [$$[$0]];
    
break;
case 5: case 6: case 7: case 8: case 16: case 71: case 72: case 117:
 this.$ = $$[$0] 
break;
case 12: case 15:
 this.$ = [$$[$0]] 
break;
case 21: case 22: case 65: case 116:
 this.$ = $$[$0-1] 
break;
case 34:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.NUMBER);
      
break;
case 35:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Type.STRING);
      
break;
case 36:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,  Type.STRING);
      
break;
case 37:

          this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,  Type.FLOAT);
      
break;
case 48:
 this.$ = $$[$0-2] 
break;
case 50: case 57:



break;
case 73:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 74:
this.$ = [$$[$0]] 
break;
case 75: case 108:
this.$ = $$[$0]
break;
case 96: case 105:

             this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 97: case 107:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         
break;
case 98: case 102:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 99: case 103:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 100: case 106:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 101: case 104:

            this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 109:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 111:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 113:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 114:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 115:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,59:$V7,72:$V8,80:$V9,81:$Va,108:$Vb,122:11},{1:[3]},{5:[1,24],6:25,8:5,9:6,10:7,11:8,12:9,13:10,33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,59:$V7,72:$V8,80:$V9,81:$Va},o($Vc,[2,3]),o($Vc,[2,4],{122:26,108:$Vb}),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Ve,[2,119]),{43:[1,28],60:27},{7:31,11:30,12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:29,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,55:$V6,108:$Vb,115:32,122:11},{43:[1,61]},{27:[1,62]},o($VB,[2,33]),o($VB,[2,34]),o($VB,[2,35]),o($VB,[2,36]),o($VB,[2,37]),o($VB,[2,38]),{82:[1,63]},{39:[1,64]},{1:[2,1]},o($Vc,[2,2]),o($Ve,[2,118]),{8:69,10:68,38:[1,66],59:$V7,61:65,67:67,72:$V8},{63:[1,70],65:[1,71]},o($Vd,[2,78],{103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),o($Vd,[2,79]),o($Vd,[2,80],{122:26,108:$Vb}),o($VO,[2,108],{24:$VP,116:$VQ,117:$VR,118:$VS,119:$VT,120:[1,89],121:$VU}),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:91,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},o($VV,[2,117]),{12:41,16:92,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},o($VV,[2,12],{15:$VW,17:$VX}),o($VY,[2,15]),o($VY,[2,16]),{12:95,22:96,24:[1,97],33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},o($VY,$VZ,{21:99,23:[1,98],53:$V_}),o($VY,$VZ,{21:101,53:$V_}),o($VY,$VZ,{21:102,53:$V_}),{27:[1,103]},{27:[1,104]},{27:[1,105]},{27:[1,106]},{27:[1,107]},{27:[1,108]},{27:[1,109]},{27:[1,110]},o($VY,$VZ,{21:111,53:$V_}),o($V$,[2,39]),o($V$,[2,40]),o($V$,[2,41]),o($V$,[2,42]),o($V$,[2,43]),o($V$,[2,44]),o($V$,[2,45]),o($V$,[2,46]),o($V$,[2,47]),{73:[1,112]},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:113,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{83:114,102:[1,115]},{39:[1,118],107:$V01,123:116,124:117,127:$V11,128:$V21},{8:69,9:129,10:68,59:$V7,62:122,67:123,68:124,69:125,70:$V31,71:128,72:$V8,74:[1,126],80:$V9},{43:[1,130]},o($V41,[2,62]),o($V41,[2,63]),o($V41,[2,64]),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$V51,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:132,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,64:131,115:32},{43:[1,134]},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:135,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:136,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:137,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:138,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:139,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:140,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:141,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:142,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:143,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:144,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:145,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:146,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:147},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:148},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:149},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:150},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:151},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:152},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:153},{28:$V61,103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},o($VV,[2,11],{15:$VW,17:$VX}),{15:[1,155]},{12:41,18:156,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},o($VY,$VZ,{21:157,53:$V_}),o($VY,$VZ,{21:158,53:$V_}),o($VY,[2,20]),{12:41,19:159,22:160,24:$Vh,25:$Vi,26:$Vj,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},o($VY,[2,31]),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:161,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},o($VY,[2,21]),o($VY,[2,22]),{28:[1,162]},{28:[1,163]},{28:[1,164]},{28:[1,165]},{33:[1,166]},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:167,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:168,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:169,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},o($VY,[2,32]),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$V51,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:132,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,64:170,115:32},{28:[1,171],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},{84:[1,172]},{84:[2,95]},{39:[1,174],107:$V01,124:173,127:$V11,128:$V21},o($Ve,[2,121]),{105:[1,175]},o($Ve,[2,128]),{7:177,39:[1,178],89:$V71,108:$Vb,122:11,125:176},{39:[1,180]},o($Vd,[2,54]),o($V41,[2,61]),{9:129,69:181,70:$V31,71:128,80:$V9},o($Vd,[2,66]),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:182,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{9:129,71:183,80:$V9},o($Vd,[2,68]),o($Vd,[2,69]),{63:[1,184],65:[1,185]},o($V81,[2,57]),o($V91,[2,75],{103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:186,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{63:[1,187]},o($Va1,[2,96],{109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),o($Va1,[2,97],{109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),o($Vb1,[2,98],{103:$VC,104:$VD,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),o($Vb1,[2,99],{103:$VC,104:$VD,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),o($Va1,[2,100],{109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),o($Va1,[2,101],{109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),o($Vc1,[2,102],{111:$VK,112:$VL,113:$VM,114:$VN}),o($Vc1,[2,103],{111:$VK,112:$VL,113:$VM,114:$VN}),o($VO,[2,104]),o($VO,[2,105]),o($VO,[2,106]),o($VO,[2,107]),o($Vd1,[2,109],{24:$VP,118:$VS,119:$VT}),o($Vd1,[2,110],{24:$VP,118:$VS,119:$VT}),o($VV,[2,111]),o($VV,[2,112]),o($VV,[2,113]),o([5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110,111,112,113,114,120],[2,114],{24:$VP,116:$VQ,117:$VR,118:$VS,119:$VT,121:$VU}),o([5,28,33,38,39,40,41,42,43,54,55,58,59,70,72,74,79,80,81,90,103,104,105,106,107,108,109,110,111,112,113,114,120,121],[2,115],{24:$VP,116:$VQ,117:$VR,118:$VS,119:$VT}),o($VV,[2,116]),{12:41,18:188,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},o($VY,[2,14]),o($VY,[2,17]),o($VY,[2,19]),o($VY,[2,18]),o($VY,$VZ,{21:99,53:$V_}),{54:[1,189],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},o($VY,[2,23]),o($VY,[2,24]),o($VY,[2,25]),o($VY,[2,26]),{28:[1,190]},{28:[1,191],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},{28:[1,192],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},{38:[1,193],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},o($Vd,[2,70]),{56:[1,194]},{39:[1,195]},o($Ve,[2,120]),{105:[1,196]},{33:[1,197],41:[1,198],54:[1,199]},{128:[1,200]},{108:$Vb,122:26,128:[1,201]},o($Ve,[2,131]),{4:202,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,59:$V7,72:$V8,80:$V9,81:$Va,108:$Vb,122:11},{107:[1,203]},o($Vd,[2,65]),o([70,80],[2,71],{103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN}),o($Vd,[2,67]),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$V51,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:132,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,64:204,115:32},{43:[1,205]},{28:$V61,38:[1,207],79:[1,206],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$V51,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:132,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,64:208,115:32},o($VY,[2,13]),o($VY,[2,48]),o($VY,[2,27]),o($VY,[2,28]),o($VY,[2,29]),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:209,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{6:212,8:5,9:6,10:7,11:8,12:9,13:10,27:$Ve1,33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,57:210,59:$V7,72:$V8,80:$V9,81:$Va},{27:[1,214],85:213},{33:[1,215],41:[1,216],54:[1,217]},o($Vf1,[2,125]),o($Vf1,[2,126]),{89:$V71,125:218},{39:[1,219]},{39:[1,220]},{6:25,8:5,9:6,10:7,11:8,12:9,13:10,33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,59:$V7,72:$V8,80:$V9,81:$Va,90:[1,221]},o($Ve,[2,132]),o($V81,[2,55]),{63:[1,222]},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:223,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:224,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},o($V81,[2,58]),{38:[1,225],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},{58:[1,226]},{4:228,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,28:[1,227],33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,59:$V7,72:$V8,80:$V9,81:$Va,108:$Vb,122:11},o($Vd,[2,53]),{86:[1,229]},{28:[1,231],43:[1,232],92:230},o($Vf1,[2,122]),o($Vf1,[2,123]),{89:$V71,125:233},{126:[1,234]},{107:[1,235]},{107:[1,236]},o([126,128],[2,133]),{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$V51,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:132,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,64:237,115:32},{28:[1,238],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},{28:[1,239],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},{12:41,14:34,15:$Vf,16:36,18:37,19:38,20:$Vg,22:40,24:$Vh,25:$Vi,26:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$V0,34:$Vp,35:240,36:$Vq,37:$Vr,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,115:32},{6:212,8:5,9:6,10:7,11:8,12:9,13:10,27:$Ve1,33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,57:241,59:$V7,72:$V8,80:$V9,81:$Va},o($Vd,[2,51]),{6:25,8:5,9:6,10:7,11:8,12:9,13:10,28:[1,242],33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,59:$V7,72:$V8,80:$V9,81:$Va},{87:[1,243]},{28:[1,244],38:[1,245]},{86:[2,83]},{86:[1,246]},{126:[1,247]},o($Vf1,[2,127]),o($Ve,[2,129]),o($Ve,[2,130]),o($V81,[2,56]),o($V91,[2,76]),o($V91,[2,77]),{28:[1,248],103:$VC,104:$VD,105:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN},o($Vd,[2,50]),o($Vd,[2,52]),{84:[1,249]},{86:[2,82]},{43:[1,250]},{87:[1,251]},o($Vf1,[2,124]),o($VY,[2,30]),{88:252,93:$Vg1,94:$Vh1,95:$Vi1,96:$Vj1,97:$Vk1,98:$Vl1,99:$Vm1,100:$Vn1,101:$Vo1},{86:[1,262]},{84:[1,263]},{89:[1,264]},o($Vp1,[2,86]),o($Vp1,[2,87]),o($Vp1,[2,88]),o($Vp1,[2,89]),o($Vp1,[2,90]),o($Vp1,[2,91]),o($Vp1,[2,92]),o($Vp1,[2,93]),o($Vp1,[2,94]),{87:[1,265]},{88:266,93:$Vg1,94:$Vh1,95:$Vi1,96:$Vj1,97:$Vk1,98:$Vl1,99:$Vm1,100:$Vn1,101:$Vo1},{4:267,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,59:$V7,72:$V8,80:$V9,81:$Va,108:$Vb,122:11},{84:[1,268]},o($Vq1,[2,85]),{6:25,8:5,9:6,10:7,11:8,12:9,13:10,33:$V0,39:$V1,40:$V2,41:$V3,42:$V4,43:$V5,55:$V6,59:$V7,72:$V8,80:$V9,81:$Va,90:[1,269]},{88:270,93:$Vg1,94:$Vh1,95:$Vi1,96:$Vj1,97:$Vk1,98:$Vl1,99:$Vm1,100:$Vn1,101:$Vo1},{91:[1,271]},o($Vq1,[2,84]),o($Vd,[2,81])],
defaultActions: {24:[2,1],115:[2,95],231:[2,83],244:[2,82]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let valDeclaration = '';
    let valTag = '';
    let valInside = '';
    const {Error_} = require('../Error');
    const {errores} = require('../Errores');
    const {NodoXML} = require('../Nodes/NodoXml')

    // Expresiones
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Logic, LogicOption} = require('../Expression/Logic');
    const {Literal} = require('../Expression/Literal');
    // Instrucciones
    const {If} = require('../Instruction/If');
    const {ForIn} = require('../Instruction/ForIn');

    // Extra
    const {Type} = require('../Abstract/Retorno');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comment1"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: 
break;
case 4: this.begin("comment2"); 
break;
case 5: this.popState(); 
break;
case 6: 
break;
case 7: 
break;
case 8: /*se ignoran*/ 
break;
case 9:return 42
break;
case 10:return 40
break;
case 11:return 33
break;
case 12:return 41
break;
case 13:return 15
break;
case 14:return 25
break;
case 15:return 46
break;
case 16:return 48
break;
case 17:return 47
break;
case 18:return 17
break;
case 19:return 20
break;
case 20:return 24
break;
case 21:return 23
break;
case 22:return 73
break;
case 23:return 117
break;
case 24:return 116
break;
case 25:return 38
break;
case 26:return 84
break;
case 27:return 91
break;
case 28:return 128
break;
case 29:return 103
break;
case 30:return 104
break;
case 31:return 108
break;
case 32:return 107
break;
case 33:return 106
break;
case 34:return 105
break;
case 35:return 120
break;
case 36:return 121
break;
case 37:return 119
break;
case 38:return 118
break;
case 39:return 27
break;
case 40:return 28 
break;
case 41:return 53
break;
case 42:return 54
break;
case 43:return 89
break;
case 44:return 90
break;
case 45:return 44
break;
case 46:return 52
break;
case 47:return 45
break;
case 48:return 49
break;
case 49:return 51
break;
case 50:return 50
break;
case 51:return 26
break;
case 52:return 31
break;
case 53:return 30
break;
case 54:return 29
break;
case 55:return 109
break;
case 56:return 110
break;
case 57:return 111
break;
case 58:return 112
break;
case 59:return 113
break;
case 60:return 114
break;
case 61:return 32
break;
case 62:return 59
break;
case 63:return 63
break;
case 64:return 80
break;
case 65:return 65
break;
case 66:return 63
break;
case 67:return 79
break;
case 68:return 72
break;
case 69:return 74
break;
case 70:return 76
break;
case 71:return 77
break;
case 72:return 55
break;
case 73:return 56
break;
case 74:return 58
break;
case 75:return 34
break;
case 76:return 36
break;
case 77:return "SUBSTRING"
break;
case 78:return 81
break;
case 79:return 82
break;
case 80:return 102
break;
case 81:return 86
break;
case 82:return 87
break;
case 83:return 94
break;
case 84:return 93
break;
case 85:return 95
break;
case 86:return 96
break;
case 87:return 97
break;
case 88:return 98
break;
case 89:return 99
break;
case 90:return 100
break;
case 91:return 101
break;
case 92:return 39;
break;
case 93:return 43;
break;
case 94:return 5
break;
}
},
rules: [/^(?:<!--)/,/^(?:-->)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:\(:)/,/^(?::\))/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:[ \t\n\r\f])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:((\/)(\/)?))/,/^(?:((\.)(\.)?))/,/^(?:((ancestor)(-or-self)?))/,/^(?:((following)(-sibling)?))/,/^(?:((preceding)(-sibling)?))/,/^(?:((\|)(\|)?))/,/^(?:@)/,/^(?:\*)/,/^(?:::)/,/^(?::=)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:<\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:descendant\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:return\b)/,/^(?:at\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:data\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:decimal\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:date\b)/,/^(?:time\b)/,/^(?:dateTime\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:(\$)([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:$)/],
conditions: {"comment2":{"rules":[5,6,7],"inclusive":false},"comment1":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xQuery;
exports.Parser = xQuery.Parser;
exports.parse = function () { return xQuery.parse.apply(xQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}