/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xPathAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,3],$V2=[1,8],$V3=[1,16],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,22],$Vk=[1,23],$Vl=[1,24],$Vm=[1,25],$Vn=[5,16,20,42,44,45,46,47,48,49,50,51,52,53,54,55],$Vo=[1,34],$Vp=[1,33],$Vq=[5,6,8,16,20,42,44,45,46,47,48,49,50,51,52,53,54,55],$Vr=[2,36],$Vs=[1,42],$Vt=[5,6,8,15,16,20,40,42,44,45,46,47,48,49,50,51,52,53,54,55],$Vu=[5,6,8,16,20,40,42,44,45,46,47,48,49,50,51,52,53,54,55],$Vv=[1,59],$Vw=[1,75],$Vx=[1,73],$Vy=[1,74],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[16,20,42,44,45,46,47,48,49,50,51,52,53,54,55],$VE=[20,42,44,45,46,47,48,49,50,51,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Exp":4,"EOF":5,"DIVSIGN":6,"Lexp":7,"ORSIGN":8,"Syntfin":9,"Fin":10,"@":11,"Valor":12,"Opc":13,"Preservada":14,"::":15,"*":16,"DIR":17,"TEXT":18,"(":19,")":20,"NODE":21,"POSITION":22,"LAST":23,"ID":24,"NUMBER":25,"STRING":26,"STRING2":27,"DECIMAL":28,"CHILD":29,"DESCENDANT":30,"ANCESTOR":31,"PRECEDING":32,"FOLLOWING":33,"NAMESPACE":34,"SELF":35,"PARENT":36,"ATTR":37,"LPredicado":38,"Predicado":39,"[":40,"ExprLogica":41,"]":42,"Expr":43,"<=":44,">=":45,"=":46,"!=":47,">":48,"<":49,"+":50,"-":51,"DIV":52,"MOD":53,"OR":54,"AND":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"DIVSIGN",8:"ORSIGN",11:"@",15:"::",16:"*",17:"DIR",18:"TEXT",19:"(",20:")",21:"NODE",22:"POSITION",23:"LAST",24:"ID",25:"NUMBER",26:"STRING",27:"STRING2",28:"DECIMAL",29:"CHILD",30:"DESCENDANT",31:"ANCESTOR",32:"PRECEDING",33:"FOLLOWING",34:"NAMESPACE",35:"SELF",36:"PARENT",37:"ATTR",40:"[",42:"]",44:"<=",45:">=",46:"=",47:"!=",48:">",49:"<",50:"+",51:"-",52:"DIV",53:"MOD",54:"OR",55:"AND"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,4],[7,3],[7,1],[9,1],[9,3],[9,3],[9,3],[9,2],[10,2],[10,2],[10,3],[10,3],[10,3],[10,3],[10,2],[10,2],[12,1],[12,1],[12,1],[12,1],[12,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[13,1],[13,0],[38,2],[38,1],[39,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		
			reglas.push(new Regla_("Init -> Exp EOF"," Init.val = Exp.val"));
			
			var init = new NodoXML("Init","Init",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			init.addHijo($$[$0-1]);
			return init;
		
break;
case 2:

			reglas.push(new Regla_("Exp -> DIVSIGN Lexp","exp.val=array(DIVSIGN.val, Lexp.val)"));
		
			var exp = new NodoXML("Exp","Exp",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val = new NodoXML($$[$0-1],"Exp",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			exp.addHijo(val);
			exp.addHijo($$[$0]);
			this.$ = exp;
		
break;
case 3:

			reglas.push(new Regla_("Exp -> Lexp"," Exp.val = Lexp.val"));
			
			var exp = new NodoXML("Exp","Exp",_$[$0].first_line+1,_$[$0].first_column+1);			
			exp.addHijo($$[$0]);
			this.$ = exp;
		
break;
case 4:
        
			errores.push(new Error_(_$[$0].first_line, _$[$0].first_column, 'Sintactico','Valor inesperado ' + yytext));
			
			var init = new NodoXML("Init","Init",_$[$0].first_line+1,_$[$0].first_column+1);			
			return init;
		
break;
case 5:

			reglas.push(new Regla_("Lexp -> Lexp ORSIGN DIVSIGN Syntfin"," Lexp.val = array( Lexp.val,ORSIGN.val,DIVSIGN.val,Syntfin.val)"));
		
			var lexp = new NodoXML("Lexp","Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			var val2 = new NodoXML($$[$0-1],"Lexp",_$[$0-3].first_line+1,_$[$0-3].first_column+1);
			lexp.addHijo($$[$0-3]);
			lexp.addHijo(val1);
			lexp.addHijo(val2);
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 6:

			reglas.push(new Regla_("Lexp -> Lexp DIVSIGN Syntfin"," Lexp.val = array( Lexp.val,DIVSIGN.val,Syntfin.val)"));
			
			var lexp = new NodoXML("Lexp","Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);			
			lexp.addHijo($$[$0-2]);
			lexp.addHijo(val1);			
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 7:

			
			reglas.push(new Regla_("Lexp -> Syntfin"," Lexp.val = Syntfin.val"));
			
			var lexp = new NodoXML("Lexp","Lexp",_$[$0].first_line+1,_$[$0].first_column+1);			
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 8:

					reglas.push(new Regla_("Syntfin -> Fin"," Syntfin.val = Fin.val"));
					
					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0].first_line+1,_$[$0].first_column+1);		
					syntfin.addHijo($$[$0]);
					this.$ = syntfin;
				
break;
case 9:

					reglas.push(new Regla_("Syntfin -> @ Valor Opc"," Syntfin.val = array( @, valor.val, opc.val)"));
					
					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
					var val1 = new NodoXML($$[$0-2],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0-1]);			
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 10:

					reglas.push(new Regla_("Syntfin -> Preservada :: Fin"," Syntfin.val = array( Preservada.val, ::, Fin.val)"));
					
					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
					var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);													
					syntfin.addHijo($$[$0-2]);			
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 11:

					reglas.push(new Regla_("Syntfin -> @ Preservada Opc"," Syntfin.val = array(@, Preservada.val, Opc.val)"));
					
					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
					var val1 = new NodoXML($$[$0-2],"Syntfin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0-1]);			
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 12:

					reglas.push(new Regla_("Syntfin ->@ *"," Syntfin.val = @*"));
					
					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
					var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
					var val2 = new NodoXML($$[$0],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
					syntfin.addHijo(val1);
					syntfin.addHijo(val2);					
					this.$ = syntfin;
				
break;
case 13:

			reglas.push(new Regla_("Fin ->  Valor Opc "," Fin.val = array(Valor.val,Opc.val)"));
		
			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);			
			fin.addHijo($$[$0-1]);			
			fin.addHijo($$[$0]);										
			this.$ = fin;
		
break;
case 14:

			reglas.push(new Regla_("Fin ->  DIR Opc "," Fin.val = array(Dir.val,Opc.val)"));
		
			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
			fin.addHijo(val1);		
			fin.addHijo($$[$0]);					
			this.$ = fin;
		
break;
case 15:

			reglas.push(new Regla_("Fin ->  TEXT  (   ) "," Fin.val = TEXT.val"));
		
			var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 16:

			reglas.push(new Regla_("Fin ->  NODE  (   ) "," Fin.val = NODE.val"));
			var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 17:

			reglas.push(new Regla_("Fin ->  POSITION  (   ) "," Fin.val = POSITION.val"));
			var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 18:
	
			reglas.push(new Regla_("Fin ->  LAST  (   ) "," Fin.val = LAST.val"));
			
			var fin = new NodoXML("Fin","Fin",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-2].first_line+1,_$[$0-2].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 19:

			reglas.push(new Regla_("Fin -> Preservada Opc "," Fin.val = array(Preservada.val,Opc.val)"));
			
			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);			
			fin.addHijo($$[$0-1]);
			fin.addHijo($$[$0]);												
			this.$ = fin;
		
break;
case 20:

		
			reglas.push(new Regla_("Fin -> '*' Opc "," Fin.val = array(*,Opc.val)"));
			
			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
			fin.addHijo(val1);	
			fin.addHijo($$[$0]);				
			this.$ = fin;
		
break;
case 21:

				reglas.push(new Regla_("Valor -> ID"," Valor.val = ID.val"));
			
				var val = new NodoXML($$[$0],"Valor",_$[$0].first_line+1,_$[$0].first_column+1);				
				this.$ = val;
			
break;
case 22:

				reglas.push(new Regla_("Valor -> NUMBER"," Valor.val = NUMBER.val"));
				
				var val = new NodoXML($$[$0],"Valor",_$[$0].first_line+1,_$[$0].first_column+1);				
				this.$ = val;
			
break;
case 23:

				reglas.push(new Regla_("Valor -> STRING"," Valor.val = STRING.val"));
				
				var val = new NodoXML($$[$0],"Valor",_$[$0].first_line+1,_$[$0].first_column+1);				
				this.$ = val;
			
break;
case 24:

				reglas.push(new Regla_("Valor -> STRING2"," Valor.val = STRING2.val"));
				
				var val = new NodoXML($$[$0],"Valor",_$[$0].first_line+1,_$[$0].first_column+1);				
				this.$ = val;
			
break;
case 25:

				reglas.push(new Regla_("Valor -> DECIMAL"," Valor.val = DECIMAL.val"));
				
				var val = new NodoXML($$[$0],"Valor",_$[$0].first_line+1,_$[$0].first_column+1);				
				this.$ = val;
			
break;
case 26:

						reglas.push(new Regla_("Preservada -> CHILD"," Preservada.val = CHILD.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 27:

						reglas.push(new Regla_("Preservada -> DESCENDANT"," Preservada.val = DESCENDANT.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 28:

						reglas.push(new Regla_("Preservada -> ANCESTOR"," Preservada.val = ANCESTOR.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 29:

						reglas.push(new Regla_("Preservada -> PRECEDING"," Preservada.val = PRECEDING.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 30:

						reglas.push(new Regla_("Preservada -> FOLLOWING"," Preservada.val = FOLLOWING.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 31:

						reglas.push(new Regla_("Preservada -> NAMESPACE"," Preservada.val = NAMESPACE.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 32:

						reglas.push(new Regla_("Preservada -> SELF"," Preservada.val = SELF.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 33:

						reglas.push(new Regla_("Preservada -> PARENT"," Preservada.val = PARENT.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 34:

						reglas.push(new Regla_("Preservada -> ATTR"," Preservada.val = ATTR.val"));
						
						var val = new NodoXML($$[$0],"Axes",_$[$0].first_line+1,_$[$0].first_column+1);				
						this.$ = val;
					
break;
case 35:

				reglas.push(new Regla_("Opc -> LPredicado"," Opc.val = LPredicado.val"));
				
				var opc = new NodoXML("Opc","Opc",_$[$0].first_line+1,_$[$0].first_column+1);				
				opc.addHijo($$[$0]);				
				this.$ = opc;
			
break;
case 36:

				reglas.push(new Regla_("Opc -> epsilon"," epsilon"));
				
				var opc = new NodoXML("Opc","Opc",_$[$0].first_line+1,_$[$0].first_column+1);									
				this.$ = opc;
			
break;
case 37:

							reglas.push(new Regla_("LPredicado ->LPredicado Predicado"," LPredicado.val =array(LPredicado.val,Predicado.val)"));
							
							var lpredicado = new NodoXML("LPredicado","LPredicado",_$[$0-1].first_line+1,_$[$0-1].first_column+1);				
							lpredicado.addHijo($$[$0-1]);	
							lpredicado.addHijo($$[$0]);
							this.$ = lpredicado;
						
break;
case 38:

							reglas.push(new Regla_("LPredicado -> Predicado"," LPredicado.val = Predicado.val"));
							
							var lpredicado = new NodoXML("LPredicado","LPredicado",_$[$0].first_line+1,_$[$0].first_column+1);				
							lpredicado.addHijo($$[$0]);
							this.$ = lpredicado;
						
break;
case 39:

			
			
				reglas.push(new Regla_("Predicado ->[ ExprLogica]"," Predicado.val =ExprLogica.val"));
			
				var predicado = new NodoXML("Predicado","Predicado",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-2],"Predicado",_$[$0-2].first_line+1,_$[$0-2].first_column+1);	
				var val2 = new NodoXML($$[$0],"Predicado",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				predicado.addHijo(val1);	
				predicado.addHijo($$[$0-1]);	
				predicado.addHijo(val2);					
				this.$ = predicado;
			
break;
case 40:

				reglas.push(new Regla_("ExprLogica ->Expr <= Expr"," ExprLogica.val =array(Expr1.val,<=,Expr2.val)"));
				
				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				exprLogica.addHijo($$[$0-2]);	
				exprLogica.addHijo(val1);	
				exprLogica.addHijo($$[$0]);					
				this.$ = exprLogica;
			
break;
case 41:

				reglas.push(new Regla_("ExprLogica ->Expr >= Expr"," ExprLogica.val =array(Expr1.val,>=,Expr2.val)"));
				
				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				exprLogica.addHijo($$[$0-2]);	
				exprLogica.addHijo(val1);	
				exprLogica.addHijo($$[$0]);					
				this.$ = exprLogica;
			
break;
case 42:

				reglas.push(new Regla_("ExprLogica ->Expr = Expr"," ExprLogica.val =array(Expr1.val,=,Expr2.val)"));
				
				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				exprLogica.addHijo($$[$0-2]);	
				exprLogica.addHijo(val1);	
				exprLogica.addHijo($$[$0]);					
				this.$ = exprLogica;
			
break;
case 43:
	
				reglas.push(new Regla_("ExprLogica ->Expr != Expr"," ExprLogica.val =array(Expr1.val,!=,Expr2.val)"));
				
				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				exprLogica.addHijo($$[$0-2]);	
				exprLogica.addHijo(val1);	
				exprLogica.addHijo($$[$0]);					
				this.$ = exprLogica;
			
break;
case 44:

				reglas.push(new Regla_("ExprLogica ->Expr > Expr"," ExprLogica.val =array(Expr1.val,>,Expr2.val)"));
			
				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				exprLogica.addHijo($$[$0-2]);	
				exprLogica.addHijo(val1);	
				exprLogica.addHijo($$[$0]);					
				this.$ = exprLogica;
			
break;
case 45:

				reglas.push(new Regla_("ExprLogica ->Expr <Expr"," ExprLogica.val =array(Expr1.val,<,Expr2.val)"));
				
				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				exprLogica.addHijo($$[$0-2]);	
				exprLogica.addHijo(val1);	
				exprLogica.addHijo($$[$0]);					
				this.$ = exprLogica;
			
break;
case 46:

				reglas.push(new Regla_("ExprLogica ->Expr <= Expr"," ExprLogica.val =Expr.val"));
			
				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$0].first_line+1,_$[$0].first_column+1);
				exprLogica.addHijo($$[$0]);					
				this.$ = exprLogica;
			
break;
case 47:

				reglas.push(new Regla_("Expr ->Expr + Expr"," Expr.val =array(Expr1.val,+,Expr2.val)"));
			
				var expr = new NodoXML("Expr","Expr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				expr.addHijo($$[$0-2]);	
				expr.addHijo(val1);	
				expr.addHijo($$[$0]);					
				this.$ = expr;
			
break;
case 48:

				reglas.push(new Regla_("Expr ->Expr - Expr"," Expr.val =array(Expr1.val,-,Expr2.val)"));
				
				var expr = new NodoXML("Expr","Expr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				expr.addHijo($$[$0-2]);	
				expr.addHijo(val1);	
				expr.addHijo($$[$0]);					
				this.$ = expr;
			
break;
case 49:

				reglas.push(new Regla_("Expr ->Expr * Expr"," Expr.val =array(Expr1.val,*,Expr2.val)"));
				
				var expr = new NodoXML("Expr","Expr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				expr.addHijo($$[$0-2]);	
				expr.addHijo(val1);	
				expr.addHijo($$[$0]);					
				this.$ = expr;
			
break;
case 50:

				reglas.push(new Regla_("Expr ->Expr DIV Expr"," Expr.val =array(Expr1.val,DIV,Expr2.val)"));
				
				var expr = new NodoXML("Expr","Expr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				expr.addHijo($$[$0-2]);	
				expr.addHijo(val1);	
				expr.addHijo($$[$0]);					
				this.$ = expr;
			
break;
case 51:

				reglas.push(new Regla_("Expr ->Expr MOD Expr"," Expr.val =array(Expr1.val,MOD,Expr2.val)"));
				
				var expr = new NodoXML("Expr","Expr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				expr.addHijo($$[$0-2]);	
				expr.addHijo(val1);	
				expr.addHijo($$[$0]);					
				this.$ = expr;
			
break;
case 52:

				reglas.push(new Regla_("Expr ->Expr OR Expr"," Expr.val =array(Expr1.val,OR,Expr2.val)"));
				
				var expr = new NodoXML("Expr","Expr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				expr.addHijo($$[$0-2]);	
				expr.addHijo(val1);	
				expr.addHijo($$[$0]);					
				this.$ = expr;
			
break;
case 53:

				reglas.push(new Regla_("Expr ->Expr AND Expr"," Expr.val =array(Expr1.val,AND,Expr2.val)"));
				
				var expr = new NodoXML("Expr","Expr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				expr.addHijo($$[$0-2]);	
				expr.addHijo(val1);	
				expr.addHijo($$[$0]);					
				this.$ = expr;
			
break;
case 54:

				reglas.push(new Regla_("Expr ->( Expr )"," Expr.val =Exp.val"));
			
				var expr = new NodoXML("Expr","Expr",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
				var val1 = new NodoXML($$[$0-2],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);					
				var val2 = new NodoXML($$[$0],"Operador",_$[$0-2].first_line+1,_$[$0-2].first_column+1);										
				expr.addHijo(val1);	
				expr.addHijo($$[$0-1]);	
				expr.addHijo(val2);					
				this.$ = expr;
			
break;
case 55:

			reglas.push(new Regla_("Expr ->Expr"," Expr.val =Exp.val"));
		 
			var expr = new NodoXML("Expr","Expr",_$[$0].first_line+1,_$[$0].first_column+1);
			expr.addHijo($$[$0]);
			this.$ = expr;
		 
break;
}
},
table: [{2:$V0,3:1,4:2,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm},{1:[3]},{5:[1,31]},{7:32,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm},o($Vn,[2,3],{6:$Vo,8:$Vp}),o($Vn,[2,4]),o($Vq,[2,7]),o($Vq,[2,8]),{12:35,14:36,16:[1,37],24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm},o($Vq,$Vr,{13:39,38:40,39:41,15:[1,38],40:$Vs}),o($Vq,$Vr,{38:40,39:41,13:43,40:$Vs}),o($Vq,$Vr,{38:40,39:41,13:44,40:$Vs}),{19:[1,45]},{19:[1,46]},{19:[1,47]},{19:[1,48]},o($Vq,$Vr,{38:40,39:41,13:49,40:$Vs}),o($Vt,[2,26]),o($Vt,[2,27]),o($Vt,[2,28]),o($Vt,[2,29]),o($Vt,[2,30]),o($Vt,[2,31]),o($Vt,[2,32]),o($Vt,[2,33]),o($Vt,[2,34]),o($Vu,[2,21]),o($Vu,[2,22]),o($Vu,[2,23]),o($Vu,[2,24]),o($Vu,[2,25]),{1:[2,1]},o($Vn,[2,2],{6:$Vo,8:$Vp}),{6:[1,50]},{9:51,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm},o($Vq,$Vr,{38:40,39:41,13:52,40:$Vs}),o($Vq,$Vr,{38:40,39:41,13:53,40:$Vs}),o($Vq,[2,12]),{10:54,12:10,14:55,16:$V3,17:$V4,18:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm},o($Vq,[2,19]),o($Vq,[2,35],{39:56,40:$Vs}),o($Vu,[2,38]),{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,41:57,43:58},o($Vq,[2,13]),o($Vq,[2,14]),{20:[1,61]},{20:[1,62]},{20:[1,63]},{20:[1,64]},o($Vq,[2,20]),{9:65,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm},o($Vq,[2,6]),o($Vq,[2,9]),o($Vq,[2,11]),o($Vq,[2,10]),o($Vq,$Vr,{13:39,38:40,39:41,40:$Vs}),o($Vu,[2,37]),{42:[1,66]},{16:$Vw,42:[2,46],44:[1,67],45:[1,68],46:[1,69],47:[1,70],48:[1,71],49:[1,72],50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:80},o($VD,[2,55]),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,5]),o($Vu,[2,39]),{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:81},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:82},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:83},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:84},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:85},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:86},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:87},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:88},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:89},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:90},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:91},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:92},{2:$V0,4:60,6:$V1,7:4,9:6,10:7,11:$V2,12:10,14:9,16:$V3,17:$V4,18:$V5,19:$Vv,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,43:93},{16:$Vw,20:[1,94],50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC},{16:$Vw,42:[2,40],50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC},{16:$Vw,42:[2,41],50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC},{16:$Vw,42:[2,42],50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC},{16:$Vw,42:[2,43],50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC},{16:$Vw,42:[2,44],50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC},{16:$Vw,42:[2,45],50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC},o($VE,[2,47],{16:$Vw,52:$Vz,53:$VA}),o($VE,[2,48],{16:$Vw,52:$Vz,53:$VA}),o($VD,[2,49]),o($VD,[2,50]),o($VD,[2,51]),o([20,42,44,45,46,47,48,49,54],[2,52],{16:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VC}),o([20,42,44,45,46,47,48,49,54,55],[2,53],{16:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VD,[2,54])],
defaultActions: {31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let valDeclaration = '';
    let valTag = '';
    let valInside = '';
	
    const {Error_} = require('../Error');
    const {errores} = require('../Errores');
	
	const {Regla_} = require('../Regla');
    const {reglas} = require('../Reglas');
	
    const {NodoXML} = require('../Nodes/NodoXml')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 28
break;
case 2:return 25
break;
case 3:return 26
break;
case 4:return 27
break;
case 5:return 6
break;
case 6:return 17
break;
case 7:return 31
break;
case 8:return 33
break;
case 9:return 32
break;
case 10:return 8
break;
case 11:return 11
break;
case 12:return 16
break;
case 13:return 15
break;
case 14:return 51
break;
case 15:return 50
break;
case 16:return 44
break;
case 17:return 45
break;
case 18:return 49
break;
case 19:return 48
break;
case 20:return 47
break;
case 21:return 46
break;
case 22:return 54
break;
case 23:return 55
break;
case 24:return 53
break;
case 25:return 52
break;
case 26:return 19
break;
case 27:return 20 
break;
case 28:return 40
break;
case 29:return 42
break;
case 30:return 29
break;
case 31:return 37
break;
case 32:return 30
break;
case 33:return 34
break;
case 34:return 36
break;
case 35:return 35
break;
case 36:return 18
break;
case 37:return 23
break;
case 38:return 22
break;
case 39:return 21
break;
case 40:return 24;
break;
case 41:return 5
break;
case 42: errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','Valor inesperado ' + yy_.yytext)); console.error(errores); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:((\/)(\/)?))/,/^(?:((\.)(\.)?))/,/^(?:((ancestor)(-or-self)?))/,/^(?:((following)(-sibling)?))/,/^(?:((preceding)(-sibling)?))/,/^(?:((\|)(\|)?))/,/^(?:@)/,/^(?:\*)/,/^(?:::)/,/^(?:-)/,/^(?:\+)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:descendant\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xPathAsc;
exports.Parser = xPathAsc.Parser;
exports.parse = function () { return xPathAsc.parse.apply(xPathAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}