/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xPathAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,7],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,22],$Vk=[1,23],$Vl=[5,23,41,43,44,45,46,47,48,49,50,51,52,53,54],$Vm=[1,32],$Vn=[1,31],$Vo=[5,6,8,23,41,43,44,45,46,47,48,49,50,51,52,53,54],$Vp=[2,33],$Vq=[1,39],$Vr=[5,6,8,15,23,39,41,43,44,45,46,47,48,49,50,51,52,53,54],$Vs=[5,6,8,23,39,41,43,44,45,46,47,48,49,50,51,52,53,54],$Vt=[1,71],$Vu=[1,69],$Vv=[1,70],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[23,41,43,44,45,46,47,48,49,50,51,52,53,54],$VB=[41,43,44,45,46,47,48,49,50,53,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Exp":4,"EOF":5,"DIVSIGN":6,"Lexp":7,"ORSIGN":8,"Syntfin":9,"Fin":10,"@":11,"Valor":12,"Opc":13,"Preservada":14,"::":15,"DIR":16,"TEXT":17,"(":18,")":19,"NODE":20,"POSITION":21,"LAST":22,"*":23,"ID":24,"NUMBER":25,"STRING":26,"STRING2":27,"DECIMAL":28,"CHILD":29,"DESCENDANT":30,"ANCESTOR":31,"PRECEDING":32,"FOLLOWING":33,"NAMESPACE":34,"SELF":35,"PARENT":36,"LPredicado":37,"Predicado":38,"[":39,"ExprLogica":40,"]":41,"Expr":42,"<=":43,">=":44,"=":45,"!=":46,">":47,"<":48,"+":49,"-":50,"DIV":51,"MOD":52,"OR":53,"AND":54,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"DIVSIGN",8:"ORSIGN",11:"@",15:"::",16:"DIR",17:"TEXT",18:"(",19:")",20:"NODE",21:"POSITION",22:"LAST",23:"*",24:"ID",25:"NUMBER",26:"STRING",27:"STRING2",28:"DECIMAL",29:"CHILD",30:"DESCENDANT",31:"ANCESTOR",32:"PRECEDING",33:"FOLLOWING",34:"NAMESPACE",35:"SELF",36:"PARENT",39:"[",41:"]",43:"<=",44:">=",45:"=",46:"!=",47:">",48:"<",49:"+",50:"-",51:"DIV",52:"MOD",53:"OR",54:"AND"},
productions_: [0,[3,2],[4,2],[4,1],[7,4],[7,3],[7,1],[9,1],[9,3],[9,3],[9,3],[10,2],[10,2],[10,3],[10,3],[10,3],[10,3],[10,2],[10,2],[12,1],[12,1],[12,1],[12,1],[12,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[13,1],[13,0],[37,2],[37,1],[38,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,1],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			var init = new NodoXML("Init","Init",_$[$0].first_line+1,_$[$0].first_column+1);
			init.addHijo($$[$0-1]);
			return init;
		
break;
case 2:

			var exp = new NodoXML("Exp","Exp",_$[$0].first_line+1,_$[$0].first_column+1);
			var val = new NodoXML($$[$0-1],"Exp",_$[$0].first_line+1,_$[$0].first_column+1);
			exp.addHijo(val);
			exp.addHijo($$[$0]);
			this.$ = exp;
		
break;
case 3:

			var exp = new NodoXML("Exp","Exp",_$[$01].first_line+1,_$[$01].first_column+1);			
			exp.addHijo($$[$0]);
			this.$ = exp;
		
break;
case 4:

			var lexp = new NodoXML("Lexp","Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			var val2 = new NodoXML($$[$0-1],"Lexp",_$[$0-2].first_line+1,_$[$0-2].first_column+1);
			lexp.addHijo($$[$0-3]);
			lexp.addHijo(val1);
			lexp.addHijo(val2);
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 5:

			var lexp = new NodoXML("Lexp","Lexp",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Lexp",_$[$0-1].first_line+1,_$[$0-1].first_column+1);			
			lexp.addHijo($$[$0-2]);
			lexp.addHijo(val1);			
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 6:

			var lexp = new NodoXML("Lexp","Lexp",_$[$01].first_line+1,_$[$01].first_column+1);			
			lexp.addHijo($$[$0]);
			this.$ = lexp;
		
break;
case 7:

					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$01].first_line+1,_$[$01].first_column+1);		
					syntfin.addHijo($$[$0]);
					this.$ = syntfin;
				
break;
case 8: case 10:

					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
					var val1 = new NodoXML($$[$0-2],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0-1]);			
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 9:

					var syntfin = new NodoXML("Syntfin","Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
					var val1 = new NodoXML($$[$0-1],"Syntfin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);													
					syntfin.addHijo($$[$0-2]);			
					syntfin.addHijo(val1);
					syntfin.addHijo($$[$0]);										
					this.$ = syntfin;
				
break;
case 11:

			var fin = new NodoXML("Fin","Fin",_$[$0].first_line+1,_$[$0].first_column+1);			
			fin.addHijo($$[$0-1]);			
			fin.addHijo($$[$0]);										
			this.$ = fin;
		
break;
case 12:

			var fin = new NodoXML("Fin","Fin",_$[$0].first_line+1,_$[$0].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Fin",_$[$0].first_line+1,_$[$0].first_column+1);								
			fin.addHijo(val1);
			fin.addHijo($$[$0]);												
			this.$ = fin;
		
break;
case 13: case 14: case 15: case 16:

			var fin = new NodoXML("Fin","Fin",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
			var val1 = new NodoXML($$[$0-2],"Funcion",_$[$0-1].first_line+1,_$[$0-1].first_column+1);								
			fin.addHijo(val1);									
			this.$ = fin;
		
break;
case 17:

			var fin = new NodoXML("Fin","Fin",_$[$0].first_line+1,_$[$0].first_column+1);			
			fin.addHijo($$[$0-1]);
			fin.addHijo($$[$0]);												
			this.$ = fin;
		
break;
case 18:

			var fin = new NodoXML("Fin","Fin",_$[$0].first_line+1,_$[$0].first_column+1);
			var val1 = new NodoXML($$[$0-1],"Fin",_$[$0].first_line+1,_$[$0].first_column+1);								
			fin.addHijo(val1);	
			fin.addHijo($$[$0]);				
			this.$ = fin;
		
break;
case 19: case 20: case 21: case 22: case 23:

				var val = new NodoXML($$[$0],"Valor",_$[$01].first_line+1,_$[$01].first_column+1);				
				this.$ = val;
			
break;
case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31:

						var val = new NodoXML($$[$0],"Axes",_$[$01].first_line+1,_$[$01].first_column+1);				
						this.$ = val;
					
break;
case 32:

				var opc = new NodoXML("Opc","Opc",_$[$01].first_line+1,_$[$01].first_column+1);				
				opc.addHijo($$[$0]);				
				this.$ = opc;
			
break;
case 33:

				var opc = new NodoXML("Opc","Opc",_$[$01].first_line+1,_$[$01].first_column+1);									
				this.$ = opc;
		
break;
case 34:

							var lpredicado = new NodoXML("LPredicado","LPredicado",_$[$0].first_line+1,_$[$0].first_column+1);				
							lpredicado.addHijo($$[$0-1]);	
							lpredicado.addHijo($$[$0]);
							this.$ = lpredicado;
						
break;
case 35:

							var lpredicado = new NodoXML("LPredicado","LPredicado",_$[$01].first_line+1,_$[$01].first_column+1);				
							lpredicado.addHijo($$[$0]);
							this.$ = lpredicado;
						
break;
case 36:

				var predicado = new NodoXML("Predicado","Predicado",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
				var val1 = new NodoXML($$[$0-2],"Predicado",_$[$0-1].first_line+1,_$[$0-1].first_column+1);	
				var val2 = new NodoXML($$[$0],"Predicado",_$[$0-1].first_line+1,_$[$0-1].first_column+1);					
				predicado.addHijo(val1);	
				predicado.addHijo($$[$0-1]);	
				predicado.addHijo(val2);					
				this.$ = predicado;
			
break;
case 37: case 38: case 39: case 40: case 41: case 42:

				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-1].first_line+1,_$[$0-1].first_column+1);					
				exprLogica.addHijo($$[$0-2]);	
				exprLogica.addHijo(val1);	
				exprLogica.addHijo($$[$0-1]);					
				this.$ = exprLogica;
			
break;
case 43:

				var exprLogica = new NodoXML("ExprLogica","ExprLogica",_$[$01].first_line+1,_$[$01].first_column+1);
				exprLogica.addHijo($$[$0]);					
				this.$ = exprLogica;
			
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 50:

				var expr = new NodoXML("Expr","Expr",_$[$0-1].first_line+1,_$[$0-1].first_column+1);
				var val1 = new NodoXML($$[$0-1],"Operador",_$[$0-1].first_line+1,_$[$0-1].first_column+1);					
				expr.addHijo($$[$0-2]);	
				expr.addHijo(val1);	
				expr.addHijo($$[$0-1]);					
				this.$ = expr;
			
break;
case 51:

			var Expr = new NodoXML("Expr","Expr",_$[$01].first_line+1,_$[$01].first_column+1);
			Expr.addHijo($$[$0]);
			this.$ = Expr;
		 
break;
}
},
table: [{3:1,4:2,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk},{1:[3]},{5:[1,29]},{7:30,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk},o($Vl,[2,3],{6:$Vm,8:$Vn}),o($Vo,[2,6]),o($Vo,[2,7]),{12:33,14:34,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk},o($Vo,$Vp,{13:36,37:37,38:38,15:[1,35],39:$Vq}),o($Vo,$Vp,{37:37,38:38,13:40,39:$Vq}),o($Vo,$Vp,{37:37,38:38,13:41,39:$Vq}),{18:[1,42]},{18:[1,43]},{18:[1,44]},{18:[1,45]},o($Vo,$Vp,{37:37,38:38,13:46,39:$Vq}),o($Vr,[2,24]),o($Vr,[2,25]),o($Vr,[2,26]),o($Vr,[2,27]),o($Vr,[2,28]),o($Vr,[2,29]),o($Vr,[2,30]),o($Vr,[2,31]),o($Vs,[2,19]),o($Vs,[2,20]),o($Vs,[2,21]),o($Vs,[2,22]),o($Vs,[2,23]),{1:[2,1]},o($Vl,[2,2],{6:$Vm,8:$Vn}),{6:[1,47]},{9:48,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk},o($Vo,$Vp,{37:37,38:38,13:49,39:$Vq}),o($Vo,$Vp,{37:37,38:38,13:50,39:$Vq}),{10:51,12:9,14:52,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk},o($Vo,[2,17]),o($Vo,[2,32],{38:53,39:$Vq}),o($Vs,[2,35]),{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,40:54,42:55},o($Vo,[2,11]),o($Vo,[2,12]),{19:[1,57]},{19:[1,58]},{19:[1,59]},{19:[1,60]},o($Vo,[2,18]),{9:61,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk},o($Vo,[2,5]),o($Vo,[2,8]),o($Vo,[2,10]),o($Vo,[2,9]),o($Vo,$Vp,{13:36,37:37,38:38,39:$Vq}),o($Vs,[2,34]),{41:[1,62]},{23:$Vt,41:[2,43],43:[1,63],44:[1,64],45:[1,65],46:[1,66],47:[1,67],48:[1,68],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz},o($VA,[2,51]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,4]),o($Vs,[2,36]),{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:76},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:77},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:78},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:79},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:80},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:81},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:82},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:83},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:84},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:85},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:86},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:87},{4:56,6:$V0,7:4,9:5,10:6,11:$V1,12:9,14:8,16:$V2,17:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:$Vk,42:88},{23:$Vt,41:[2,37],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz},{23:$Vt,41:[2,38],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz},{23:$Vt,41:[2,39],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz},{23:$Vt,41:[2,40],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz},{23:$Vt,41:[2,41],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz},{23:$Vt,41:[2,42],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz},o($VB,[2,44],{23:$Vt,51:$Vw,52:$Vx}),o($VB,[2,45],{23:$Vt,51:$Vw,52:$Vx}),o($VA,[2,46]),o($VA,[2,47]),o($VA,[2,48]),o([41,43,44,45,46,47,48,53],[2,49],{23:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vz}),o([41,43,44,45,46,47,48,53,54],[2,50],{23:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx})],
defaultActions: {29:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    let valDeclaration = '';
    let valTag = '';
    let valInside = '';

    const {Error_} = require('../Error');
    const {errores} = require('../Errores');
    const {NodoXML} = require('../Nodes/NodoXml')

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 28
break;
case 2:return 25
break;
case 3:return 26
break;
case 4:return 27
break;
case 5:return 6
break;
case 6:return 16
break;
case 7:return 31
break;
case 8:return 33
break;
case 9:return 32
break;
case 10:return 8
break;
case 11:return 11
break;
case 12:return 23
break;
case 13:return 15
break;
case 14:return 50
break;
case 15:return 49
break;
case 16:return 43
break;
case 17:return 44
break;
case 18:return 48
break;
case 19:return 47
break;
case 20:return 46
break;
case 21:return 45
break;
case 22:return 53
break;
case 23:return 54
break;
case 24:return 52
break;
case 25:return 51
break;
case 26:return 18
break;
case 27:return 19 
break;
case 28:return 39
break;
case 29:return 41
break;
case 30:return 29
break;
case 31:return 'ATTR'
break;
case 32:return 30
break;
case 33:return 34
break;
case 34:return 36
break;
case 35:return 35
break;
case 36:return 17
break;
case 37:return 22
break;
case 38:return 21
break;
case 39:return 20
break;
case 40:return 24;
break;
case 41:return 5
break;
case 42: errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','Valor inesperado ' + yy_.yytext)); console.error(errores); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']*[\'])))/,/^(?:((\/)(\/)?))/,/^(?:((\.)(\.)?))/,/^(?:((ancestor)(-or-self)?))/,/^(?:((following)(-sibling)?))/,/^(?:((preceding)(-sibling)?))/,/^(?:((\|)(\|)?))/,/^(?:@)/,/^(?:\*)/,/^(?:::)/,/^(?:-)/,/^(?:\+)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:descendant\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xPathAsc;
exports.Parser = xPathAsc.Parser;
exports.parse = function () { return xPathAsc.parse.apply(xPathAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}