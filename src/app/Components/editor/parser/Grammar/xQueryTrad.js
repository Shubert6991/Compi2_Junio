/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQueryTrad = (function () {
  var o = function (k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o;
    },
    $V0 = [1, 4],
    $V1 = [1, 23],
    $V2 = [1, 15],
    $V3 = [1, 17],
    $V4 = [1, 16],
    $V5 = [1, 18],
    $V6 = [1, 19],
    $V7 = [1, 20],
    $V8 = [1, 11],
    $V9 = [1, 14],
    $Va = [1, 13],
    $Vb = [1, 12],
    $Vc = [1, 22],
    $Vd = [5, 14, 16, 19, 39, 43, 44, 45, 46, 58, 62, 75, 83, 84, 94],
    $Ve = [5, 14, 16, 19, 39, 43, 44, 45, 46, 58, 62, 65, 75, 83, 84, 94],
    $Vf = [1, 31],
    $Vg = [1, 33],
    $Vh = [1, 37],
    $Vi = [1, 49],
    $Vj = [1, 40],
    $Vk = [1, 41],
    $Vl = [1, 42],
    $Vm = [1, 43],
    $Vn = [1, 44],
    $Vo = [1, 45],
    $Vp = [1, 46],
    $Vq = [1, 47],
    $Vr = [1, 48],
    $Vs = [1, 50],
    $Vt = [1, 51],
    $Vu = [1, 52],
    $Vv = [1, 53],
    $Vw = [1, 54],
    $Vx = [1, 55],
    $Vy = [1, 56],
    $Vz = [1, 57],
    $VA = [1, 58],
    $VB = [
      5, 14, 16, 19, 20, 23, 25, 32, 39, 43, 44, 45, 46, 56, 57, 58, 62, 65, 74,
      75, 77, 82, 83, 84, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
      111, 112, 114, 115, 116, 117, 118, 119,
    ],
    $VC = [74, 77, 83],
    $VD = [
      5, 14, 16, 19, 39, 43, 44, 45, 46, 58, 62, 65, 74, 75, 77, 83, 84, 94,
    ],
    $VE = [1, 71],
    $VF = [1, 72],
    $VG = [1, 73],
    $VH = [1, 74],
    $VI = [1, 75],
    $VJ = [1, 76],
    $VK = [1, 77],
    $VL = [1, 78],
    $VM = [1, 79],
    $VN = [1, 80],
    $VO = [1, 81],
    $VP = [1, 82],
    $VQ = [
      5, 14, 16, 19, 20, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75, 77, 82, 83,
      84, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
    ],
    $VR = [1, 85],
    $VS = [1, 83],
    $VT = [1, 84],
    $VU = [1, 86],
    $VV = [1, 87],
    $VW = [1, 89],
    $VX = [
      5, 14, 16, 19, 20, 32, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75, 77, 82,
      83, 84, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
      114, 115, 116, 117, 118, 119,
    ],
    $VY = [1, 93],
    $VZ = [1, 92],
    $V_ = [
      5, 14, 16, 19, 20, 23, 25, 32, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75,
      77, 82, 83, 84, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
      112, 114, 115, 116, 117, 118, 119,
    ],
    $V$ = [2, 54],
    $V01 = [1, 99],
    $V11 = [
      5, 14, 16, 19, 20, 23, 25, 31, 32, 39, 43, 44, 45, 46, 56, 57, 58, 62, 65,
      74, 75, 77, 82, 83, 84, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109,
      110, 111, 112, 114, 115, 116, 117, 118, 119,
    ],
    $V21 = [1, 120],
    $V31 = [58, 74, 75, 77, 83],
    $V41 = [1, 126],
    $V51 = [1, 147],
    $V61 = [20, 58, 74, 75, 77, 83],
    $V71 = [
      5, 14, 16, 19, 20, 39, 43, 44, 45, 46, 58, 62, 65, 74, 75, 77, 83, 84, 94,
    ],
    $V81 = [
      5, 14, 16, 19, 20, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75, 77, 82, 83,
      84, 94, 101, 102, 103, 104, 105, 106,
    ],
    $V91 = [
      5, 14, 16, 19, 20, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75, 77, 82, 83,
      84, 94, 103, 104,
    ],
    $Va1 = [
      5, 14, 16, 19, 20, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75, 77, 82, 83,
      84, 94, 101, 102, 103, 104, 105, 106, 107, 108,
    ],
    $Vb1 = [
      5, 14, 16, 19, 20, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75, 77, 82, 83,
      84, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114,
      115, 118, 119,
    ],
    $Vc1 = [19, 20],
    $Vd1 = [1, 225],
    $Ve1 = [1, 226],
    $Vf1 = [1, 227],
    $Vg1 = [1, 228],
    $Vh1 = [1, 229],
    $Vi1 = [19, 20, 93];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      error: 2,
      Init: 3,
      LExpresiones: 4,
      EOF: 5,
      Instrucciones: 6,
      For: 7,
      Return: 8,
      Let: 9,
      If: 10,
      Valor: 11,
      Function: 12,
      LlamadaFuncion: 13,
      LOCAL: 14,
      ":": 15,
      ID: 16,
      "(": 17,
      LParams: 18,
      ")": 19,
      ",": 20,
      ExprLogica: 21,
      Exp: 22,
      DIVSIGN: 23,
      Lexp: 24,
      ORSIGN: 25,
      Syntfin: 26,
      Fin: 27,
      "@": 28,
      Opc: 29,
      Preservada: 30,
      "::": 31,
      "*": 32,
      DIR: 33,
      TEXT: 34,
      NODE: 35,
      POSITION: 36,
      LAST: 37,
      DOC: 38,
      STRING: 39,
      DATA: 40,
      UPPERCASE: 41,
      SUBSTRING: 42,
      NUMBER: 43,
      STRING2: 44,
      DECIMAL: 45,
      VARIABLE: 46,
      CHILD: 47,
      DESCENDANT: 48,
      ANCESTOR: 49,
      PRECEDING: 50,
      FOLLOWING: 51,
      NAMESPACE: 52,
      SELF: 53,
      PARENT: 54,
      ATTR: 55,
      "[": 56,
      "]": 57,
      FOR: 58,
      LFor: 59,
      forstmnt: 60,
      LForWhere: 61,
      IF: 62,
      THEN: 63,
      stmnt: 64,
      ELSE: 65,
      stmn: 66,
      IN: 67,
      ClauseExpr: 68,
      AT: 69,
      LForExpresiones: 70,
      For_Let_Opt: 71,
      Where: 72,
      LForOrderby: 73,
      Orderby: 74,
      LET: 75,
      ":=": 76,
      WHERE: 77,
      OrderBy: 78,
      ORDER: 79,
      BY: 80,
      LExp: 81,
      TO: 82,
      RETURN: 83,
      DECLARE: 84,
      FUNCTION: 85,
      Prefix: 86,
      Parameter: 87,
      AS: 88,
      XS: 89,
      TipoVar: 90,
      prod_statement: 91,
      ";": 92,
      tk_llavea: 93,
      tk_llavec: 94,
      LVariables: 95,
      INTEGER_: 96,
      DECIMAL_: 97,
      STRING_: 98,
      BOOLEAN_: 99,
      DOUBLE_: 100,
      "<=": 101,
      ">=": 102,
      "=": 103,
      "!=": 104,
      ">": 105,
      "<": 106,
      EQ: 107,
      NE: 108,
      LT: 109,
      LE: 110,
      GT: 111,
      GE: 112,
      Expr: 113,
      "+": 114,
      "-": 115,
      DIV: 116,
      MOD: 117,
      OR: 118,
      AND: 119,
      $accept: 0,
      $end: 1,
    },
    terminals_: {
      2: "error",
      5: "EOF",
      14: "LOCAL",
      15: ":",
      16: "ID",
      17: "(",
      19: ")",
      20: ",",
      23: "DIVSIGN",
      25: "ORSIGN",
      28: "@",
      31: "::",
      32: "*",
      33: "DIR",
      34: "TEXT",
      35: "NODE",
      36: "POSITION",
      37: "LAST",
      38: "DOC",
      39: "STRING",
      40: "DATA",
      41: "UPPERCASE",
      42: "SUBSTRING",
      43: "NUMBER",
      44: "STRING2",
      45: "DECIMAL",
      46: "VARIABLE",
      47: "CHILD",
      48: "DESCENDANT",
      49: "ANCESTOR",
      50: "PRECEDING",
      51: "FOLLOWING",
      52: "NAMESPACE",
      53: "SELF",
      54: "PARENT",
      55: "ATTR",
      56: "[",
      57: "]",
      58: "FOR",
      62: "IF",
      63: "THEN",
      65: "ELSE",
      66: "stmn",
      67: "IN",
      69: "AT",
      74: "Orderby",
      75: "LET",
      76: ":=",
      77: "WHERE",
      79: "ORDER",
      80: "BY",
      82: "TO",
      83: "RETURN",
      84: "DECLARE",
      85: "FUNCTION",
      88: "AS",
      89: "XS",
      92: ";",
      93: "tk_llavea",
      94: "tk_llavec",
      96: "INTEGER_",
      97: "DECIMAL_",
      98: "STRING_",
      99: "BOOLEAN_",
      100: "DOUBLE_",
      101: "<=",
      102: ">=",
      103: "=",
      104: "!=",
      105: ">",
      106: "<",
      107: "EQ",
      108: "NE",
      109: "LT",
      110: "LE",
      111: "GT",
      112: "GE",
      114: "+",
      115: "-",
      116: "DIV",
      117: "MOD",
      118: "OR",
      119: "AND",
    },
    productions_: [
      0,
      [3, 2],
      [4, 2],
      [4, 1],
      [4, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [13, 6],
      [13, 5],
      [18, 3],
      [18, 1],
      [22, 2],
      [22, 1],
      [24, 4],
      [24, 3],
      [24, 1],
      [26, 1],
      [26, 3],
      [26, 3],
      [26, 3],
      [26, 2],
      [27, 2],
      [27, 2],
      [27, 3],
      [27, 3],
      [27, 3],
      [27, 3],
      [27, 4],
      [27, 4],
      [27, 4],
      [27, 8],
      [27, 2],
      [27, 2],
      [11, 1],
      [11, 1],
      [11, 1],
      [11, 1],
      [11, 1],
      [11, 1],
      [11, 1],
      [30, 1],
      [30, 1],
      [30, 1],
      [30, 1],
      [30, 1],
      [30, 1],
      [30, 1],
      [30, 1],
      [30, 1],
      [29, 3],
      [29, 0],
      [7, 4],
      [10, 8],
      [64, 2],
      [64, 3],
      [64, 1],
      [59, 5],
      [59, 7],
      [59, 3],
      [59, 5],
      [60, 1],
      [60, 0],
      [70, 2],
      [70, 1],
      [71, 1],
      [71, 1],
      [61, 2],
      [61, 1],
      [73, 2],
      [73, 1],
      [9, 4],
      [72, 2],
      [78, 3],
      [81, 3],
      [81, 1],
      [68, 1],
      [68, 5],
      [68, 5],
      [8, 2],
      [8, 2],
      [12, 12],
      [91, 3],
      [91, 2],
      [87, 3],
      [87, 2],
      [95, 7],
      [95, 5],
      [90, 1],
      [90, 1],
      [90, 1],
      [90, 1],
      [90, 1],
      [86, 1],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 3],
      [21, 1],
      [113, 3],
      [113, 3],
      [113, 3],
      [113, 3],
      [113, 3],
      [113, 3],
      [113, 3],
      [113, 3],
      [113, 1],
    ],
    performAction: function anonymous(
      yytext,
      yyleng,
      yylineno,
      yy,
      yystate /* action[1] */,
      $$ /* vstack */,
      _$ /* lstack */
    ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
        case 1:
          return $$[$0 - 1];
          break;
        case 2:
          var node1 = new NodoXML(
            "LExpresiones",
            "LExpresiones",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          node1.addHijo($$[$0 - 1]);
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 14:
        case 16:
        case 19:
        case 20:
        case 43:
        case 59:
        case 64:
        case 67:
        case 68:
        case 69:
        case 71:
        case 73:
        case 78:
        case 79:
        case 82:
        case 83:
        case 109:
        case 118:
          this.$ = $$[$0];
          break;
        case 4:
          errores.push(
            new Error_(
              _$[$0].first_line,
              _$[$0].first_column,
              "Sintactico",
              "Valor inesperado " + yytext
            )
          );
          return "error";

          break;
        case 11:
          var node1 = new NodoXML(
            "LlamadaFuncion",
            "LlamadaFuncion",
            _$[$0 - 5].first_line + 1,
            +_$[$0 - 5].first_column + 1
          );
          node1.addHijo($$[$0 - 3]);
          node1.addHijo($$[$0 - 1]);
          this.$ = node1;

          break;
        case 12:
          var node1 = new NodoXML(
            "LlamadaFuncion",
            "LlamadaFuncion",
            _$[$0 - 4].first_line + 1,
            +_$[$0 - 4].first_column + 1
          );
          node1.addHijo($$[$0 - 2]);
          this.$ = node1;

          break;
        case 13:
          var node1 = new NodoXML(
            "LParams",
            "LParams",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          node1.addHijo($$[$0 - 2]);
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 15:
          var node1 = new NodoXML(
            "Exp",
            "Exp",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          var node2 = new NodoXML(
            $$[$0 - 1],
            "DIVSIGN",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          node1.addHijo(node2);
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 17:
          var node1 = new NodoXML(
            "Lexp",
            "Lexp",
            _$[$0 - 3].first_line + 1,
            +_$[$0 - 3].first_column + 1
          );
          var node2 = new NodoXML(
            $$[$0 - 2],
            "ORSIGN",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          var node3 = new NodoXML(
            $$[$0 - 1],
            "DIVSIGN",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          node1.addHijo($$[$0 - 3]);
          node1.addHijo(node2);
          node1.addHijo(node3);
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 18:
          var node1 = new NodoXML(
            "Lexp",
            "Lexp",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          var node2 = new NodoXML(
            $$[$0 - 1],
            "DIVSIGN",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          node1.addHijo($$[$0 - 2]);
          node1.addHijo(node2);
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 21:
          var node1 = new NodoXML(
            $$[$0 - 2],
            "Syntfin",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          node1.addHijo($$[$0 - 1]);
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 22:
          var node1 = new NodoXML(
            $$[$0 - 1],
            "Syntfin",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          node1.addHijo($$[$0 - 2]);
          node1.addHijo($$[$0 - 1]);
          this.$ = node1;

          break;
        case 23:
          var node1 = new NodoXML(
            $$[$0 - 2],
            "Syntfin",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          node1.addHijo($$[$0 - 1]);
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 24:
          this.$ = new NodoXML(
            "@*",
            "Syntfin",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          break;
        case 25:
        case 35:
          var node1 = new NodoXML(
            "Fin",
            "Fin",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          node1.addHijo($$[$0 - 1]);
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 26:
        case 36:
          var node1 = new NodoXML(
            $$[$0 - 1],
            "Fin",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          node1.addHijo($$[$0]);
          this.$ = node1;

          break;
        case 27:
        case 28:
        case 29:
        case 30:
          this.$ = new NodoXML(
            $$[$0 - 2],
            "Fin",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          break;
        case 31:
        case 32:
        case 33:
          var node1 = new NodoXML(
            $$[$0 - 3],
            "Fin",
            _$[$0 - 3].first_line + 1,
            +_$[$0 - 3].first_column + 1
          );
          node1.addHijo($$[$0 - 1]);
          this.$ = node1;

          break;
        case 34:
          var node1 = new NodoXML(
            $$[$0 - 7],
            "Fin",
            _$[$0 - 7].first_line + 1,
            +_$[$0 - 7].first_column + 1
          );
          node1.addHijo($$[$0 - 5]);
          node1.addHijo($$[$0 - 3]);
          node1.addHijo($$[$0 - 1]);
          this.$ = node1;

          break;
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
          this.$ = new NodoXML(
            $$[$0],
            "Valor",
            _$[$0].first_line + 1,
            _$[$0].first_column + 1
          );
          break;
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
          this.$ = new NodoXML(
            $$[$0],
            "Preservada",
            _$[$0].first_line + 1,
            _$[$0].first_column + 1
          );
          break;
        case 53:
        case 85:
        case 87:
        case 117:
          this.$ = $$[$0 - 1];
          break;
        case 54:
        case 57:
        case 65:
        case 86:
        case 88:
          this.$ = null;
          break;
        case 55:
          var nodo1 = new NodoXML(
            "For",
            "For",
            _$[$0 - 3].first_line + 1,
            _$[$0 - 3].first_column + 1
          );
          nodo1.addHijo($$[$0 - 2]);
          nodo1.addHijo($$[$0 - 1]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 56:
          var nodo1 = new NodoXML(
            "If",
            "If",
            _$[$0 - 7].first_line + 1,
            _$[$0 - 7].first_column + 1
          );
          nodo1.addHijo($$[$0 - 5]);
          nodo1.addHijo($$[$0 - 2]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 58:
          this.$ = $$[$0 - 2];
          break;
        case 60:
          var nodo1 = new NodoXML(
            "LFor",
            "LFor",
            _$[$0 - 4].first_line + 1,
            _$[$0 - 4].first_column + 1
          );
          var nodo2 = new NodoXML(
            "IN",
            "IN",
            _$[$0 - 1].first_line + 1,
            _$[$0 - 1].first_column + 1
          );
          nodo1.addHijo($$[$0 - 4]);
          nodo2.addHijo($$[$0 - 2]);
          nodo2.addHijo($$[$0]);
          nodo1.addHijo(nodo2);
          this.$ = nodo1;

          break;
        case 61:
          var nodo1 = new NodoXML(
            "LFor",
            "LFor",
            _$[$0 - 6].first_line + 1,
            _$[$0 - 6].first_column + 1
          );
          var nodo2 = new NodoXML(
            "AT",
            "AT",
            _$[$0 - 3].first_line + 1,
            _$[$0 - 3].first_column + 1
          );
          var nodo3 = new NodoXML(
            "IN",
            "IN",
            _$[$0 - 1].first_line + 1,
            _$[$0 - 1].first_column + 1
          );
          nodo3.addHijo($$[$0 - 2]);
          nodo3.addHijo($$[$0]);
          nodo2.addHijo($$[$0 - 4]);
          nodo2.addHijo(nodo3);
          nodo1.addHijo($$[$0 - 6]);
          nodo1.addHijo(nodo2);
          this.$ = nodo1;

          break;
        case 62:
          var nodo1 = new NodoXML(
            "IN",
            "IN",
            _$[$0 - 1].first_line + 1,
            _$[$0 - 1].first_column + 1
          );
          nodo1.addHijo($$[$0 - 2]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 63:
          var nodo1 = new NodoXML(
            "AT",
            "AT",
            _$[$0 - 3].first_line + 1,
            _$[$0 - 3].first_column + 1
          );
          var nodo2 = new NodoXML(
            "IN",
            "IN",
            _$[$0 - 1].first_line + 1,
            _$[$0 - 1].first_column + 1
          );
          nodo2.addHijo($$[$0 - 2]);
          nodo2.addHijo($$[$0]);
          nodo1.addHijo($$[$0 - 4]);
          nodo1.addHijo(nodo2);
          this.$ = nodo1;

          break;
        case 66:
          var nodo1 = new NodoXML(
            "LForExpresiones",
            "LForExpresiones",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          nodo1.addHijo($$[$0 - 1]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 70:
          var nodo1 = new NodoXML(
            "LForWhere",
            "LForWhere",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          nodo1.addHijo($$[$0 - 1]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 72:
          var node1 = new NodoXML(
            "LForOrderby",
            "LForOrderby",
            _$[$0 - 1].first_line + 1,
            +_$[$0 - 1].first_column + 1
          );
          node1.addHijo($$[$0 - 1]);
          node1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 74:
          var nodo1 = new NodoXML(
            "Let",
            "Let",
            _$[$0 - 3].first_line + 1,
            +_$[$0 - 3].first_column + 1
          );
          var nodo2 = new NodoXML(
            $$[$0 - 2],
            "VARIABLE",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          nodo1.addHijo(nodo2);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 75:
          var nodo1 = new NodoXML(
            "Where",
            "Where",
            _$[$0 - 1].first_line + 1,
            _$[$0 - 1].first_column + 1
          );
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 76:
          var nodo1 = new NodoXML(
            "OrderBy",
            "OrderBy",
            _$[$0 - 2].first_line + 1,
            _$[$0 - 2].first_column + 1
          );
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 77:
          var nodo1 = new NodoXML(
            "LExp",
            "LExp",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          nodo1.addHijo($$[$0 - 2]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 80:
          var node1 = new NodoXML(
            "TO",
            "TO",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          node1.addHijo($$[$0 - 3]);
          node1.addHijo($$[$0 - 1]);
          this.$ = node1;

          break;
        case 81:
          var node1 = new NodoXML(
            ",",
            ",",
            _$[$0 - 2].first_line + 1,
            +_$[$0 - 2].first_column + 1
          );
          node1.addHijo($$[$0 - 3]);
          node1.addHijo($$[$0 - 1]);
          this.$ = node1;

          break;
        case 84:
          var nodo1 = new NodoXML(
            "Function",
            "Function",
            _$[$0 - 11].first_line + 1,
            +_$[$0 - 11].first_column + 1
          );
          var nodo2 = new NodoXML(
            "AS",
            "AS",
            _$[$0 - 5].first_line + 1,
            +_$[$0 - 5].first_column + 1
          );
          var nodo3 = new NodoXML(
            $$[$0 - 7],
            "ID",
            _$[$0 - 7].first_line + 1,
            +_$[$0 - 7].first_column + 1
          );
          nodo2.addHijo($$[$0 - 6]);
          nodo2.addHijo($$[$0 - 2]);
          nodo1.addHijo($$[$0 - 9]);
          nodo1.addHijo(nodo3);
          nodo1.addHijo(nodo2);
          nodo1.addHijo($$[$0 - 1]);
          this.$ = nodo1;

          break;
        case 89:
          var nodo1 = new NodoXML(
            "LVariables",
            "LVariables",
            _$[$0 - 6].first_line + 1,
            +_$[$0 - 6].first_column + 1
          );
          var nodo2 = new NodoXML(
            "AS",
            "AS",
            _$[$0 - 3].first_line + 1,
            _$[$0 - 3].first_column + 1
          );
          nodo2.addHijo($$[$0 - 4]);
          nodo2.addHijo($$[$0]);
          nodo1.addHijo($$[$0 - 6]);
          nodo1.addHijo(nodo2);
          this.$ = nodo1;

          break;
        case 90:
          var nodo1 = new NodoXML(
            "AS",
            "AS",
            _$[$0 - 3].first_line + 1,
            +_$[$0 - 3].first_column + 1
          );
          nodo1.addHijo($$[$0 - 4]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
          this.$ = new NodoXML(
            $$[$0],
            "TipoVar",
            _$[$0].first_line + 1,
            _$[$0].first_column + 1
          );
          break;
        case 96:
          this.$ = new NodoXML(
            $$[$0],
            "Prefix",
            _$[$0].first_line + 1,
            _$[$0].first_column + 1
          );
          break;
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
          var nodo1 = new NodoXML(
            $$[$0 - 1],
            "ExprLogica",
            _$[$0 - 2].first_line + 1,
            _$[$0 - 2].first_column
          );
          nodo1.addHijo($$[$0 - 2]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
          var nodo1 = new NodoXML(
            $$[$0 - 1],
            "Expr",
            _$[$0 - 1].first_line + 1,
            _$[$0 - 1].first_column
          );
          nodo1.addHijo($$[$0 - 2]);
          nodo1.addHijo($$[$0]);
          this.$ = nodo1;

          break;
      }
    },
    table: [
      {
        2: $V0,
        3: 1,
        4: 2,
        6: 3,
        7: 5,
        8: 6,
        9: 7,
        10: 8,
        11: 9,
        12: 10,
        13: 21,
        14: $V1,
        16: $V2,
        39: $V3,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        58: $V8,
        62: $V9,
        75: $Va,
        83: $Vb,
        84: $Vc,
      },
      { 1: [3] },
      {
        5: [1, 24],
        6: 25,
        7: 5,
        8: 6,
        9: 7,
        10: 8,
        11: 9,
        12: 10,
        13: 21,
        14: $V1,
        16: $V2,
        39: $V3,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        58: $V8,
        62: $V9,
        75: $Va,
        83: $Vb,
        84: $Vc,
      },
      o($Vd, [2, 3]),
      o($Vd, [2, 4]),
      o($Ve, [2, 5]),
      o($Ve, [2, 6]),
      o($Ve, [2, 7]),
      o($Ve, [2, 8]),
      o($Ve, [2, 9]),
      o($Ve, [2, 10]),
      { 46: [1, 27], 59: 26 },
      {
        10: 29,
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 28,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        62: $V9,
        113: 30,
      },
      { 46: [1, 59] },
      { 17: [1, 60] },
      o($VB, [2, 37]),
      o($VB, [2, 38]),
      o($VB, [2, 39]),
      o($VB, [2, 40]),
      o($VB, [2, 41]),
      o($VB, [2, 42]),
      o($VB, [2, 43]),
      { 85: [1, 61] },
      { 15: [1, 62] },
      { 1: [2, 1] },
      o($Vd, [2, 2]),
      o($VC, [2, 65], {
        60: 63,
        70: 65,
        71: 66,
        9: 67,
        7: 68,
        20: [1, 64],
        58: $V8,
        75: $Va,
      }),
      { 67: [1, 69], 69: [1, 70] },
      o($VD, [2, 82], {
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($VD, [2, 83]),
      o($VQ, [2, 109], {
        32: $VR,
        114: $VS,
        115: $VT,
        116: $VU,
        117: $VV,
        118: [1, 88],
        119: $VW,
      }),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 90,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      o($VX, [2, 118]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        24: 91,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
      },
      o($VX, [2, 16], { 23: $VY, 25: $VZ }),
      o($V_, [2, 19]),
      o($V_, [2, 20]),
      {
        11: 94,
        13: 21,
        14: $V1,
        16: $V2,
        30: 95,
        32: [1, 96],
        39: $V3,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
      },
      o($V_, $V$, { 29: 98, 31: [1, 97], 56: $V01 }),
      o($V_, $V$, { 29: 100, 56: $V01 }),
      o($V_, $V$, { 29: 101, 56: $V01 }),
      { 17: [1, 102] },
      { 17: [1, 103] },
      { 17: [1, 104] },
      { 17: [1, 105] },
      { 17: [1, 106] },
      { 17: [1, 107] },
      { 17: [1, 108] },
      { 17: [1, 109] },
      o($V_, $V$, { 29: 110, 56: $V01 }),
      o($V11, [2, 44]),
      o($V11, [2, 45]),
      o($V11, [2, 46]),
      o($V11, [2, 47]),
      o($V11, [2, 48]),
      o($V11, [2, 49]),
      o($V11, [2, 50]),
      o($V11, [2, 51]),
      o($V11, [2, 52]),
      { 76: [1, 111] },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 112,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      { 14: [1, 114], 86: 113 },
      { 16: [1, 115] },
      { 8: 121, 61: 116, 72: 117, 73: 118, 74: $V21, 77: [1, 119], 83: $Vb },
      { 46: [1, 122] },
      o($VC, [2, 64], { 9: 67, 7: 68, 71: 123, 58: $V8, 75: $Va }),
      o($V31, [2, 67]),
      o($V31, [2, 68]),
      o($V31, [2, 69]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $V41,
        21: 125,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        68: 124,
        113: 30,
      },
      { 46: [1, 127] },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 128,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 129,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 130,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 131,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 132,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 133,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 134,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 135,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 136,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 137,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 138,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 139,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 140,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 141,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 142,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 143,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 144,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 145,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 146,
      },
      {
        19: $V51,
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      o($VX, [2, 15], { 23: $VY, 25: $VZ }),
      { 23: [1, 148] },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        26: 149,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
      },
      o($V_, $V$, { 29: 150, 56: $V01 }),
      o($V_, $V$, { 29: 151, 56: $V01 }),
      o($V_, [2, 24]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        27: 152,
        30: 153,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
      },
      o($V_, [2, 35]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 154,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      o($V_, [2, 25]),
      o($V_, [2, 26]),
      { 19: [1, 155] },
      { 19: [1, 156] },
      { 19: [1, 157] },
      { 19: [1, 158] },
      { 39: [1, 159] },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 160,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 161,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 162,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      o($V_, [2, 36]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $V41,
        21: 125,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        68: 163,
        113: 30,
      },
      {
        19: [1, 164],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      { 15: [1, 165] },
      { 15: [2, 96] },
      { 17: [1, 166] },
      o($VD, [2, 55]),
      { 8: 121, 73: 167, 74: $V21, 83: $Vb },
      o($VD, [2, 71]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 168,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      { 8: 169, 83: $Vb },
      o($VD, [2, 73]),
      { 67: [1, 170], 69: [1, 171] },
      o($V31, [2, 66]),
      o($V61, [2, 62]),
      o($V71, [2, 79], {
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 172,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      { 67: [1, 173] },
      o($V81, [2, 97], {
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($V81, [2, 98], {
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($V91, [2, 99], {
        101: $VE,
        102: $VF,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($V91, [2, 100], {
        101: $VE,
        102: $VF,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($V81, [2, 101], {
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($V81, [2, 102], {
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($Va1, [2, 103], { 109: $VM, 110: $VN, 111: $VO, 112: $VP }),
      o($Va1, [2, 104], { 109: $VM, 110: $VN, 111: $VO, 112: $VP }),
      o($VQ, [2, 105]),
      o($VQ, [2, 106]),
      o($VQ, [2, 107]),
      o($VQ, [2, 108]),
      o($Vb1, [2, 110], { 32: $VR, 116: $VU, 117: $VV }),
      o($Vb1, [2, 111], { 32: $VR, 116: $VU, 117: $VV }),
      o($VX, [2, 112]),
      o($VX, [2, 113]),
      o($VX, [2, 114]),
      o(
        [
          5, 14, 16, 19, 20, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75, 77, 82,
          83, 84, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
          112, 118,
        ],
        [2, 115],
        { 32: $VR, 114: $VS, 115: $VT, 116: $VU, 117: $VV, 119: $VW }
      ),
      o(
        [
          5, 14, 16, 19, 20, 39, 43, 44, 45, 46, 57, 58, 62, 65, 74, 75, 77, 82,
          83, 84, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
          112, 118, 119,
        ],
        [2, 116],
        { 32: $VR, 114: $VS, 115: $VT, 116: $VU, 117: $VV }
      ),
      o($VX, [2, 117]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        26: 174,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
      },
      o($V_, [2, 18]),
      o($V_, [2, 21]),
      o($V_, [2, 23]),
      o($V_, [2, 22]),
      o($V_, $V$, { 29: 98, 56: $V01 }),
      {
        57: [1, 175],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      o($V_, [2, 27]),
      o($V_, [2, 28]),
      o($V_, [2, 29]),
      o($V_, [2, 30]),
      { 19: [1, 176] },
      {
        19: [1, 177],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      {
        19: [1, 178],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      {
        20: [1, 179],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      o($VD, [2, 74]),
      { 63: [1, 180] },
      { 16: [1, 181] },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        18: 182,
        19: [1, 183],
        21: 184,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      o($VD, [2, 70]),
      o([74, 83], [2, 75], {
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($VD, [2, 72]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $V41,
        21: 125,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        68: 185,
        113: 30,
      },
      { 46: [1, 186] },
      {
        19: $V51,
        20: [1, 188],
        82: [1, 187],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $V41,
        21: 125,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        68: 189,
        113: 30,
      },
      o($V_, [2, 17]),
      o($V_, [2, 53]),
      o($V_, [2, 31]),
      o($V_, [2, 32]),
      o($V_, [2, 33]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 190,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        6: 193,
        7: 5,
        8: 6,
        9: 7,
        10: 8,
        11: 9,
        12: 10,
        13: 21,
        14: $V1,
        16: $V2,
        17: [1, 192],
        39: $V3,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        58: $V8,
        62: $V9,
        64: 191,
        75: $Va,
        83: $Vb,
        84: $Vc,
      },
      { 17: [1, 195], 87: 194 },
      { 19: [1, 196], 20: [1, 197] },
      o($VB, [2, 12]),
      o($Vc1, [2, 14], {
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($V61, [2, 60]),
      { 67: [1, 198] },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 199,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 200,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      o($V61, [2, 63]),
      {
        20: [1, 201],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      { 65: [1, 202] },
      {
        2: $V0,
        4: 204,
        6: 3,
        7: 5,
        8: 6,
        9: 7,
        10: 8,
        11: 9,
        12: 10,
        13: 21,
        14: $V1,
        16: $V2,
        19: [1, 203],
        39: $V3,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        58: $V8,
        62: $V9,
        75: $Va,
        83: $Vb,
        84: $Vc,
      },
      { 65: [2, 59] },
      { 88: [1, 205] },
      { 19: [1, 207], 46: [1, 208], 95: 206 },
      o($VB, [2, 11]),
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 209,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $V41,
        21: 125,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        68: 210,
        113: 30,
      },
      {
        19: [1, 211],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      {
        19: [1, 212],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      {
        11: 39,
        13: 21,
        14: $V1,
        16: $V2,
        17: $Vf,
        21: 213,
        22: 32,
        23: $Vg,
        24: 34,
        26: 35,
        27: 36,
        28: $Vh,
        30: 38,
        32: $Vi,
        33: $Vj,
        34: $Vk,
        35: $Vl,
        36: $Vm,
        37: $Vn,
        38: $Vo,
        39: $V3,
        40: $Vp,
        41: $Vq,
        42: $Vr,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        47: $Vs,
        48: $Vt,
        49: $Vu,
        50: $Vv,
        51: $Vw,
        52: $Vx,
        53: $Vy,
        54: $Vz,
        55: $VA,
        113: 30,
      },
      { 66: [1, 214] },
      { 65: [2, 57] },
      {
        6: 25,
        7: 5,
        8: 6,
        9: 7,
        10: 8,
        11: 9,
        12: 10,
        13: 21,
        14: $V1,
        16: $V2,
        19: [1, 215],
        39: $V3,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        58: $V8,
        62: $V9,
        75: $Va,
        83: $Vb,
        84: $Vc,
      },
      { 89: [1, 216] },
      { 19: [1, 217], 20: [1, 218] },
      { 88: [2, 88] },
      { 88: [1, 219] },
      o($Vc1, [2, 13], {
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      }),
      o($V61, [2, 61]),
      o($V71, [2, 80]),
      o($V71, [2, 81]),
      {
        19: [1, 220],
        101: $VE,
        102: $VF,
        103: $VG,
        104: $VH,
        105: $VI,
        106: $VJ,
        107: $VK,
        108: $VL,
        109: $VM,
        110: $VN,
        111: $VO,
        112: $VP,
      },
      o($VD, [2, 56]),
      { 65: [2, 58] },
      { 15: [1, 221] },
      { 88: [2, 87] },
      { 46: [1, 222] },
      { 89: [1, 223] },
      o($V_, [2, 34]),
      { 90: 224, 96: $Vd1, 97: $Ve1, 98: $Vf1, 99: $Vg1, 100: $Vh1 },
      { 88: [1, 230] },
      { 15: [1, 231] },
      { 91: 232, 93: [1, 233] },
      o($Vi1, [2, 91]),
      o($Vi1, [2, 92]),
      o($Vi1, [2, 93]),
      o($Vi1, [2, 94]),
      o($Vi1, [2, 95]),
      { 89: [1, 234] },
      { 90: 235, 96: $Vd1, 97: $Ve1, 98: $Vf1, 99: $Vg1, 100: $Vh1 },
      { 92: [1, 236] },
      {
        2: $V0,
        4: 237,
        6: 3,
        7: 5,
        8: 6,
        9: 7,
        10: 8,
        11: 9,
        12: 10,
        13: 21,
        14: $V1,
        16: $V2,
        39: $V3,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        58: $V8,
        62: $V9,
        75: $Va,
        83: $Vb,
        84: $Vc,
        94: [1, 238],
      },
      { 15: [1, 239] },
      o($Vc1, [2, 90]),
      o($Ve, [2, 84]),
      {
        6: 25,
        7: 5,
        8: 6,
        9: 7,
        10: 8,
        11: 9,
        12: 10,
        13: 21,
        14: $V1,
        16: $V2,
        39: $V3,
        43: $V4,
        44: $V5,
        45: $V6,
        46: $V7,
        58: $V8,
        62: $V9,
        75: $Va,
        83: $Vb,
        84: $Vc,
        94: [1, 240],
      },
      { 92: [2, 86] },
      { 90: 241, 96: $Vd1, 97: $Ve1, 98: $Vf1, 99: $Vg1, 100: $Vh1 },
      { 92: [2, 85] },
      o($Vc1, [2, 89]),
    ],
    defaultActions: {
      24: [2, 1],
      114: [2, 96],
      193: [2, 59],
      203: [2, 57],
      207: [2, 88],
      215: [2, 58],
      217: [2, 87],
      238: [2, 86],
      240: [2, 85],
    },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = "",
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

      var args = lstack.slice.call(arguments, 1);

      //this.reductionCount = this.shiftCount = 0;

      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      // copy state
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == "undefined") {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);

      var ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === "function") {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }

      _token_stack: var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== "number") {
          token = self.symbols_[token] || token;
        }
        return token;
      };

      var symbol,
        preErrorSymbol,
        state,
        action,
        a,
        r,
        yyval = {},
        p,
        len,
        newState,
        expected;
      while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == "undefined") {
            symbol = lex();
          }
          // read action for current state and first input
          action = table[state] && table[state][symbol];
        }

        // handle parse error
        _handle_error: if (
          typeof action === "undefined" ||
          !action.length ||
          !action[0]
        ) {
          var error_rule_depth;
          var errStr = "";

          // Return the rule stack depth where the nearest error rule can be found.
          // Return FALSE when no error recovery rule was found.
          function locateNearestErrorRecoveryRule(state) {
            var stack_probe = stack.length - 1;
            var depth = 0;

            // try to recover from error
            for (;;) {
              // check for error recovery rule in this state
              if (TERROR.toString() in table[state]) {
                return depth;
              }
              if (state === 0 || stack_probe < 2) {
                return false; // No suitable error recovery rule available.
              }
              stack_probe -= 2; // popStack(1): [symbol, action]
              state = stack[stack_probe];
              ++depth;
            }
          }

          if (!recovering) {
            // first see if there's any chance at hitting an error recovery rule:
            error_rule_depth = locateNearestErrorRecoveryRule(state);

            // Report error
            expected = [];
            for (p in table[state]) {
              if (this.terminals_[p] && p > TERROR) {
                expected.push("'" + this.terminals_[p] + "'");
              }
            }
            if (lexer.showPosition) {
              errStr =
                "Parse error on line " +
                (yylineno + 1) +
                ":\n" +
                lexer.showPosition() +
                "\nExpecting " +
                expected.join(", ") +
                ", got '" +
                (this.terminals_[symbol] || symbol) +
                "'";
            } else {
              errStr =
                "Parse error on line " +
                (yylineno + 1) +
                ": Unexpected " +
                (symbol == EOF
                  ? "end of input"
                  : "'" + (this.terminals_[symbol] || symbol) + "'");
            }
            this.parseError(errStr, {
              text: lexer.match,
              token: this.terminals_[symbol] || symbol,
              line: lexer.yylineno,
              loc: yyloc,
              expected: expected,
              recoverable: error_rule_depth !== false,
            });
          } else if (preErrorSymbol !== EOF) {
            error_rule_depth = locateNearestErrorRecoveryRule(state);
          }

          // just recovered from another error
          if (recovering == 3) {
            if (symbol === EOF || preErrorSymbol === EOF) {
              throw new Error(
                errStr ||
                  "Parsing halted while starting to recover from another error."
              );
            }

            // discard current lookahead and grab another
            yyleng = lexer.yyleng;
            yytext = lexer.yytext;
            yylineno = lexer.yylineno;
            yyloc = lexer.yylloc;
            symbol = lex();
          }

          // try to recover from error
          if (error_rule_depth === false) {
            throw new Error(
              errStr ||
                "Parsing halted. No suitable error recovery rule available."
            );
          }
          popStack(error_rule_depth);

          preErrorSymbol = symbol == TERROR ? null : symbol; // save the lookahead token
          symbol = TERROR; // insert generic error symbol as new lookahead
          state = stack[stack.length - 1];
          action = table[state] && table[state][TERROR];
          recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error(
            "Parse Error: multiple actions possible at state: " +
              state +
              ", token: " +
              symbol
          );
        }

        switch (action[0]) {
          case 1: // shift
            //this.shiftCount++;

            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]); // push state
            symbol = null;
            if (!preErrorSymbol) {
              // normal execution/no error
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                recovering--;
              }
            } else {
              // error just occurred, resume old lookahead f/ before error
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }
            break;

          case 2:
            // reduce
            //this.reductionCount++;

            len = this.productions_[action[1]][1];

            // perform semantic action
            yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
            // default location, uses first token for firsts, last for lasts
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column,
            };
            if (ranges) {
              yyval._$.range = [
                lstack[lstack.length - (len || 1)].range[0],
                lstack[lstack.length - 1].range[1],
              ];
            }
            r = this.performAction.apply(
              yyval,
              [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack,
              ].concat(args)
            );

            if (typeof r !== "undefined") {
              return r;
            }

            // pop off stack
            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }

            stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            // goto new state = table[STATE][NONTERMINAL]
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;

          case 3:
            // accept
            return true;
        }
      }

      return true;
    },
  };

  let valDeclaration = "";
  let valTag = "";
  let valInside = "";
  const { Error_ } = require("../Error");
  const { errores } = require("../Errores");
  const { NodoXML } = require("../Nodes/NodoXml");
  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = {
      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = "";
        this.conditionStack = ["INITIAL"];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0,
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines
            ? (lines.length === oldLines.length
                ? this.yylloc.first_column
                : 0) +
              oldLines[oldLines.length - lines.length].length -
              lines[0].length
            : this.yylloc.first_column - len,
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError(
            "Lexical error on line " +
              (this.yylineno + 1) +
              ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" +
              this.showPosition(),
            {
              text: "",
              token: null,
              line: this.yylineno,
            }
          );
        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(
          0,
          this.matched.length - this.match.length
        );
        return (
          (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "")
        );
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(
          /\n/g,
          ""
        );
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column,
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done,
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines
            ? lines[lines.length - 1].length -
              lines[lines.length - 1].match(/\r?\n?/)[0].length
            : this.yylloc.last_column + match[0].length,
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, (this.offset += this.yyleng)];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(
          this,
          this.yy,
          this,
          indexed_rule,
          this.conditionStack[this.conditionStack.length - 1]
        );
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;
        if (!this._more) {
          this.yytext = "";
          this.match = "";
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError(
            "Lexical error on line " +
              (this.yylineno + 1) +
              ". Unrecognized text.\n" +
              this.showPosition(),
            {
              text: "",
              token: null,
              line: this.yylineno,
            }
          );
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (
          this.conditionStack.length &&
          this.conditionStack[this.conditionStack.length - 1]
        ) {
          return this.conditions[
            this.conditionStack[this.conditionStack.length - 1]
          ].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: { "case-sensitive": true },
      performAction: function anonymous(
        yy,
        yy_,
        $avoiding_name_collisions,
        YY_START
      ) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
          case 0:
            this.begin("comment1");
            break;
          case 1:
            this.popState();
            break;
          case 2:
            break;
          case 3:
            break;
          case 4:
            this.begin("comment2");
            break;
          case 5:
            this.popState();
            break;
          case 6:
            break;
          case 7:
            break;
          case 8 /*se ignoran*/:
            break;
          case 9:
            return 45;
            break;
          case 10:
            return 43;
            break;
          case 11:
            return 39;
            break;
          case 12:
            return 44;
            break;
          case 13:
            return 23;
            break;
          case 14:
            return 33;
            break;
          case 15:
            return 49;
            break;
          case 16:
            return 51;
            break;
          case 17:
            return 50;
            break;
          case 18:
            return 25;
            break;
          case 19:
            return 28;
            break;
          case 20:
            return 32;
            break;
          case 21:
            return 31;
            break;
          case 22:
            return 76;
            break;
          case 23:
            return 115;
            break;
          case 24:
            return 114;
            break;
          case 25:
            return 20;
            break;
          case 26:
            return 15;
            break;
          case 27:
            return 92;
            break;
          case 28:
            return "</";
            break;
          case 29:
            return 101;
            break;
          case 30:
            return 102;
            break;
          case 31:
            return 106;
            break;
          case 32:
            return 105;
            break;
          case 33:
            return 104;
            break;
          case 34:
            return 103;
            break;
          case 35:
            return 118;
            break;
          case 36:
            return 119;
            break;
          case 37:
            return 117;
            break;
          case 38:
            return 116;
            break;
          case 39:
            return 17;
            break;
          case 40:
            return 19;
            break;
          case 41:
            return 56;
            break;
          case 42:
            return 57;
            break;
          case 43:
            return 93;
            break;
          case 44:
            return 94;
            break;
          case 45:
            return 47;
            break;
          case 46:
            return 55;
            break;
          case 47:
            return 48;
            break;
          case 48:
            return 52;
            break;
          case 49:
            return 54;
            break;
          case 50:
            return 53;
            break;
          case 51:
            return 34;
            break;
          case 52:
            return 37;
            break;
          case 53:
            return 36;
            break;
          case 54:
            return 35;
            break;
          case 55:
            return 107;
            break;
          case 56:
            return 108;
            break;
          case 57:
            return 109;
            break;
          case 58:
            return 110;
            break;
          case 59:
            return 111;
            break;
          case 60:
            return 112;
            break;
          case 61:
            return 38;
            break;
          case 62:
            return 58;
            break;
          case 63:
            return 67;
            break;
          case 64:
            return 83;
            break;
          case 65:
            return 69;
            break;
          case 66:
            return 67;
            break;
          case 67:
            return 82;
            break;
          case 68:
            return 75;
            break;
          case 69:
            return 77;
            break;
          case 70:
            return 79;
            break;
          case 71:
            return 80;
            break;
          case 72:
            return 62;
            break;
          case 73:
            return 63;
            break;
          case 74:
            return 65;
            break;
          case 75:
            return 40;
            break;
          case 76:
            return 41;
            break;
          case 77:
            return "SUBSTRING";
            break;
          case 78:
            return 84;
            break;
          case 79:
            return 85;
            break;
          case 80:
            return 14;
            break;
          case 81:
            return 88;
            break;
          case 82:
            return 89;
            break;
          case 83:
            return 97;
            break;
          case 84:
            return 96;
            break;
          case 85:
            return 98;
            break;
          case 86:
            return "DATE_";
            break;
          case 87:
            return "TIME_";
            break;
          case 88:
            return "DATETIME_";
            break;
          case 89:
            return 99;
            break;
          case 90:
            return 100;
            break;
          case 91:
            return "FLOAT_";
            break;
          case 92:
            return 16;
            break;
          case 93:
            return 46;
            break;
          case 94:
            return 5;
            break;
          case 95:
            errores.push(
              new Error_(
                yy_.yylloc.first_line,
                yy_.yylloc.first_column,
                "Lexico",
                "Valor inesperado " + yy_.yytext
              )
            );
            break;
        }
      },
      rules: [
        /^(?:<!--)/,
        /^(?:-->)/,
        /^(?:.)/,
        /^(?:[ \t\r\n\f])/,
        /^(?:\(:)/,
        /^(?::\))/,
        /^(?:.)/,
        /^(?:[ \t\r\n\f])/,
        /^(?:[ \t\n\r\f])/,
        /^(?:([0-9]+(\.[0-9]+)?))/,
        /^(?:([0-9]+))/,
        /^(?:(([\"][^"]*[\"])))/,
        /^(?:(([\'][^\']*[\'])))/,
        /^(?:((\/)(\/)?))/,
        /^(?:((\.)(\.)?))/,
        /^(?:((ancestor)(-or-self)?))/,
        /^(?:((following)(-sibling)?))/,
        /^(?:((preceding)(-sibling)?))/,
        /^(?:((\|)(\|)?))/,
        /^(?:@)/,
        /^(?:\*)/,
        /^(?:::)/,
        /^(?::=)/,
        /^(?:-)/,
        /^(?:\+)/,
        /^(?:,)/,
        /^(?::)/,
        /^(?:;)/,
        /^(?:<\/)/,
        /^(?:<=)/,
        /^(?:>=)/,
        /^(?:<)/,
        /^(?:>)/,
        /^(?:!=)/,
        /^(?:=)/,
        /^(?:or\b)/,
        /^(?:and\b)/,
        /^(?:mod\b)/,
        /^(?:div\b)/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:child\b)/,
        /^(?:attribute\b)/,
        /^(?:descendant\b)/,
        /^(?:namespace\b)/,
        /^(?:parent\b)/,
        /^(?:self\b)/,
        /^(?:text\b)/,
        /^(?:last\b)/,
        /^(?:position\b)/,
        /^(?:node\b)/,
        /^(?:eq\b)/,
        /^(?:ne\b)/,
        /^(?:lt\b)/,
        /^(?:le\b)/,
        /^(?:gt\b)/,
        /^(?:ge\b)/,
        /^(?:doc\b)/,
        /^(?:for\b)/,
        /^(?:in\b)/,
        /^(?:return\b)/,
        /^(?:at\b)/,
        /^(?:in\b)/,
        /^(?:to\b)/,
        /^(?:let\b)/,
        /^(?:where\b)/,
        /^(?:order\b)/,
        /^(?:by\b)/,
        /^(?:if\b)/,
        /^(?:then\b)/,
        /^(?:else\b)/,
        /^(?:data\b)/,
        /^(?:upper-case\b)/,
        /^(?:substring\b)/,
        /^(?:declare\b)/,
        /^(?:function\b)/,
        /^(?:local\b)/,
        /^(?:as\b)/,
        /^(?:xs\b)/,
        /^(?:decimal\b)/,
        /^(?:integer\b)/,
        /^(?:string\b)/,
        /^(?:date\b)/,
        /^(?:time\b)/,
        /^(?:dateTime\b)/,
        /^(?:boolean\b)/,
        /^(?:double\b)/,
        /^(?:float\b)/,
        /^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,
        /^(?:(\$)([a-zA-Z_])[a-zA-Z0-9_ñÑ.]*)/,
        /^(?:$)/,
        /^(?:.)/,
      ],
      conditions: {
        comment2: { rules: [5, 6, 7], inclusive: false },
        comment1: { rules: [1, 2, 3], inclusive: false },
        INITIAL: {
          rules: [
            0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
            24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
            58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
            75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
            92, 93, 94, 95,
          ],
          inclusive: true,
        },
      },
    };
    return lexer;
  })();
  parser.lexer = lexer;
  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
})();

if (typeof require !== "undefined" && typeof exports !== "undefined") {
  exports.parser = xQueryTrad;
  exports.Parser = xQueryTrad.Parser;
  exports.parse = function () {
    return xQueryTrad.parse.apply(xQueryTrad, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log("Usage: " + args[0] + " FILE");
      process.exit(1);
    }
    // var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    // return exports.parser.parse(source);
  };
  if (typeof module !== "undefined" && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}
